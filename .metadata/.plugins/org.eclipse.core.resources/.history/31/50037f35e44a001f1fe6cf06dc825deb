/*
 * HMI_ECU.c
 *
 *  Created on: Jul 21, 2024
 *      Author: Administrator
 */
#include "Headers/std_types.h"
#include "Headers/common_macros.h"
#include <util/delay.h>
#include "avr/io.h"
#include "Headers/lcd.h"
#include "Headers/keypad.h"
#include "Headers/uart2.h"
#include "Headers/timer1.h"
#define MC2_READY 0x10
#define BUZZER_ON (char) 0
#define VERIFY (char) 1
#define AUTH (char) 2
#define MOTOR (char) 3
unsigned char Pass_1[6],Pass_2[6],check_pass[6];
unsigned char log_pass[6];
char trials = 0;
 char Main_Pass[6];
char seconds = 0;
Timer1_ConfigType Timer_config;
/*UART_ConfigType UART_config;*/

/*******************************************************************************
 *                      Functions Prototypes                                   *
 *******************************************************************************/

void Enter_pass( unsigned char *pass1);
void Renter_pass(  unsigned char *pass2);
void Verify(const unsigned char *pass1 , const unsigned char *pass2);
void Main_opt();
void Log_in( unsigned char *pass);
char Auth(void);
char* itoa(int num, char* str, int base);
char strcmpp(const unsigned char *pass1 , const unsigned char *pass2);
void timer_increment(void);






int main(){
	/*UART_config.baud_rate = 9600;
	UART_config.bit_data = BIT_8;
	UART_config.parity = EVEN;
	UART_config.stop_bit=ONE;
	UART_init(&UART_config);*/
	Timer_config.mode = COMPARE;
	Timer_config.prescaler = F_CPU_1024;
	Timer_config.compare_value = 7812;
	Timer_config.initial_value = 0;

	UART_init(9600);
	LCD_init();
	while(1){
		Enter_pass(Pass_1);
		while(1){}


	}
	return 0;
}

void Enter_pass( unsigned char *pass1){
	_delay_ms(200);
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass");
	char chars = 0;
	_delay_ms(100);
	while(chars<5){
		char Pass_char=KEYPAD_getPressedKey();
		_delay_ms(200);
		char buff[2];
		itoa(Pass_char,buff,10);
		pass1[chars] = buff[0];
		LCD_moveCursor(1,chars);
		LCD_displayCharacter('*');
		chars++;
	}
	pass1[chars]='\0';
   /* LCD_displayStringRowColumn(1,6,pass1);*/
		while(1){
				char end=KEYPAD_getPressedKey() == '=';
				_delay_ms(150);
				if(end)
					break;
			}
		Renter_pass(Pass_2);

}

void Renter_pass(  unsigned char *pass2){
	_delay_ms(200);
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz re-Enter the");
	LCD_displayStringRowColumn(1,0,"same pass");
	char chars = 0;
	_delay_ms(100);
		while(chars<5){

			char Pass_char=KEYPAD_getPressedKey();
			_delay_ms(200);
			char buff[2];
			itoa(Pass_char,buff,10);
			pass2[chars] = buff[0];
			LCD_moveCursor(1,chars+10);
			LCD_displayCharacter('*');
			chars++;
		}

		pass2[chars]='\0';
	   /* LCD_displayStringRowColumn(1,6,pass1);*/

		while(1){
			char end=KEYPAD_getPressedKey() == '=';
			_delay_ms(150);
			if(end)
				break;
		}
		Verify(Pass_1,Pass_2);

}

void Verify(const unsigned char *pass1 , const unsigned char *pass2){
	char res = strcmpp(pass1,pass2);
	if (res){
		LCD_clearScreen();
		/*send to verify*/
		UART_sendByte(VERIFY);
		_delay_ms(250);
		UART_sendString(pass1);
		LCD_clearScreen();
		_delay_ms(200);
		Main_opt();
	}
	else{
		Enter_pass(Pass_1);
	}
}

void Main_opt(){
	_delay_ms(200);
	LCD_displayStringRowColumn(0,0,"+ : Open Door");
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
	while (1){
		char opt = KEYPAD_getPressedKey();
		if (opt == '+'){
			char matched = Auth();
			LCD_displayStringRowColumn(0,0,"         ");
			if (matched)
				LCD_displayCharacter('1');
			_delay_ms(1050);
			if (matched){
				trials = 0;
				UART_sendByte(MOTOR);
				Timer1_init(&Timer_config);
				void Timer1_setCallBack(timer_increment);
				LCD_clearScreen();
				while(seconds<15){
					//char second = buff[0];
					LCD_moveCursor(0,0);
					LCD_intgerToString(seconds);

				}
				/*char state = UART_recieveByte();

				if (state == 0){

				}
				else if (state == 1){

				}
				else if(state == 2){

				}*/

			}
			else{
				trials++;
				if (trials ==3){
					//send to open buzzer
					UART_sendByte(BUZZER_ON);
				}
				else {
					Main_opt();
				}
			}
		}

		else if (opt == '-'){

			char matched = Auth();
			LCD_displayStringRowColumn(0,0,"         ");
			if (matched)
			LCD_displayCharacter('1');
			_delay_ms(1050);
			if (matched){
				trials = 0;
				Enter_pass(Pass_1);
			}
			else{
				trials++;
				if (trials ==3){
					//send to open buzzer

					UART_sendByte(BUZZER_ON);
				}
				else {
					Main_opt();
				}
			}
		}

	}
}

char Auth(void){
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Plz Enter Pass");
		char chars = 0;
		_delay_ms(100);
		while(chars<5){
			char Pass_char=KEYPAD_getPressedKey();
			_delay_ms(150);
			char buff[2];
			itoa(Pass_char,buff,10);
			check_pass[chars] = buff[0];
			LCD_moveCursor(1,chars);
			LCD_displayCharacter('*');
			chars++;
		}
		check_pass[chars]='\0';
	   /* LCD_displayStringRowColumn(1,6,pass1);*/
			while(1){
					char end=KEYPAD_getPressedKey() == '=';
					_delay_ms(150);
					if(end)
						break;
				}
			//send to auth pass
			UART_sendByte(AUTH);
			_delay_ms(250);
			UART_sendString(check_pass);
			char matched = UART_recieveByte();
			return matched;

}

void timer_increment(void){
	seconds++;
}



























char strcmpp(const unsigned  char *pass1 , const unsigned char *pass2){

	while(*pass1 != '\0'){
		if (*pass1 != *pass2){
			return 0;
		}
		pass1++;
		pass2++;
	}
	return 1;
}

char* itoa(int num, char* str, int base) {
    int i = 0;
    int isNegative = 0;


    if (num == 0) {
        str[i++] = '0';
        str[i] = '\0';
        return str;
    }


    if (num < 0 && base == 10) {
        isNegative = 1;
        num = -num;
    }


    while (num != 0) {
        int rem = num % base;
        str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
        num = num / base;
    }
    if (isNegative) {
        str[i++] = '-';
    }

    str[i] = '\0';


    int start = 0;
    int end = i - 1;
    while (start < end) {
        char temp = str[start];
        str[start] = str[end];
        str[end] = temp;
        start++;
        end--;
    }

    return str;
}























