
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00003a18  00003aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  008000ba  008000ba  00003b06  2**0
                  ALLOC
  3 .stab         000036c0  00000000  00000000  00003b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001146  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000830e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000844e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000085be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a207  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b0f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c000  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c28d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ca5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa eb       	ldi	r26, 0xBA	; 186
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3e       	cpi	r26, 0xE2	; 226
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 eb       	ldi	r26, 0xB2	; 178
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 eb       	ldi	r24, 0xB2	; 178
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:





int main(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*UART_config.baud_rate = 9600;
	UART_config.bit_data = BIT_8;
	UART_config.parity = EVEN;
	UART_config.stop_bit=ONE;
	UART_init(&UART_config);*/
	Timer_config.mode = COMPARE;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	80 93 cf 00 	sts	0x00CF, r24
	Timer_config.prescaler = F_CPU_1024;
     b54:	85 e0       	ldi	r24, 0x05	; 5
     b56:	80 93 ce 00 	sts	0x00CE, r24
	Timer_config.compare_value = 7812;
     b5a:	84 e8       	ldi	r24, 0x84	; 132
     b5c:	9e e1       	ldi	r25, 0x1E	; 30
     b5e:	90 93 cd 00 	sts	0x00CD, r25
     b62:	80 93 cc 00 	sts	0x00CC, r24
	Timer_config.initial_value = 0;
     b66:	10 92 cb 00 	sts	0x00CB, r1
     b6a:	10 92 ca 00 	sts	0x00CA, r1

	UART_init(9600);
     b6e:	60 e8       	ldi	r22, 0x80	; 128
     b70:	75 e2       	ldi	r23, 0x25	; 37
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 ad 1b 	call	0x375a	; 0x375a <UART_init>
	LCD_init();
     b7a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <LCD_init>
	while(1){
		Enter_pass(Pass_1);
     b7e:	8e eb       	ldi	r24, 0xBE	; 190
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 c4 05 	call	0xb88	; 0xb88 <Enter_pass>
     b86:	ff cf       	rjmp	.-2      	; 0xb86 <main+0x40>

00000b88 <Enter_pass>:

	}
	return 0;
}

void Enter_pass( unsigned char *pass1){
     b88:	df 93       	push	r29
     b8a:	cf 93       	push	r28
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	ef 97       	sbiw	r28, 0x3f	; 63
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	9f af       	std	Y+63, r25	; 0x3f
     b9e:	8e af       	std	Y+62, r24	; 0x3e
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	a8 e4       	ldi	r26, 0x48	; 72
     ba6:	b3 e4       	ldi	r27, 0x43	; 67
     ba8:	8d ab       	std	Y+53, r24	; 0x35
     baa:	9e ab       	std	Y+54, r25	; 0x36
     bac:	af ab       	std	Y+55, r26	; 0x37
     bae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb0:	6d a9       	ldd	r22, Y+53	; 0x35
     bb2:	7e a9       	ldd	r23, Y+54	; 0x36
     bb4:	8f a9       	ldd	r24, Y+55	; 0x37
     bb6:	98 ad       	ldd	r25, Y+56	; 0x38
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	4a ef       	ldi	r20, 0xFA	; 250
     bbe:	54 e4       	ldi	r21, 0x44	; 68
     bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	89 ab       	std	Y+49, r24	; 0x31
     bca:	9a ab       	std	Y+50, r25	; 0x32
     bcc:	ab ab       	std	Y+51, r26	; 0x33
     bce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     bd0:	69 a9       	ldd	r22, Y+49	; 0x31
     bd2:	7a a9       	ldd	r23, Y+50	; 0x32
     bd4:	8b a9       	ldd	r24, Y+51	; 0x33
     bd6:	9c a9       	ldd	r25, Y+52	; 0x34
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e8       	ldi	r20, 0x80	; 128
     bde:	5f e3       	ldi	r21, 0x3F	; 63
     be0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be4:	88 23       	and	r24, r24
     be6:	2c f4       	brge	.+10     	; 0xbf2 <Enter_pass+0x6a>
		__ticks = 1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	98 ab       	std	Y+48, r25	; 0x30
     bee:	8f a7       	std	Y+47, r24	; 0x2f
     bf0:	3f c0       	rjmp	.+126    	; 0xc70 <Enter_pass+0xe8>
	else if (__tmp > 65535)
     bf2:	69 a9       	ldd	r22, Y+49	; 0x31
     bf4:	7a a9       	ldd	r23, Y+50	; 0x32
     bf6:	8b a9       	ldd	r24, Y+51	; 0x33
     bf8:	9c a9       	ldd	r25, Y+52	; 0x34
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	3f ef       	ldi	r19, 0xFF	; 255
     bfe:	4f e7       	ldi	r20, 0x7F	; 127
     c00:	57 e4       	ldi	r21, 0x47	; 71
     c02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c06:	18 16       	cp	r1, r24
     c08:	4c f5       	brge	.+82     	; 0xc5c <Enter_pass+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0a:	6d a9       	ldd	r22, Y+53	; 0x35
     c0c:	7e a9       	ldd	r23, Y+54	; 0x36
     c0e:	8f a9       	ldd	r24, Y+55	; 0x37
     c10:	98 ad       	ldd	r25, Y+56	; 0x38
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e2       	ldi	r20, 0x20	; 32
     c18:	51 e4       	ldi	r21, 0x41	; 65
     c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	98 ab       	std	Y+48, r25	; 0x30
     c30:	8f a7       	std	Y+47, r24	; 0x2f
     c32:	0f c0       	rjmp	.+30     	; 0xc52 <Enter_pass+0xca>
     c34:	88 ec       	ldi	r24, 0xC8	; 200
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	9e a7       	std	Y+46, r25	; 0x2e
     c3a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3c:	8d a5       	ldd	r24, Y+45	; 0x2d
     c3e:	9e a5       	ldd	r25, Y+46	; 0x2e
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <Enter_pass+0xb8>
     c44:	9e a7       	std	Y+46, r25	; 0x2e
     c46:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c48:	8f a5       	ldd	r24, Y+47	; 0x2f
     c4a:	98 a9       	ldd	r25, Y+48	; 0x30
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	98 ab       	std	Y+48, r25	; 0x30
     c50:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c52:	8f a5       	ldd	r24, Y+47	; 0x2f
     c54:	98 a9       	ldd	r25, Y+48	; 0x30
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	69 f7       	brne	.-38     	; 0xc34 <Enter_pass+0xac>
     c5a:	14 c0       	rjmp	.+40     	; 0xc84 <Enter_pass+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5c:	69 a9       	ldd	r22, Y+49	; 0x31
     c5e:	7a a9       	ldd	r23, Y+50	; 0x32
     c60:	8b a9       	ldd	r24, Y+51	; 0x33
     c62:	9c a9       	ldd	r25, Y+52	; 0x34
     c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	98 ab       	std	Y+48, r25	; 0x30
     c6e:	8f a7       	std	Y+47, r24	; 0x2f
     c70:	8f a5       	ldd	r24, Y+47	; 0x2f
     c72:	98 a9       	ldd	r25, Y+48	; 0x30
     c74:	9c a7       	std	Y+44, r25	; 0x2c
     c76:	8b a7       	std	Y+43, r24	; 0x2b
     c78:	8b a5       	ldd	r24, Y+43	; 0x2b
     c7a:	9c a5       	ldd	r25, Y+44	; 0x2c
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <Enter_pass+0xf4>
     c80:	9c a7       	std	Y+44, r25	; 0x2c
     c82:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);
	LCD_clearScreen();
     c84:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass");
     c88:	20 e6       	ldi	r18, 0x60	; 96
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	a9 01       	movw	r20, r18
     c92:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_displayStringRowColumn>
	char chars = 0;
     c96:	1b ae       	std	Y+59, r1	; 0x3b
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	a8 ec       	ldi	r26, 0xC8	; 200
     c9e:	b2 e4       	ldi	r27, 0x42	; 66
     ca0:	8f a3       	std	Y+39, r24	; 0x27
     ca2:	98 a7       	std	Y+40, r25	; 0x28
     ca4:	a9 a7       	std	Y+41, r26	; 0x29
     ca6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca8:	6f a1       	ldd	r22, Y+39	; 0x27
     caa:	78 a5       	ldd	r23, Y+40	; 0x28
     cac:	89 a5       	ldd	r24, Y+41	; 0x29
     cae:	9a a5       	ldd	r25, Y+42	; 0x2a
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	4a ef       	ldi	r20, 0xFA	; 250
     cb6:	54 e4       	ldi	r21, 0x44	; 68
     cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	8b a3       	std	Y+35, r24	; 0x23
     cc2:	9c a3       	std	Y+36, r25	; 0x24
     cc4:	ad a3       	std	Y+37, r26	; 0x25
     cc6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cc8:	6b a1       	ldd	r22, Y+35	; 0x23
     cca:	7c a1       	ldd	r23, Y+36	; 0x24
     ccc:	8d a1       	ldd	r24, Y+37	; 0x25
     cce:	9e a1       	ldd	r25, Y+38	; 0x26
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e8       	ldi	r20, 0x80	; 128
     cd6:	5f e3       	ldi	r21, 0x3F	; 63
     cd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cdc:	88 23       	and	r24, r24
     cde:	2c f4       	brge	.+10     	; 0xcea <Enter_pass+0x162>
		__ticks = 1;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	9a a3       	std	Y+34, r25	; 0x22
     ce6:	89 a3       	std	Y+33, r24	; 0x21
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <Enter_pass+0x1e0>
	else if (__tmp > 65535)
     cea:	6b a1       	ldd	r22, Y+35	; 0x23
     cec:	7c a1       	ldd	r23, Y+36	; 0x24
     cee:	8d a1       	ldd	r24, Y+37	; 0x25
     cf0:	9e a1       	ldd	r25, Y+38	; 0x26
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	3f ef       	ldi	r19, 0xFF	; 255
     cf6:	4f e7       	ldi	r20, 0x7F	; 127
     cf8:	57 e4       	ldi	r21, 0x47	; 71
     cfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cfe:	18 16       	cp	r1, r24
     d00:	4c f5       	brge	.+82     	; 0xd54 <Enter_pass+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d02:	6f a1       	ldd	r22, Y+39	; 0x27
     d04:	78 a5       	ldd	r23, Y+40	; 0x28
     d06:	89 a5       	ldd	r24, Y+41	; 0x29
     d08:	9a a5       	ldd	r25, Y+42	; 0x2a
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e2       	ldi	r20, 0x20	; 32
     d10:	51 e4       	ldi	r21, 0x41	; 65
     d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	bc 01       	movw	r22, r24
     d1c:	cd 01       	movw	r24, r26
     d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	9a a3       	std	Y+34, r25	; 0x22
     d28:	89 a3       	std	Y+33, r24	; 0x21
     d2a:	0f c0       	rjmp	.+30     	; 0xd4a <Enter_pass+0x1c2>
     d2c:	88 ec       	ldi	r24, 0xC8	; 200
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	98 a3       	std	Y+32, r25	; 0x20
     d32:	8f 8f       	std	Y+31, r24	; 0x1f
     d34:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d36:	98 a1       	ldd	r25, Y+32	; 0x20
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <Enter_pass+0x1b0>
     d3c:	98 a3       	std	Y+32, r25	; 0x20
     d3e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d40:	89 a1       	ldd	r24, Y+33	; 0x21
     d42:	9a a1       	ldd	r25, Y+34	; 0x22
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	9a a3       	std	Y+34, r25	; 0x22
     d48:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d4a:	89 a1       	ldd	r24, Y+33	; 0x21
     d4c:	9a a1       	ldd	r25, Y+34	; 0x22
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	69 f7       	brne	.-38     	; 0xd2c <Enter_pass+0x1a4>
     d52:	a9 c0       	rjmp	.+338    	; 0xea6 <Enter_pass+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d54:	6b a1       	ldd	r22, Y+35	; 0x23
     d56:	7c a1       	ldd	r23, Y+36	; 0x24
     d58:	8d a1       	ldd	r24, Y+37	; 0x25
     d5a:	9e a1       	ldd	r25, Y+38	; 0x26
     d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	9a a3       	std	Y+34, r25	; 0x22
     d66:	89 a3       	std	Y+33, r24	; 0x21
     d68:	89 a1       	ldd	r24, Y+33	; 0x21
     d6a:	9a a1       	ldd	r25, Y+34	; 0x22
     d6c:	9e 8f       	std	Y+30, r25	; 0x1e
     d6e:	8d 8f       	std	Y+29, r24	; 0x1d
     d70:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d72:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <Enter_pass+0x1ec>
     d78:	9e 8f       	std	Y+30, r25	; 0x1e
     d7a:	8d 8f       	std	Y+29, r24	; 0x1d
     d7c:	94 c0       	rjmp	.+296    	; 0xea6 <Enter_pass+0x31e>
	_delay_ms(100);
	while(chars<5){
		char Pass_char=KEYPAD_getPressedKey();
     d7e:	0e 94 a5 13 	call	0x274a	; 0x274a <KEYPAD_getPressedKey>
     d82:	8a af       	std	Y+58, r24	; 0x3a
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	a8 e4       	ldi	r26, 0x48	; 72
     d8a:	b3 e4       	ldi	r27, 0x43	; 67
     d8c:	89 8f       	std	Y+25, r24	; 0x19
     d8e:	9a 8f       	std	Y+26, r25	; 0x1a
     d90:	ab 8f       	std	Y+27, r26	; 0x1b
     d92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d94:	69 8d       	ldd	r22, Y+25	; 0x19
     d96:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d98:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	4a ef       	ldi	r20, 0xFA	; 250
     da2:	54 e4       	ldi	r21, 0x44	; 68
     da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	8d 8b       	std	Y+21, r24	; 0x15
     dae:	9e 8b       	std	Y+22, r25	; 0x16
     db0:	af 8b       	std	Y+23, r26	; 0x17
     db2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     db4:	6d 89       	ldd	r22, Y+21	; 0x15
     db6:	7e 89       	ldd	r23, Y+22	; 0x16
     db8:	8f 89       	ldd	r24, Y+23	; 0x17
     dba:	98 8d       	ldd	r25, Y+24	; 0x18
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e8       	ldi	r20, 0x80	; 128
     dc2:	5f e3       	ldi	r21, 0x3F	; 63
     dc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc8:	88 23       	and	r24, r24
     dca:	2c f4       	brge	.+10     	; 0xdd6 <Enter_pass+0x24e>
		__ticks = 1;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	9c 8b       	std	Y+20, r25	; 0x14
     dd2:	8b 8b       	std	Y+19, r24	; 0x13
     dd4:	3f c0       	rjmp	.+126    	; 0xe54 <Enter_pass+0x2cc>
	else if (__tmp > 65535)
     dd6:	6d 89       	ldd	r22, Y+21	; 0x15
     dd8:	7e 89       	ldd	r23, Y+22	; 0x16
     dda:	8f 89       	ldd	r24, Y+23	; 0x17
     ddc:	98 8d       	ldd	r25, Y+24	; 0x18
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	3f ef       	ldi	r19, 0xFF	; 255
     de2:	4f e7       	ldi	r20, 0x7F	; 127
     de4:	57 e4       	ldi	r21, 0x47	; 71
     de6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dea:	18 16       	cp	r1, r24
     dec:	4c f5       	brge	.+82     	; 0xe40 <Enter_pass+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dee:	69 8d       	ldd	r22, Y+25	; 0x19
     df0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     df2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     df4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e2       	ldi	r20, 0x20	; 32
     dfc:	51 e4       	ldi	r21, 0x41	; 65
     dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	bc 01       	movw	r22, r24
     e08:	cd 01       	movw	r24, r26
     e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	9c 8b       	std	Y+20, r25	; 0x14
     e14:	8b 8b       	std	Y+19, r24	; 0x13
     e16:	0f c0       	rjmp	.+30     	; 0xe36 <Enter_pass+0x2ae>
     e18:	88 ec       	ldi	r24, 0xC8	; 200
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	9a 8b       	std	Y+18, r25	; 0x12
     e1e:	89 8b       	std	Y+17, r24	; 0x11
     e20:	89 89       	ldd	r24, Y+17	; 0x11
     e22:	9a 89       	ldd	r25, Y+18	; 0x12
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <Enter_pass+0x29c>
     e28:	9a 8b       	std	Y+18, r25	; 0x12
     e2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2c:	8b 89       	ldd	r24, Y+19	; 0x13
     e2e:	9c 89       	ldd	r25, Y+20	; 0x14
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	9c 8b       	std	Y+20, r25	; 0x14
     e34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e36:	8b 89       	ldd	r24, Y+19	; 0x13
     e38:	9c 89       	ldd	r25, Y+20	; 0x14
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	69 f7       	brne	.-38     	; 0xe18 <Enter_pass+0x290>
     e3e:	14 c0       	rjmp	.+40     	; 0xe68 <Enter_pass+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e40:	6d 89       	ldd	r22, Y+21	; 0x15
     e42:	7e 89       	ldd	r23, Y+22	; 0x16
     e44:	8f 89       	ldd	r24, Y+23	; 0x17
     e46:	98 8d       	ldd	r25, Y+24	; 0x18
     e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	9c 8b       	std	Y+20, r25	; 0x14
     e52:	8b 8b       	std	Y+19, r24	; 0x13
     e54:	8b 89       	ldd	r24, Y+19	; 0x13
     e56:	9c 89       	ldd	r25, Y+20	; 0x14
     e58:	98 8b       	std	Y+16, r25	; 0x10
     e5a:	8f 87       	std	Y+15, r24	; 0x0f
     e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e5e:	98 89       	ldd	r25, Y+16	; 0x10
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	f1 f7       	brne	.-4      	; 0xe60 <Enter_pass+0x2d8>
     e64:	98 8b       	std	Y+16, r25	; 0x10
     e66:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		char buff[2];
		itoa(Pass_char,buff,10);
     e68:	8a ad       	ldd	r24, Y+58	; 0x3a
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	9e 01       	movw	r18, r28
     e70:	24 5c       	subi	r18, 0xC4	; 196
     e72:	3f 4f       	sbci	r19, 0xFF	; 255
     e74:	b9 01       	movw	r22, r18
     e76:	4a e0       	ldi	r20, 0x0A	; 10
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <itoa>
		pass1[chars] = buff[0];
     e7e:	8b ad       	ldd	r24, Y+59	; 0x3b
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	8e ad       	ldd	r24, Y+62	; 0x3e
     e86:	9f ad       	ldd	r25, Y+63	; 0x3f
     e88:	fc 01       	movw	r30, r24
     e8a:	e2 0f       	add	r30, r18
     e8c:	f3 1f       	adc	r31, r19
     e8e:	8c ad       	ldd	r24, Y+60	; 0x3c
     e90:	80 83       	st	Z, r24
		LCD_moveCursor(1,chars);
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	6b ad       	ldd	r22, Y+59	; 0x3b
     e96:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <LCD_moveCursor>
		LCD_displayCharacter('*');
     e9a:	8a e2       	ldi	r24, 0x2A	; 42
     e9c:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <LCD_displayCharacter>
		chars++;
     ea0:	8b ad       	ldd	r24, Y+59	; 0x3b
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	8b af       	std	Y+59, r24	; 0x3b
	_delay_ms(200);
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass");
	char chars = 0;
	_delay_ms(100);
	while(chars<5){
     ea6:	8b ad       	ldd	r24, Y+59	; 0x3b
     ea8:	85 30       	cpi	r24, 0x05	; 5
     eaa:	08 f4       	brcc	.+2      	; 0xeae <Enter_pass+0x326>
     eac:	68 cf       	rjmp	.-304    	; 0xd7e <Enter_pass+0x1f6>
		pass1[chars] = buff[0];
		LCD_moveCursor(1,chars);
		LCD_displayCharacter('*');
		chars++;
	}
	pass1[chars]='\0';
     eae:	8b ad       	ldd	r24, Y+59	; 0x3b
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	8e ad       	ldd	r24, Y+62	; 0x3e
     eb6:	9f ad       	ldd	r25, Y+63	; 0x3f
     eb8:	fc 01       	movw	r30, r24
     eba:	e2 0f       	add	r30, r18
     ebc:	f3 1f       	adc	r31, r19
     ebe:	10 82       	st	Z, r1
   /* LCD_displayStringRowColumn(1,6,pass1);*/
		while(1){
				char end=KEYPAD_getPressedKey() == '=';
     ec0:	0e 94 a5 13 	call	0x274a	; 0x274a <KEYPAD_getPressedKey>
     ec4:	19 ae       	std	Y+57, r1	; 0x39
     ec6:	8d 33       	cpi	r24, 0x3D	; 61
     ec8:	11 f4       	brne	.+4      	; 0xece <Enter_pass+0x346>
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	89 af       	std	Y+57, r24	; 0x39
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	a6 e1       	ldi	r26, 0x16	; 22
     ed4:	b3 e4       	ldi	r27, 0x43	; 67
     ed6:	8b 87       	std	Y+11, r24	; 0x0b
     ed8:	9c 87       	std	Y+12, r25	; 0x0c
     eda:	ad 87       	std	Y+13, r26	; 0x0d
     edc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ede:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	4a ef       	ldi	r20, 0xFA	; 250
     eec:	54 e4       	ldi	r21, 0x44	; 68
     eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	8f 83       	std	Y+7, r24	; 0x07
     ef8:	98 87       	std	Y+8, r25	; 0x08
     efa:	a9 87       	std	Y+9, r26	; 0x09
     efc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     efe:	6f 81       	ldd	r22, Y+7	; 0x07
     f00:	78 85       	ldd	r23, Y+8	; 0x08
     f02:	89 85       	ldd	r24, Y+9	; 0x09
     f04:	9a 85       	ldd	r25, Y+10	; 0x0a
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e8       	ldi	r20, 0x80	; 128
     f0c:	5f e3       	ldi	r21, 0x3F	; 63
     f0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f12:	88 23       	and	r24, r24
     f14:	2c f4       	brge	.+10     	; 0xf20 <Enter_pass+0x398>
		__ticks = 1;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9e 83       	std	Y+6, r25	; 0x06
     f1c:	8d 83       	std	Y+5, r24	; 0x05
     f1e:	3f c0       	rjmp	.+126    	; 0xf9e <Enter_pass+0x416>
	else if (__tmp > 65535)
     f20:	6f 81       	ldd	r22, Y+7	; 0x07
     f22:	78 85       	ldd	r23, Y+8	; 0x08
     f24:	89 85       	ldd	r24, Y+9	; 0x09
     f26:	9a 85       	ldd	r25, Y+10	; 0x0a
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	3f ef       	ldi	r19, 0xFF	; 255
     f2c:	4f e7       	ldi	r20, 0x7F	; 127
     f2e:	57 e4       	ldi	r21, 0x47	; 71
     f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f34:	18 16       	cp	r1, r24
     f36:	4c f5       	brge	.+82     	; 0xf8a <Enter_pass+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f38:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e2       	ldi	r20, 0x20	; 32
     f46:	51 e4       	ldi	r21, 0x41	; 65
     f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	bc 01       	movw	r22, r24
     f52:	cd 01       	movw	r24, r26
     f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	9e 83       	std	Y+6, r25	; 0x06
     f5e:	8d 83       	std	Y+5, r24	; 0x05
     f60:	0f c0       	rjmp	.+30     	; 0xf80 <Enter_pass+0x3f8>
     f62:	88 ec       	ldi	r24, 0xC8	; 200
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	8b 83       	std	Y+3, r24	; 0x03
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <Enter_pass+0x3e6>
     f72:	9c 83       	std	Y+4, r25	; 0x04
     f74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	9e 81       	ldd	r25, Y+6	; 0x06
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	9e 83       	std	Y+6, r25	; 0x06
     f7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	69 f7       	brne	.-38     	; 0xf62 <Enter_pass+0x3da>
     f88:	14 c0       	rjmp	.+40     	; 0xfb2 <Enter_pass+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8a:	6f 81       	ldd	r22, Y+7	; 0x07
     f8c:	78 85       	ldd	r23, Y+8	; 0x08
     f8e:	89 85       	ldd	r24, Y+9	; 0x09
     f90:	9a 85       	ldd	r25, Y+10	; 0x0a
     f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	9e 83       	std	Y+6, r25	; 0x06
     f9c:	8d 83       	std	Y+5, r24	; 0x05
     f9e:	8d 81       	ldd	r24, Y+5	; 0x05
     fa0:	9e 81       	ldd	r25, Y+6	; 0x06
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <Enter_pass+0x422>
     fae:	9a 83       	std	Y+2, r25	; 0x02
     fb0:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(150);
				if(end)
     fb2:	89 ad       	ldd	r24, Y+57	; 0x39
     fb4:	88 23       	and	r24, r24
     fb6:	09 f4       	brne	.+2      	; 0xfba <Enter_pass+0x432>
     fb8:	83 cf       	rjmp	.-250    	; 0xec0 <Enter_pass+0x338>
					break;
			}
		Renter_pass(Pass_2);
     fba:	84 ec       	ldi	r24, 0xC4	; 196
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <Renter_pass>

}
     fc2:	ef 96       	adiw	r28, 0x3f	; 63
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <Renter_pass>:

void Renter_pass(  unsigned char *pass2){
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	ef 97       	sbiw	r28, 0x3f	; 63
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	9f af       	std	Y+63, r25	; 0x3f
     fea:	8e af       	std	Y+62, r24	; 0x3e
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	a8 e4       	ldi	r26, 0x48	; 72
     ff2:	b3 e4       	ldi	r27, 0x43	; 67
     ff4:	8d ab       	std	Y+53, r24	; 0x35
     ff6:	9e ab       	std	Y+54, r25	; 0x36
     ff8:	af ab       	std	Y+55, r26	; 0x37
     ffa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffc:	6d a9       	ldd	r22, Y+53	; 0x35
     ffe:	7e a9       	ldd	r23, Y+54	; 0x36
    1000:	8f a9       	ldd	r24, Y+55	; 0x37
    1002:	98 ad       	ldd	r25, Y+56	; 0x38
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	4a ef       	ldi	r20, 0xFA	; 250
    100a:	54 e4       	ldi	r21, 0x44	; 68
    100c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	89 ab       	std	Y+49, r24	; 0x31
    1016:	9a ab       	std	Y+50, r25	; 0x32
    1018:	ab ab       	std	Y+51, r26	; 0x33
    101a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    101c:	69 a9       	ldd	r22, Y+49	; 0x31
    101e:	7a a9       	ldd	r23, Y+50	; 0x32
    1020:	8b a9       	ldd	r24, Y+51	; 0x33
    1022:	9c a9       	ldd	r25, Y+52	; 0x34
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e8       	ldi	r20, 0x80	; 128
    102a:	5f e3       	ldi	r21, 0x3F	; 63
    102c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1030:	88 23       	and	r24, r24
    1032:	2c f4       	brge	.+10     	; 0x103e <Renter_pass+0x6a>
		__ticks = 1;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	98 ab       	std	Y+48, r25	; 0x30
    103a:	8f a7       	std	Y+47, r24	; 0x2f
    103c:	3f c0       	rjmp	.+126    	; 0x10bc <Renter_pass+0xe8>
	else if (__tmp > 65535)
    103e:	69 a9       	ldd	r22, Y+49	; 0x31
    1040:	7a a9       	ldd	r23, Y+50	; 0x32
    1042:	8b a9       	ldd	r24, Y+51	; 0x33
    1044:	9c a9       	ldd	r25, Y+52	; 0x34
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	3f ef       	ldi	r19, 0xFF	; 255
    104a:	4f e7       	ldi	r20, 0x7F	; 127
    104c:	57 e4       	ldi	r21, 0x47	; 71
    104e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1052:	18 16       	cp	r1, r24
    1054:	4c f5       	brge	.+82     	; 0x10a8 <Renter_pass+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1056:	6d a9       	ldd	r22, Y+53	; 0x35
    1058:	7e a9       	ldd	r23, Y+54	; 0x36
    105a:	8f a9       	ldd	r24, Y+55	; 0x37
    105c:	98 ad       	ldd	r25, Y+56	; 0x38
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e2       	ldi	r20, 0x20	; 32
    1064:	51 e4       	ldi	r21, 0x41	; 65
    1066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	bc 01       	movw	r22, r24
    1070:	cd 01       	movw	r24, r26
    1072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	98 ab       	std	Y+48, r25	; 0x30
    107c:	8f a7       	std	Y+47, r24	; 0x2f
    107e:	0f c0       	rjmp	.+30     	; 0x109e <Renter_pass+0xca>
    1080:	88 ec       	ldi	r24, 0xC8	; 200
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9e a7       	std	Y+46, r25	; 0x2e
    1086:	8d a7       	std	Y+45, r24	; 0x2d
    1088:	8d a5       	ldd	r24, Y+45	; 0x2d
    108a:	9e a5       	ldd	r25, Y+46	; 0x2e
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	f1 f7       	brne	.-4      	; 0x108c <Renter_pass+0xb8>
    1090:	9e a7       	std	Y+46, r25	; 0x2e
    1092:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1094:	8f a5       	ldd	r24, Y+47	; 0x2f
    1096:	98 a9       	ldd	r25, Y+48	; 0x30
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	98 ab       	std	Y+48, r25	; 0x30
    109c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109e:	8f a5       	ldd	r24, Y+47	; 0x2f
    10a0:	98 a9       	ldd	r25, Y+48	; 0x30
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	69 f7       	brne	.-38     	; 0x1080 <Renter_pass+0xac>
    10a6:	14 c0       	rjmp	.+40     	; 0x10d0 <Renter_pass+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a8:	69 a9       	ldd	r22, Y+49	; 0x31
    10aa:	7a a9       	ldd	r23, Y+50	; 0x32
    10ac:	8b a9       	ldd	r24, Y+51	; 0x33
    10ae:	9c a9       	ldd	r25, Y+52	; 0x34
    10b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	98 ab       	std	Y+48, r25	; 0x30
    10ba:	8f a7       	std	Y+47, r24	; 0x2f
    10bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    10be:	98 a9       	ldd	r25, Y+48	; 0x30
    10c0:	9c a7       	std	Y+44, r25	; 0x2c
    10c2:	8b a7       	std	Y+43, r24	; 0x2b
    10c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    10c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <Renter_pass+0xf4>
    10cc:	9c a7       	std	Y+44, r25	; 0x2c
    10ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);
	LCD_clearScreen();
    10d0:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz re-Enter the");
    10d4:	2f e6       	ldi	r18, 0x6F	; 111
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	a9 01       	movw	r20, r18
    10de:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"same pass");
    10e2:	20 e8       	ldi	r18, 0x80	; 128
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	a9 01       	movw	r20, r18
    10ec:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_displayStringRowColumn>
	char chars = 0;
    10f0:	1b ae       	std	Y+59, r1	; 0x3b
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	a8 ec       	ldi	r26, 0xC8	; 200
    10f8:	b2 e4       	ldi	r27, 0x42	; 66
    10fa:	8f a3       	std	Y+39, r24	; 0x27
    10fc:	98 a7       	std	Y+40, r25	; 0x28
    10fe:	a9 a7       	std	Y+41, r26	; 0x29
    1100:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1102:	6f a1       	ldd	r22, Y+39	; 0x27
    1104:	78 a5       	ldd	r23, Y+40	; 0x28
    1106:	89 a5       	ldd	r24, Y+41	; 0x29
    1108:	9a a5       	ldd	r25, Y+42	; 0x2a
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	4a ef       	ldi	r20, 0xFA	; 250
    1110:	54 e4       	ldi	r21, 0x44	; 68
    1112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	8b a3       	std	Y+35, r24	; 0x23
    111c:	9c a3       	std	Y+36, r25	; 0x24
    111e:	ad a3       	std	Y+37, r26	; 0x25
    1120:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1122:	6b a1       	ldd	r22, Y+35	; 0x23
    1124:	7c a1       	ldd	r23, Y+36	; 0x24
    1126:	8d a1       	ldd	r24, Y+37	; 0x25
    1128:	9e a1       	ldd	r25, Y+38	; 0x26
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e8       	ldi	r20, 0x80	; 128
    1130:	5f e3       	ldi	r21, 0x3F	; 63
    1132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1136:	88 23       	and	r24, r24
    1138:	2c f4       	brge	.+10     	; 0x1144 <Renter_pass+0x170>
		__ticks = 1;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	9a a3       	std	Y+34, r25	; 0x22
    1140:	89 a3       	std	Y+33, r24	; 0x21
    1142:	3f c0       	rjmp	.+126    	; 0x11c2 <Renter_pass+0x1ee>
	else if (__tmp > 65535)
    1144:	6b a1       	ldd	r22, Y+35	; 0x23
    1146:	7c a1       	ldd	r23, Y+36	; 0x24
    1148:	8d a1       	ldd	r24, Y+37	; 0x25
    114a:	9e a1       	ldd	r25, Y+38	; 0x26
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	3f ef       	ldi	r19, 0xFF	; 255
    1150:	4f e7       	ldi	r20, 0x7F	; 127
    1152:	57 e4       	ldi	r21, 0x47	; 71
    1154:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1158:	18 16       	cp	r1, r24
    115a:	4c f5       	brge	.+82     	; 0x11ae <Renter_pass+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115c:	6f a1       	ldd	r22, Y+39	; 0x27
    115e:	78 a5       	ldd	r23, Y+40	; 0x28
    1160:	89 a5       	ldd	r24, Y+41	; 0x29
    1162:	9a a5       	ldd	r25, Y+42	; 0x2a
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e2       	ldi	r20, 0x20	; 32
    116a:	51 e4       	ldi	r21, 0x41	; 65
    116c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	bc 01       	movw	r22, r24
    1176:	cd 01       	movw	r24, r26
    1178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9a a3       	std	Y+34, r25	; 0x22
    1182:	89 a3       	std	Y+33, r24	; 0x21
    1184:	0f c0       	rjmp	.+30     	; 0x11a4 <Renter_pass+0x1d0>
    1186:	88 ec       	ldi	r24, 0xC8	; 200
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	98 a3       	std	Y+32, r25	; 0x20
    118c:	8f 8f       	std	Y+31, r24	; 0x1f
    118e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1190:	98 a1       	ldd	r25, Y+32	; 0x20
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <Renter_pass+0x1be>
    1196:	98 a3       	std	Y+32, r25	; 0x20
    1198:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    119a:	89 a1       	ldd	r24, Y+33	; 0x21
    119c:	9a a1       	ldd	r25, Y+34	; 0x22
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	9a a3       	std	Y+34, r25	; 0x22
    11a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a4:	89 a1       	ldd	r24, Y+33	; 0x21
    11a6:	9a a1       	ldd	r25, Y+34	; 0x22
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	69 f7       	brne	.-38     	; 0x1186 <Renter_pass+0x1b2>
    11ac:	ac c0       	rjmp	.+344    	; 0x1306 <Renter_pass+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ae:	6b a1       	ldd	r22, Y+35	; 0x23
    11b0:	7c a1       	ldd	r23, Y+36	; 0x24
    11b2:	8d a1       	ldd	r24, Y+37	; 0x25
    11b4:	9e a1       	ldd	r25, Y+38	; 0x26
    11b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	9a a3       	std	Y+34, r25	; 0x22
    11c0:	89 a3       	std	Y+33, r24	; 0x21
    11c2:	89 a1       	ldd	r24, Y+33	; 0x21
    11c4:	9a a1       	ldd	r25, Y+34	; 0x22
    11c6:	9e 8f       	std	Y+30, r25	; 0x1e
    11c8:	8d 8f       	std	Y+29, r24	; 0x1d
    11ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <Renter_pass+0x1fa>
    11d2:	9e 8f       	std	Y+30, r25	; 0x1e
    11d4:	8d 8f       	std	Y+29, r24	; 0x1d
    11d6:	97 c0       	rjmp	.+302    	; 0x1306 <Renter_pass+0x332>
	_delay_ms(100);
		while(chars<5){

			char Pass_char=KEYPAD_getPressedKey();
    11d8:	0e 94 a5 13 	call	0x274a	; 0x274a <KEYPAD_getPressedKey>
    11dc:	8a af       	std	Y+58, r24	; 0x3a
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a8 e4       	ldi	r26, 0x48	; 72
    11e4:	b3 e4       	ldi	r27, 0x43	; 67
    11e6:	89 8f       	std	Y+25, r24	; 0x19
    11e8:	9a 8f       	std	Y+26, r25	; 0x1a
    11ea:	ab 8f       	std	Y+27, r26	; 0x1b
    11ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ee:	69 8d       	ldd	r22, Y+25	; 0x19
    11f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	4a ef       	ldi	r20, 0xFA	; 250
    11fc:	54 e4       	ldi	r21, 0x44	; 68
    11fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	8d 8b       	std	Y+21, r24	; 0x15
    1208:	9e 8b       	std	Y+22, r25	; 0x16
    120a:	af 8b       	std	Y+23, r26	; 0x17
    120c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    120e:	6d 89       	ldd	r22, Y+21	; 0x15
    1210:	7e 89       	ldd	r23, Y+22	; 0x16
    1212:	8f 89       	ldd	r24, Y+23	; 0x17
    1214:	98 8d       	ldd	r25, Y+24	; 0x18
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e8       	ldi	r20, 0x80	; 128
    121c:	5f e3       	ldi	r21, 0x3F	; 63
    121e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1222:	88 23       	and	r24, r24
    1224:	2c f4       	brge	.+10     	; 0x1230 <Renter_pass+0x25c>
		__ticks = 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9c 8b       	std	Y+20, r25	; 0x14
    122c:	8b 8b       	std	Y+19, r24	; 0x13
    122e:	3f c0       	rjmp	.+126    	; 0x12ae <Renter_pass+0x2da>
	else if (__tmp > 65535)
    1230:	6d 89       	ldd	r22, Y+21	; 0x15
    1232:	7e 89       	ldd	r23, Y+22	; 0x16
    1234:	8f 89       	ldd	r24, Y+23	; 0x17
    1236:	98 8d       	ldd	r25, Y+24	; 0x18
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	3f ef       	ldi	r19, 0xFF	; 255
    123c:	4f e7       	ldi	r20, 0x7F	; 127
    123e:	57 e4       	ldi	r21, 0x47	; 71
    1240:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1244:	18 16       	cp	r1, r24
    1246:	4c f5       	brge	.+82     	; 0x129a <Renter_pass+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1248:	69 8d       	ldd	r22, Y+25	; 0x19
    124a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    124c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    124e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e2       	ldi	r20, 0x20	; 32
    1256:	51 e4       	ldi	r21, 0x41	; 65
    1258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	bc 01       	movw	r22, r24
    1262:	cd 01       	movw	r24, r26
    1264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	9c 8b       	std	Y+20, r25	; 0x14
    126e:	8b 8b       	std	Y+19, r24	; 0x13
    1270:	0f c0       	rjmp	.+30     	; 0x1290 <Renter_pass+0x2bc>
    1272:	88 ec       	ldi	r24, 0xC8	; 200
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9a 8b       	std	Y+18, r25	; 0x12
    1278:	89 8b       	std	Y+17, r24	; 0x11
    127a:	89 89       	ldd	r24, Y+17	; 0x11
    127c:	9a 89       	ldd	r25, Y+18	; 0x12
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <Renter_pass+0x2aa>
    1282:	9a 8b       	std	Y+18, r25	; 0x12
    1284:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1286:	8b 89       	ldd	r24, Y+19	; 0x13
    1288:	9c 89       	ldd	r25, Y+20	; 0x14
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	9c 8b       	std	Y+20, r25	; 0x14
    128e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1290:	8b 89       	ldd	r24, Y+19	; 0x13
    1292:	9c 89       	ldd	r25, Y+20	; 0x14
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	69 f7       	brne	.-38     	; 0x1272 <Renter_pass+0x29e>
    1298:	14 c0       	rjmp	.+40     	; 0x12c2 <Renter_pass+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129a:	6d 89       	ldd	r22, Y+21	; 0x15
    129c:	7e 89       	ldd	r23, Y+22	; 0x16
    129e:	8f 89       	ldd	r24, Y+23	; 0x17
    12a0:	98 8d       	ldd	r25, Y+24	; 0x18
    12a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	9c 8b       	std	Y+20, r25	; 0x14
    12ac:	8b 8b       	std	Y+19, r24	; 0x13
    12ae:	8b 89       	ldd	r24, Y+19	; 0x13
    12b0:	9c 89       	ldd	r25, Y+20	; 0x14
    12b2:	98 8b       	std	Y+16, r25	; 0x10
    12b4:	8f 87       	std	Y+15, r24	; 0x0f
    12b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b8:	98 89       	ldd	r25, Y+16	; 0x10
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <Renter_pass+0x2e6>
    12be:	98 8b       	std	Y+16, r25	; 0x10
    12c0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			char buff[2];
			itoa(Pass_char,buff,10);
    12c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9e 01       	movw	r18, r28
    12ca:	24 5c       	subi	r18, 0xC4	; 196
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
    12ce:	b9 01       	movw	r22, r18
    12d0:	4a e0       	ldi	r20, 0x0A	; 10
    12d2:	50 e0       	ldi	r21, 0x00	; 0
    12d4:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <itoa>
			pass2[chars] = buff[0];
    12d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	8e ad       	ldd	r24, Y+62	; 0x3e
    12e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    12e2:	fc 01       	movw	r30, r24
    12e4:	e2 0f       	add	r30, r18
    12e6:	f3 1f       	adc	r31, r19
    12e8:	8c ad       	ldd	r24, Y+60	; 0x3c
    12ea:	80 83       	st	Z, r24
			LCD_moveCursor(1,chars+10);
    12ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    12ee:	98 2f       	mov	r25, r24
    12f0:	96 5f       	subi	r25, 0xF6	; 246
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	69 2f       	mov	r22, r25
    12f6:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <LCD_moveCursor>
			LCD_displayCharacter('*');
    12fa:	8a e2       	ldi	r24, 0x2A	; 42
    12fc:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <LCD_displayCharacter>
			chars++;
    1300:	8b ad       	ldd	r24, Y+59	; 0x3b
    1302:	8f 5f       	subi	r24, 0xFF	; 255
    1304:	8b af       	std	Y+59, r24	; 0x3b
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz re-Enter the");
	LCD_displayStringRowColumn(1,0,"same pass");
	char chars = 0;
	_delay_ms(100);
		while(chars<5){
    1306:	8b ad       	ldd	r24, Y+59	; 0x3b
    1308:	85 30       	cpi	r24, 0x05	; 5
    130a:	08 f4       	brcc	.+2      	; 0x130e <Renter_pass+0x33a>
    130c:	65 cf       	rjmp	.-310    	; 0x11d8 <Renter_pass+0x204>
			LCD_moveCursor(1,chars+10);
			LCD_displayCharacter('*');
			chars++;
		}

		pass2[chars]='\0';
    130e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	8e ad       	ldd	r24, Y+62	; 0x3e
    1316:	9f ad       	ldd	r25, Y+63	; 0x3f
    1318:	fc 01       	movw	r30, r24
    131a:	e2 0f       	add	r30, r18
    131c:	f3 1f       	adc	r31, r19
    131e:	10 82       	st	Z, r1
	   /* LCD_displayStringRowColumn(1,6,pass1);*/

		while(1){
			char end=KEYPAD_getPressedKey() == '=';
    1320:	0e 94 a5 13 	call	0x274a	; 0x274a <KEYPAD_getPressedKey>
    1324:	19 ae       	std	Y+57, r1	; 0x39
    1326:	8d 33       	cpi	r24, 0x3D	; 61
    1328:	11 f4       	brne	.+4      	; 0x132e <Renter_pass+0x35a>
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	89 af       	std	Y+57, r24	; 0x39
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a6 e1       	ldi	r26, 0x16	; 22
    1334:	b3 e4       	ldi	r27, 0x43	; 67
    1336:	8b 87       	std	Y+11, r24	; 0x0b
    1338:	9c 87       	std	Y+12, r25	; 0x0c
    133a:	ad 87       	std	Y+13, r26	; 0x0d
    133c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    133e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1340:	7c 85       	ldd	r23, Y+12	; 0x0c
    1342:	8d 85       	ldd	r24, Y+13	; 0x0d
    1344:	9e 85       	ldd	r25, Y+14	; 0x0e
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	4a ef       	ldi	r20, 0xFA	; 250
    134c:	54 e4       	ldi	r21, 0x44	; 68
    134e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	8f 83       	std	Y+7, r24	; 0x07
    1358:	98 87       	std	Y+8, r25	; 0x08
    135a:	a9 87       	std	Y+9, r26	; 0x09
    135c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    135e:	6f 81       	ldd	r22, Y+7	; 0x07
    1360:	78 85       	ldd	r23, Y+8	; 0x08
    1362:	89 85       	ldd	r24, Y+9	; 0x09
    1364:	9a 85       	ldd	r25, Y+10	; 0x0a
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e8       	ldi	r20, 0x80	; 128
    136c:	5f e3       	ldi	r21, 0x3F	; 63
    136e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1372:	88 23       	and	r24, r24
    1374:	2c f4       	brge	.+10     	; 0x1380 <Renter_pass+0x3ac>
		__ticks = 1;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	9e 83       	std	Y+6, r25	; 0x06
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	3f c0       	rjmp	.+126    	; 0x13fe <Renter_pass+0x42a>
	else if (__tmp > 65535)
    1380:	6f 81       	ldd	r22, Y+7	; 0x07
    1382:	78 85       	ldd	r23, Y+8	; 0x08
    1384:	89 85       	ldd	r24, Y+9	; 0x09
    1386:	9a 85       	ldd	r25, Y+10	; 0x0a
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	3f ef       	ldi	r19, 0xFF	; 255
    138c:	4f e7       	ldi	r20, 0x7F	; 127
    138e:	57 e4       	ldi	r21, 0x47	; 71
    1390:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1394:	18 16       	cp	r1, r24
    1396:	4c f5       	brge	.+82     	; 0x13ea <Renter_pass+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1398:	6b 85       	ldd	r22, Y+11	; 0x0b
    139a:	7c 85       	ldd	r23, Y+12	; 0x0c
    139c:	8d 85       	ldd	r24, Y+13	; 0x0d
    139e:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e2       	ldi	r20, 0x20	; 32
    13a6:	51 e4       	ldi	r21, 0x41	; 65
    13a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	bc 01       	movw	r22, r24
    13b2:	cd 01       	movw	r24, r26
    13b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	9e 83       	std	Y+6, r25	; 0x06
    13be:	8d 83       	std	Y+5, r24	; 0x05
    13c0:	0f c0       	rjmp	.+30     	; 0x13e0 <Renter_pass+0x40c>
    13c2:	88 ec       	ldi	r24, 0xC8	; 200
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9c 83       	std	Y+4, r25	; 0x04
    13c8:	8b 83       	std	Y+3, r24	; 0x03
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <Renter_pass+0x3fa>
    13d2:	9c 83       	std	Y+4, r25	; 0x04
    13d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	9e 83       	std	Y+6, r25	; 0x06
    13de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	69 f7       	brne	.-38     	; 0x13c2 <Renter_pass+0x3ee>
    13e8:	14 c0       	rjmp	.+40     	; 0x1412 <Renter_pass+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ea:	6f 81       	ldd	r22, Y+7	; 0x07
    13ec:	78 85       	ldd	r23, Y+8	; 0x08
    13ee:	89 85       	ldd	r24, Y+9	; 0x09
    13f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	9e 83       	std	Y+6, r25	; 0x06
    13fc:	8d 83       	std	Y+5, r24	; 0x05
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	9a 83       	std	Y+2, r25	; 0x02
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	f1 f7       	brne	.-4      	; 0x140a <Renter_pass+0x436>
    140e:	9a 83       	std	Y+2, r25	; 0x02
    1410:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(150);
			if(end)
    1412:	89 ad       	ldd	r24, Y+57	; 0x39
    1414:	88 23       	and	r24, r24
    1416:	09 f4       	brne	.+2      	; 0x141a <Renter_pass+0x446>
    1418:	83 cf       	rjmp	.-250    	; 0x1320 <Renter_pass+0x34c>
				break;
		}
		Verify(Pass_1,Pass_2);
    141a:	8e eb       	ldi	r24, 0xBE	; 190
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	24 ec       	ldi	r18, 0xC4	; 196
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	b9 01       	movw	r22, r18
    1424:	0e 94 1d 0a 	call	0x143a	; 0x143a <Verify>

}
    1428:	ef 96       	adiw	r28, 0x3f	; 63
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <Verify>:

void Verify(const unsigned char *pass1 , const unsigned char *pass2){
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	a1 97       	sbiw	r28, 0x21	; 33
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	9f 8f       	std	Y+31, r25	; 0x1f
    1450:	8e 8f       	std	Y+30, r24	; 0x1e
    1452:	79 a3       	std	Y+33, r23	; 0x21
    1454:	68 a3       	std	Y+32, r22	; 0x20
	char res = strcmpp(pass1,pass2);
    1456:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1458:	9f 8d       	ldd	r25, Y+31	; 0x1f
    145a:	28 a1       	ldd	r18, Y+32	; 0x20
    145c:	39 a1       	ldd	r19, Y+33	; 0x21
    145e:	b9 01       	movw	r22, r18
    1460:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <strcmpp>
    1464:	8d 8f       	std	Y+29, r24	; 0x1d
	if (res){
    1466:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1468:	88 23       	and	r24, r24
    146a:	09 f4       	brne	.+2      	; 0x146e <Verify+0x34>
    146c:	f2 c0       	rjmp	.+484    	; 0x1652 <Verify+0x218>
		LCD_clearScreen();
    146e:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_clearScreen>
		/*send to verify*/
		UART_sendByte(VERIFY);
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <UART_sendByte>
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	aa e7       	ldi	r26, 0x7A	; 122
    147e:	b3 e4       	ldi	r27, 0x43	; 67
    1480:	89 8f       	std	Y+25, r24	; 0x19
    1482:	9a 8f       	std	Y+26, r25	; 0x1a
    1484:	ab 8f       	std	Y+27, r26	; 0x1b
    1486:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1488:	69 8d       	ldd	r22, Y+25	; 0x19
    148a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    148c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    148e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	4a ef       	ldi	r20, 0xFA	; 250
    1496:	54 e4       	ldi	r21, 0x44	; 68
    1498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	8d 8b       	std	Y+21, r24	; 0x15
    14a2:	9e 8b       	std	Y+22, r25	; 0x16
    14a4:	af 8b       	std	Y+23, r26	; 0x17
    14a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14a8:	6d 89       	ldd	r22, Y+21	; 0x15
    14aa:	7e 89       	ldd	r23, Y+22	; 0x16
    14ac:	8f 89       	ldd	r24, Y+23	; 0x17
    14ae:	98 8d       	ldd	r25, Y+24	; 0x18
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e8       	ldi	r20, 0x80	; 128
    14b6:	5f e3       	ldi	r21, 0x3F	; 63
    14b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14bc:	88 23       	and	r24, r24
    14be:	2c f4       	brge	.+10     	; 0x14ca <Verify+0x90>
		__ticks = 1;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	9c 8b       	std	Y+20, r25	; 0x14
    14c6:	8b 8b       	std	Y+19, r24	; 0x13
    14c8:	3f c0       	rjmp	.+126    	; 0x1548 <Verify+0x10e>
	else if (__tmp > 65535)
    14ca:	6d 89       	ldd	r22, Y+21	; 0x15
    14cc:	7e 89       	ldd	r23, Y+22	; 0x16
    14ce:	8f 89       	ldd	r24, Y+23	; 0x17
    14d0:	98 8d       	ldd	r25, Y+24	; 0x18
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	3f ef       	ldi	r19, 0xFF	; 255
    14d6:	4f e7       	ldi	r20, 0x7F	; 127
    14d8:	57 e4       	ldi	r21, 0x47	; 71
    14da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14de:	18 16       	cp	r1, r24
    14e0:	4c f5       	brge	.+82     	; 0x1534 <Verify+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e2:	69 8d       	ldd	r22, Y+25	; 0x19
    14e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e2       	ldi	r20, 0x20	; 32
    14f0:	51 e4       	ldi	r21, 0x41	; 65
    14f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	bc 01       	movw	r22, r24
    14fc:	cd 01       	movw	r24, r26
    14fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	9c 8b       	std	Y+20, r25	; 0x14
    1508:	8b 8b       	std	Y+19, r24	; 0x13
    150a:	0f c0       	rjmp	.+30     	; 0x152a <Verify+0xf0>
    150c:	88 ec       	ldi	r24, 0xC8	; 200
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	9a 8b       	std	Y+18, r25	; 0x12
    1512:	89 8b       	std	Y+17, r24	; 0x11
    1514:	89 89       	ldd	r24, Y+17	; 0x11
    1516:	9a 89       	ldd	r25, Y+18	; 0x12
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <Verify+0xde>
    151c:	9a 8b       	std	Y+18, r25	; 0x12
    151e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1520:	8b 89       	ldd	r24, Y+19	; 0x13
    1522:	9c 89       	ldd	r25, Y+20	; 0x14
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	9c 8b       	std	Y+20, r25	; 0x14
    1528:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152a:	8b 89       	ldd	r24, Y+19	; 0x13
    152c:	9c 89       	ldd	r25, Y+20	; 0x14
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	69 f7       	brne	.-38     	; 0x150c <Verify+0xd2>
    1532:	14 c0       	rjmp	.+40     	; 0x155c <Verify+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1534:	6d 89       	ldd	r22, Y+21	; 0x15
    1536:	7e 89       	ldd	r23, Y+22	; 0x16
    1538:	8f 89       	ldd	r24, Y+23	; 0x17
    153a:	98 8d       	ldd	r25, Y+24	; 0x18
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	9c 8b       	std	Y+20, r25	; 0x14
    1546:	8b 8b       	std	Y+19, r24	; 0x13
    1548:	8b 89       	ldd	r24, Y+19	; 0x13
    154a:	9c 89       	ldd	r25, Y+20	; 0x14
    154c:	98 8b       	std	Y+16, r25	; 0x10
    154e:	8f 87       	std	Y+15, r24	; 0x0f
    1550:	8f 85       	ldd	r24, Y+15	; 0x0f
    1552:	98 89       	ldd	r25, Y+16	; 0x10
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <Verify+0x11a>
    1558:	98 8b       	std	Y+16, r25	; 0x10
    155a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		UART_sendString(pass1);
    155c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    155e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1560:	0e 94 1f 1c 	call	0x383e	; 0x383e <UART_sendString>
		LCD_clearScreen();
    1564:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_clearScreen>
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	a8 e4       	ldi	r26, 0x48	; 72
    156e:	b3 e4       	ldi	r27, 0x43	; 67
    1570:	8b 87       	std	Y+11, r24	; 0x0b
    1572:	9c 87       	std	Y+12, r25	; 0x0c
    1574:	ad 87       	std	Y+13, r26	; 0x0d
    1576:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1578:	6b 85       	ldd	r22, Y+11	; 0x0b
    157a:	7c 85       	ldd	r23, Y+12	; 0x0c
    157c:	8d 85       	ldd	r24, Y+13	; 0x0d
    157e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	4a ef       	ldi	r20, 0xFA	; 250
    1586:	54 e4       	ldi	r21, 0x44	; 68
    1588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	8f 83       	std	Y+7, r24	; 0x07
    1592:	98 87       	std	Y+8, r25	; 0x08
    1594:	a9 87       	std	Y+9, r26	; 0x09
    1596:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1598:	6f 81       	ldd	r22, Y+7	; 0x07
    159a:	78 85       	ldd	r23, Y+8	; 0x08
    159c:	89 85       	ldd	r24, Y+9	; 0x09
    159e:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e8       	ldi	r20, 0x80	; 128
    15a6:	5f e3       	ldi	r21, 0x3F	; 63
    15a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ac:	88 23       	and	r24, r24
    15ae:	2c f4       	brge	.+10     	; 0x15ba <Verify+0x180>
		__ticks = 1;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
    15b8:	3f c0       	rjmp	.+126    	; 0x1638 <Verify+0x1fe>
	else if (__tmp > 65535)
    15ba:	6f 81       	ldd	r22, Y+7	; 0x07
    15bc:	78 85       	ldd	r23, Y+8	; 0x08
    15be:	89 85       	ldd	r24, Y+9	; 0x09
    15c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	3f ef       	ldi	r19, 0xFF	; 255
    15c6:	4f e7       	ldi	r20, 0x7F	; 127
    15c8:	57 e4       	ldi	r21, 0x47	; 71
    15ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ce:	18 16       	cp	r1, r24
    15d0:	4c f5       	brge	.+82     	; 0x1624 <Verify+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e2       	ldi	r20, 0x20	; 32
    15e0:	51 e4       	ldi	r21, 0x41	; 65
    15e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	bc 01       	movw	r22, r24
    15ec:	cd 01       	movw	r24, r26
    15ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	9e 83       	std	Y+6, r25	; 0x06
    15f8:	8d 83       	std	Y+5, r24	; 0x05
    15fa:	0f c0       	rjmp	.+30     	; 0x161a <Verify+0x1e0>
    15fc:	88 ec       	ldi	r24, 0xC8	; 200
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9c 83       	std	Y+4, r25	; 0x04
    1602:	8b 83       	std	Y+3, r24	; 0x03
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <Verify+0x1ce>
    160c:	9c 83       	std	Y+4, r25	; 0x04
    160e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	69 f7       	brne	.-38     	; 0x15fc <Verify+0x1c2>
    1622:	14 c0       	rjmp	.+40     	; 0x164c <Verify+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1624:	6f 81       	ldd	r22, Y+7	; 0x07
    1626:	78 85       	ldd	r23, Y+8	; 0x08
    1628:	89 85       	ldd	r24, Y+9	; 0x09
    162a:	9a 85       	ldd	r25, Y+10	; 0x0a
    162c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	9e 83       	std	Y+6, r25	; 0x06
    1636:	8d 83       	std	Y+5, r24	; 0x05
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	9a 83       	std	Y+2, r25	; 0x02
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <Verify+0x20a>
    1648:	9a 83       	std	Y+2, r25	; 0x02
    164a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		Main_opt();
    164c:	0e 94 36 0b 	call	0x166c	; 0x166c <Main_opt>
    1650:	04 c0       	rjmp	.+8      	; 0x165a <Verify+0x220>
	}
	else{
		Enter_pass(Pass_1);
    1652:	8e eb       	ldi	r24, 0xBE	; 190
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 c4 05 	call	0xb88	; 0xb88 <Enter_pass>
	}
}
    165a:	a1 96       	adiw	r28, 0x21	; 33
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <Main_opt>:

void Main_opt(){
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	ad 97       	sbiw	r28, 0x2d	; 45
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a8 e4       	ldi	r26, 0x48	; 72
    1686:	b3 e4       	ldi	r27, 0x43	; 67
    1688:	8f a3       	std	Y+39, r24	; 0x27
    168a:	98 a7       	std	Y+40, r25	; 0x28
    168c:	a9 a7       	std	Y+41, r26	; 0x29
    168e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1690:	6f a1       	ldd	r22, Y+39	; 0x27
    1692:	78 a5       	ldd	r23, Y+40	; 0x28
    1694:	89 a5       	ldd	r24, Y+41	; 0x29
    1696:	9a a5       	ldd	r25, Y+42	; 0x2a
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4a ef       	ldi	r20, 0xFA	; 250
    169e:	54 e4       	ldi	r21, 0x44	; 68
    16a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	8b a3       	std	Y+35, r24	; 0x23
    16aa:	9c a3       	std	Y+36, r25	; 0x24
    16ac:	ad a3       	std	Y+37, r26	; 0x25
    16ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16b0:	6b a1       	ldd	r22, Y+35	; 0x23
    16b2:	7c a1       	ldd	r23, Y+36	; 0x24
    16b4:	8d a1       	ldd	r24, Y+37	; 0x25
    16b6:	9e a1       	ldd	r25, Y+38	; 0x26
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <Main_opt+0x66>
		__ticks = 1;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9a a3       	std	Y+34, r25	; 0x22
    16ce:	89 a3       	std	Y+33, r24	; 0x21
    16d0:	3f c0       	rjmp	.+126    	; 0x1750 <Main_opt+0xe4>
	else if (__tmp > 65535)
    16d2:	6b a1       	ldd	r22, Y+35	; 0x23
    16d4:	7c a1       	ldd	r23, Y+36	; 0x24
    16d6:	8d a1       	ldd	r24, Y+37	; 0x25
    16d8:	9e a1       	ldd	r25, Y+38	; 0x26
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	4f e7       	ldi	r20, 0x7F	; 127
    16e0:	57 e4       	ldi	r21, 0x47	; 71
    16e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	4c f5       	brge	.+82     	; 0x173c <Main_opt+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ea:	6f a1       	ldd	r22, Y+39	; 0x27
    16ec:	78 a5       	ldd	r23, Y+40	; 0x28
    16ee:	89 a5       	ldd	r24, Y+41	; 0x29
    16f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e2       	ldi	r20, 0x20	; 32
    16f8:	51 e4       	ldi	r21, 0x41	; 65
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	9a a3       	std	Y+34, r25	; 0x22
    1710:	89 a3       	std	Y+33, r24	; 0x21
    1712:	0f c0       	rjmp	.+30     	; 0x1732 <Main_opt+0xc6>
    1714:	88 ec       	ldi	r24, 0xC8	; 200
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	98 a3       	std	Y+32, r25	; 0x20
    171a:	8f 8f       	std	Y+31, r24	; 0x1f
    171c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    171e:	98 a1       	ldd	r25, Y+32	; 0x20
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <Main_opt+0xb4>
    1724:	98 a3       	std	Y+32, r25	; 0x20
    1726:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1728:	89 a1       	ldd	r24, Y+33	; 0x21
    172a:	9a a1       	ldd	r25, Y+34	; 0x22
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	9a a3       	std	Y+34, r25	; 0x22
    1730:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1732:	89 a1       	ldd	r24, Y+33	; 0x21
    1734:	9a a1       	ldd	r25, Y+34	; 0x22
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	69 f7       	brne	.-38     	; 0x1714 <Main_opt+0xa8>
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <Main_opt+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173c:	6b a1       	ldd	r22, Y+35	; 0x23
    173e:	7c a1       	ldd	r23, Y+36	; 0x24
    1740:	8d a1       	ldd	r24, Y+37	; 0x25
    1742:	9e a1       	ldd	r25, Y+38	; 0x26
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	9a a3       	std	Y+34, r25	; 0x22
    174e:	89 a3       	std	Y+33, r24	; 0x21
    1750:	89 a1       	ldd	r24, Y+33	; 0x21
    1752:	9a a1       	ldd	r25, Y+34	; 0x22
    1754:	9e 8f       	std	Y+30, r25	; 0x1e
    1756:	8d 8f       	std	Y+29, r24	; 0x1d
    1758:	8d 8d       	ldd	r24, Y+29	; 0x1d
    175a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <Main_opt+0xf0>
    1760:	9e 8f       	std	Y+30, r25	; 0x1e
    1762:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	LCD_displayStringRowColumn(0,0,"+ : Open Door");
    1764:	2a e8       	ldi	r18, 0x8A	; 138
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	a9 01       	movw	r20, r18
    176e:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
    1772:	28 e9       	ldi	r18, 0x98	; 152
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	a9 01       	movw	r20, r18
    177c:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_displayStringRowColumn>
	while (1){
		char opt = KEYPAD_getPressedKey();
    1780:	0e 94 a5 13 	call	0x274a	; 0x274a <KEYPAD_getPressedKey>
    1784:	8d a7       	std	Y+45, r24	; 0x2d
		if (opt == '+'){
    1786:	8d a5       	ldd	r24, Y+45	; 0x2d
    1788:	8b 32       	cpi	r24, 0x2B	; 43
    178a:	09 f0       	breq	.+2      	; 0x178e <Main_opt+0x122>
    178c:	b8 c0       	rjmp	.+368    	; 0x18fe <Main_opt+0x292>
			char matched = Auth();
    178e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <Auth>
    1792:	8c a7       	std	Y+44, r24	; 0x2c
			LCD_displayStringRowColumn(0,0,"         ");
    1794:	28 ea       	ldi	r18, 0xA8	; 168
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	a9 01       	movw	r20, r18
    179e:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_displayStringRowColumn>
			if (matched)
    17a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    17a4:	88 23       	and	r24, r24
    17a6:	19 f0       	breq	.+6      	; 0x17ae <Main_opt+0x142>
				LCD_displayCharacter('1');
    17a8:	81 e3       	ldi	r24, 0x31	; 49
    17aa:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <LCD_displayCharacter>
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e4       	ldi	r25, 0x40	; 64
    17b2:	a3 e8       	ldi	r26, 0x83	; 131
    17b4:	b4 e4       	ldi	r27, 0x44	; 68
    17b6:	89 8f       	std	Y+25, r24	; 0x19
    17b8:	9a 8f       	std	Y+26, r25	; 0x1a
    17ba:	ab 8f       	std	Y+27, r26	; 0x1b
    17bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17be:	69 8d       	ldd	r22, Y+25	; 0x19
    17c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4a ef       	ldi	r20, 0xFA	; 250
    17cc:	54 e4       	ldi	r21, 0x44	; 68
    17ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	8d 8b       	std	Y+21, r24	; 0x15
    17d8:	9e 8b       	std	Y+22, r25	; 0x16
    17da:	af 8b       	std	Y+23, r26	; 0x17
    17dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17de:	6d 89       	ldd	r22, Y+21	; 0x15
    17e0:	7e 89       	ldd	r23, Y+22	; 0x16
    17e2:	8f 89       	ldd	r24, Y+23	; 0x17
    17e4:	98 8d       	ldd	r25, Y+24	; 0x18
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f e3       	ldi	r21, 0x3F	; 63
    17ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17f2:	88 23       	and	r24, r24
    17f4:	2c f4       	brge	.+10     	; 0x1800 <Main_opt+0x194>
		__ticks = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9c 8b       	std	Y+20, r25	; 0x14
    17fc:	8b 8b       	std	Y+19, r24	; 0x13
    17fe:	3f c0       	rjmp	.+126    	; 0x187e <Main_opt+0x212>
	else if (__tmp > 65535)
    1800:	6d 89       	ldd	r22, Y+21	; 0x15
    1802:	7e 89       	ldd	r23, Y+22	; 0x16
    1804:	8f 89       	ldd	r24, Y+23	; 0x17
    1806:	98 8d       	ldd	r25, Y+24	; 0x18
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	3f ef       	ldi	r19, 0xFF	; 255
    180c:	4f e7       	ldi	r20, 0x7F	; 127
    180e:	57 e4       	ldi	r21, 0x47	; 71
    1810:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1814:	18 16       	cp	r1, r24
    1816:	4c f5       	brge	.+82     	; 0x186a <Main_opt+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	69 8d       	ldd	r22, Y+25	; 0x19
    181a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    181c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    181e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	8b 8b       	std	Y+19, r24	; 0x13
    1840:	0f c0       	rjmp	.+30     	; 0x1860 <Main_opt+0x1f4>
    1842:	88 ec       	ldi	r24, 0xC8	; 200
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	9a 8b       	std	Y+18, r25	; 0x12
    1848:	89 8b       	std	Y+17, r24	; 0x11
    184a:	89 89       	ldd	r24, Y+17	; 0x11
    184c:	9a 89       	ldd	r25, Y+18	; 0x12
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <Main_opt+0x1e2>
    1852:	9a 8b       	std	Y+18, r25	; 0x12
    1854:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1856:	8b 89       	ldd	r24, Y+19	; 0x13
    1858:	9c 89       	ldd	r25, Y+20	; 0x14
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	9c 8b       	std	Y+20, r25	; 0x14
    185e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1860:	8b 89       	ldd	r24, Y+19	; 0x13
    1862:	9c 89       	ldd	r25, Y+20	; 0x14
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	69 f7       	brne	.-38     	; 0x1842 <Main_opt+0x1d6>
    1868:	14 c0       	rjmp	.+40     	; 0x1892 <Main_opt+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	6d 89       	ldd	r22, Y+21	; 0x15
    186c:	7e 89       	ldd	r23, Y+22	; 0x16
    186e:	8f 89       	ldd	r24, Y+23	; 0x17
    1870:	98 8d       	ldd	r25, Y+24	; 0x18
    1872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9c 8b       	std	Y+20, r25	; 0x14
    187c:	8b 8b       	std	Y+19, r24	; 0x13
    187e:	8b 89       	ldd	r24, Y+19	; 0x13
    1880:	9c 89       	ldd	r25, Y+20	; 0x14
    1882:	98 8b       	std	Y+16, r25	; 0x10
    1884:	8f 87       	std	Y+15, r24	; 0x0f
    1886:	8f 85       	ldd	r24, Y+15	; 0x0f
    1888:	98 89       	ldd	r25, Y+16	; 0x10
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <Main_opt+0x21e>
    188e:	98 8b       	std	Y+16, r25	; 0x10
    1890:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1050);
			if (matched){
    1892:	8c a5       	ldd	r24, Y+44	; 0x2c
    1894:	88 23       	and	r24, r24
    1896:	19 f1       	breq	.+70     	; 0x18de <Main_opt+0x272>
				trials = 0;
    1898:	10 92 ba 00 	sts	0x00BA, r1
				UART_sendByte(MOTOR);
    189c:	83 e0       	ldi	r24, 0x03	; 3
    189e:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <UART_sendByte>
				Timer1_init(&Timer_config);
    18a2:	8a ec       	ldi	r24, 0xCA	; 202
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 ca 1a 	call	0x3594	; 0x3594 <Timer1_init>
				Timer1_setCallBack(timer_increment);
    18aa:	86 e4       	ldi	r24, 0x46	; 70
    18ac:	9f e0       	ldi	r25, 0x0F	; 15
    18ae:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <Timer1_setCallBack>
				LCD_clearScreen();
    18b2:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_clearScreen>
    18b6:	0a c0       	rjmp	.+20     	; 0x18cc <Main_opt+0x260>
				while(seconds<15){
					//char second = buff[0];
					LCD_moveCursor(0,0);
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <LCD_moveCursor>
					LCD_intgerToString(seconds);
    18c0:	80 91 bb 00 	lds	r24, 0x00BB
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 37 1a 	call	0x346e	; 0x346e <LCD_intgerToString>
				trials = 0;
				UART_sendByte(MOTOR);
				Timer1_init(&Timer_config);
				Timer1_setCallBack(timer_increment);
				LCD_clearScreen();
				while(seconds<15){
    18cc:	80 91 bb 00 	lds	r24, 0x00BB
    18d0:	8f 30       	cpi	r24, 0x0F	; 15
    18d2:	90 f3       	brcs	.-28     	; 0x18b8 <Main_opt+0x24c>
					//char second = buff[0];
					LCD_moveCursor(0,0);
					LCD_intgerToString(seconds);

				}
				Timer1_deInit();
    18d4:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <Timer1_deInit>
				seconds=0;
    18d8:	10 92 bb 00 	sts	0x00BB, r1
    18dc:	51 cf       	rjmp	.-350    	; 0x1780 <Main_opt+0x114>

				}*/

			}
			else{
				trials++;
    18de:	80 91 ba 00 	lds	r24, 0x00BA
    18e2:	8f 5f       	subi	r24, 0xFF	; 255
    18e4:	80 93 ba 00 	sts	0x00BA, r24
				if (trials ==3){
    18e8:	80 91 ba 00 	lds	r24, 0x00BA
    18ec:	83 30       	cpi	r24, 0x03	; 3
    18ee:	21 f4       	brne	.+8      	; 0x18f8 <Main_opt+0x28c>
					//send to open buzzer
					UART_sendByte(BUZZER_ON);
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <UART_sendByte>
    18f6:	44 cf       	rjmp	.-376    	; 0x1780 <Main_opt+0x114>
				}
				else {
					Main_opt();
    18f8:	0e 94 36 0b 	call	0x166c	; 0x166c <Main_opt>
    18fc:	41 cf       	rjmp	.-382    	; 0x1780 <Main_opt+0x114>
				}
			}
		}

		else if (opt == '-'){
    18fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1900:	8d 32       	cpi	r24, 0x2D	; 45
    1902:	09 f0       	breq	.+2      	; 0x1906 <Main_opt+0x29a>
    1904:	3d cf       	rjmp	.-390    	; 0x1780 <Main_opt+0x114>

			char matched = Auth();
    1906:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <Auth>
    190a:	8b a7       	std	Y+43, r24	; 0x2b
			LCD_displayStringRowColumn(0,0,"         ");
    190c:	28 ea       	ldi	r18, 0xA8	; 168
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	a9 01       	movw	r20, r18
    1916:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_displayStringRowColumn>
			if (matched)
    191a:	8b a5       	ldd	r24, Y+43	; 0x2b
    191c:	88 23       	and	r24, r24
    191e:	19 f0       	breq	.+6      	; 0x1926 <Main_opt+0x2ba>
			LCD_displayCharacter('1');
    1920:	81 e3       	ldi	r24, 0x31	; 49
    1922:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <LCD_displayCharacter>
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e4       	ldi	r25, 0x40	; 64
    192a:	a3 e8       	ldi	r26, 0x83	; 131
    192c:	b4 e4       	ldi	r27, 0x44	; 68
    192e:	8b 87       	std	Y+11, r24	; 0x0b
    1930:	9c 87       	std	Y+12, r25	; 0x0c
    1932:	ad 87       	std	Y+13, r26	; 0x0d
    1934:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1936:	6b 85       	ldd	r22, Y+11	; 0x0b
    1938:	7c 85       	ldd	r23, Y+12	; 0x0c
    193a:	8d 85       	ldd	r24, Y+13	; 0x0d
    193c:	9e 85       	ldd	r25, Y+14	; 0x0e
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	4a ef       	ldi	r20, 0xFA	; 250
    1944:	54 e4       	ldi	r21, 0x44	; 68
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	8f 83       	std	Y+7, r24	; 0x07
    1950:	98 87       	std	Y+8, r25	; 0x08
    1952:	a9 87       	std	Y+9, r26	; 0x09
    1954:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1956:	6f 81       	ldd	r22, Y+7	; 0x07
    1958:	78 85       	ldd	r23, Y+8	; 0x08
    195a:	89 85       	ldd	r24, Y+9	; 0x09
    195c:	9a 85       	ldd	r25, Y+10	; 0x0a
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
    1966:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    196a:	88 23       	and	r24, r24
    196c:	2c f4       	brge	.+10     	; 0x1978 <Main_opt+0x30c>
		__ticks = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9e 83       	std	Y+6, r25	; 0x06
    1974:	8d 83       	std	Y+5, r24	; 0x05
    1976:	3f c0       	rjmp	.+126    	; 0x19f6 <Main_opt+0x38a>
	else if (__tmp > 65535)
    1978:	6f 81       	ldd	r22, Y+7	; 0x07
    197a:	78 85       	ldd	r23, Y+8	; 0x08
    197c:	89 85       	ldd	r24, Y+9	; 0x09
    197e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	3f ef       	ldi	r19, 0xFF	; 255
    1984:	4f e7       	ldi	r20, 0x7F	; 127
    1986:	57 e4       	ldi	r21, 0x47	; 71
    1988:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    198c:	18 16       	cp	r1, r24
    198e:	4c f5       	brge	.+82     	; 0x19e2 <Main_opt+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1990:	6b 85       	ldd	r22, Y+11	; 0x0b
    1992:	7c 85       	ldd	r23, Y+12	; 0x0c
    1994:	8d 85       	ldd	r24, Y+13	; 0x0d
    1996:	9e 85       	ldd	r25, Y+14	; 0x0e
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e2       	ldi	r20, 0x20	; 32
    199e:	51 e4       	ldi	r21, 0x41	; 65
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <Main_opt+0x36c>
    19ba:	88 ec       	ldi	r24, 0xC8	; 200
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	9c 83       	std	Y+4, r25	; 0x04
    19c0:	8b 83       	std	Y+3, r24	; 0x03
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <Main_opt+0x35a>
    19ca:	9c 83       	std	Y+4, r25	; 0x04
    19cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ce:	8d 81       	ldd	r24, Y+5	; 0x05
    19d0:	9e 81       	ldd	r25, Y+6	; 0x06
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	69 f7       	brne	.-38     	; 0x19ba <Main_opt+0x34e>
    19e0:	14 c0       	rjmp	.+40     	; 0x1a0a <Main_opt+0x39e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e2:	6f 81       	ldd	r22, Y+7	; 0x07
    19e4:	78 85       	ldd	r23, Y+8	; 0x08
    19e6:	89 85       	ldd	r24, Y+9	; 0x09
    19e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9e 83       	std	Y+6, r25	; 0x06
    19f4:	8d 83       	std	Y+5, r24	; 0x05
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <Main_opt+0x396>
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1050);
			if (matched){
    1a0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a0c:	88 23       	and	r24, r24
    1a0e:	39 f0       	breq	.+14     	; 0x1a1e <Main_opt+0x3b2>
				trials = 0;
    1a10:	10 92 ba 00 	sts	0x00BA, r1
				Enter_pass(Pass_1);
    1a14:	8e eb       	ldi	r24, 0xBE	; 190
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 c4 05 	call	0xb88	; 0xb88 <Enter_pass>
    1a1c:	b1 ce       	rjmp	.-670    	; 0x1780 <Main_opt+0x114>
			}
			else{
				trials++;
    1a1e:	80 91 ba 00 	lds	r24, 0x00BA
    1a22:	8f 5f       	subi	r24, 0xFF	; 255
    1a24:	80 93 ba 00 	sts	0x00BA, r24
				if (trials ==3){
    1a28:	80 91 ba 00 	lds	r24, 0x00BA
    1a2c:	83 30       	cpi	r24, 0x03	; 3
    1a2e:	21 f4       	brne	.+8      	; 0x1a38 <Main_opt+0x3cc>
					//send to open buzzer

					UART_sendByte(BUZZER_ON);
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <UART_sendByte>
    1a36:	a4 ce       	rjmp	.-696    	; 0x1780 <Main_opt+0x114>
				}
				else {
					Main_opt();
    1a38:	0e 94 36 0b 	call	0x166c	; 0x166c <Main_opt>
    1a3c:	a1 ce       	rjmp	.-702    	; 0x1780 <Main_opt+0x114>

00001a3e <Auth>:
		}

	}
}

char Auth(void){
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	ee 97       	sbiw	r28, 0x3e	; 62
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
		LCD_clearScreen();
    1a52:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Plz Enter Pass");
    1a56:	20 e6       	ldi	r18, 0x60	; 96
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	60 e0       	ldi	r22, 0x00	; 0
    1a5e:	a9 01       	movw	r20, r18
    1a60:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_displayStringRowColumn>
		char chars = 0;
    1a64:	1c ae       	std	Y+60, r1	; 0x3c
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a8 ec       	ldi	r26, 0xC8	; 200
    1a6c:	b2 e4       	ldi	r27, 0x42	; 66
    1a6e:	8d ab       	std	Y+53, r24	; 0x35
    1a70:	9e ab       	std	Y+54, r25	; 0x36
    1a72:	af ab       	std	Y+55, r26	; 0x37
    1a74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	6d a9       	ldd	r22, Y+53	; 0x35
    1a78:	7e a9       	ldd	r23, Y+54	; 0x36
    1a7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4a ef       	ldi	r20, 0xFA	; 250
    1a84:	54 e4       	ldi	r21, 0x44	; 68
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	89 ab       	std	Y+49, r24	; 0x31
    1a90:	9a ab       	std	Y+50, r25	; 0x32
    1a92:	ab ab       	std	Y+51, r26	; 0x33
    1a94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a96:	69 a9       	ldd	r22, Y+49	; 0x31
    1a98:	7a a9       	ldd	r23, Y+50	; 0x32
    1a9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <Auth+0x7a>
		__ticks = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	98 ab       	std	Y+48, r25	; 0x30
    1ab4:	8f a7       	std	Y+47, r24	; 0x2f
    1ab6:	3f c0       	rjmp	.+126    	; 0x1b36 <Auth+0xf8>
	else if (__tmp > 65535)
    1ab8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aba:	7a a9       	ldd	r23, Y+50	; 0x32
    1abc:	8b a9       	ldd	r24, Y+51	; 0x33
    1abe:	9c a9       	ldd	r25, Y+52	; 0x34
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	4f e7       	ldi	r20, 0x7F	; 127
    1ac6:	57 e4       	ldi	r21, 0x47	; 71
    1ac8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1acc:	18 16       	cp	r1, r24
    1ace:	4c f5       	brge	.+82     	; 0x1b22 <Auth+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ad2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ad4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ad6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	98 ab       	std	Y+48, r25	; 0x30
    1af6:	8f a7       	std	Y+47, r24	; 0x2f
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <Auth+0xda>
    1afa:	88 ec       	ldi	r24, 0xC8	; 200
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9e a7       	std	Y+46, r25	; 0x2e
    1b00:	8d a7       	std	Y+45, r24	; 0x2d
    1b02:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b04:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <Auth+0xc8>
    1b0a:	9e a7       	std	Y+46, r25	; 0x2e
    1b0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b10:	98 a9       	ldd	r25, Y+48	; 0x30
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	98 ab       	std	Y+48, r25	; 0x30
    1b16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <Auth+0xbc>
    1b20:	a7 c0       	rjmp	.+334    	; 0x1c70 <Auth+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b22:	69 a9       	ldd	r22, Y+49	; 0x31
    1b24:	7a a9       	ldd	r23, Y+50	; 0x32
    1b26:	8b a9       	ldd	r24, Y+51	; 0x33
    1b28:	9c a9       	ldd	r25, Y+52	; 0x34
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	98 ab       	std	Y+48, r25	; 0x30
    1b34:	8f a7       	std	Y+47, r24	; 0x2f
    1b36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b38:	98 a9       	ldd	r25, Y+48	; 0x30
    1b3a:	9c a7       	std	Y+44, r25	; 0x2c
    1b3c:	8b a7       	std	Y+43, r24	; 0x2b
    1b3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b40:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <Auth+0x104>
    1b46:	9c a7       	std	Y+44, r25	; 0x2c
    1b48:	8b a7       	std	Y+43, r24	; 0x2b
    1b4a:	92 c0       	rjmp	.+292    	; 0x1c70 <Auth+0x232>
		_delay_ms(100);
		while(chars<5){
			char Pass_char=KEYPAD_getPressedKey();
    1b4c:	0e 94 a5 13 	call	0x274a	; 0x274a <KEYPAD_getPressedKey>
    1b50:	8a af       	std	Y+58, r24	; 0x3a
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a6 e1       	ldi	r26, 0x16	; 22
    1b58:	b3 e4       	ldi	r27, 0x43	; 67
    1b5a:	8f a3       	std	Y+39, r24	; 0x27
    1b5c:	98 a7       	std	Y+40, r25	; 0x28
    1b5e:	a9 a7       	std	Y+41, r26	; 0x29
    1b60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b62:	6f a1       	ldd	r22, Y+39	; 0x27
    1b64:	78 a5       	ldd	r23, Y+40	; 0x28
    1b66:	89 a5       	ldd	r24, Y+41	; 0x29
    1b68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a ef       	ldi	r20, 0xFA	; 250
    1b70:	54 e4       	ldi	r21, 0x44	; 68
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	8b a3       	std	Y+35, r24	; 0x23
    1b7c:	9c a3       	std	Y+36, r25	; 0x24
    1b7e:	ad a3       	std	Y+37, r26	; 0x25
    1b80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b82:	6b a1       	ldd	r22, Y+35	; 0x23
    1b84:	7c a1       	ldd	r23, Y+36	; 0x24
    1b86:	8d a1       	ldd	r24, Y+37	; 0x25
    1b88:	9e a1       	ldd	r25, Y+38	; 0x26
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	2c f4       	brge	.+10     	; 0x1ba4 <Auth+0x166>
		__ticks = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9a a3       	std	Y+34, r25	; 0x22
    1ba0:	89 a3       	std	Y+33, r24	; 0x21
    1ba2:	3f c0       	rjmp	.+126    	; 0x1c22 <Auth+0x1e4>
	else if (__tmp > 65535)
    1ba4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba8:	8d a1       	ldd	r24, Y+37	; 0x25
    1baa:	9e a1       	ldd	r25, Y+38	; 0x26
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	3f ef       	ldi	r19, 0xFF	; 255
    1bb0:	4f e7       	ldi	r20, 0x7F	; 127
    1bb2:	57 e4       	ldi	r21, 0x47	; 71
    1bb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	4c f5       	brge	.+82     	; 0x1c0e <Auth+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbc:	6f a1       	ldd	r22, Y+39	; 0x27
    1bbe:	78 a5       	ldd	r23, Y+40	; 0x28
    1bc0:	89 a5       	ldd	r24, Y+41	; 0x29
    1bc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e2       	ldi	r20, 0x20	; 32
    1bca:	51 e4       	ldi	r21, 0x41	; 65
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	cd 01       	movw	r24, r26
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9a a3       	std	Y+34, r25	; 0x22
    1be2:	89 a3       	std	Y+33, r24	; 0x21
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <Auth+0x1c6>
    1be6:	88 ec       	ldi	r24, 0xC8	; 200
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	98 a3       	std	Y+32, r25	; 0x20
    1bec:	8f 8f       	std	Y+31, r24	; 0x1f
    1bee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bf0:	98 a1       	ldd	r25, Y+32	; 0x20
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <Auth+0x1b4>
    1bf6:	98 a3       	std	Y+32, r25	; 0x20
    1bf8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	89 a1       	ldd	r24, Y+33	; 0x21
    1bfc:	9a a1       	ldd	r25, Y+34	; 0x22
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	9a a3       	std	Y+34, r25	; 0x22
    1c02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	89 a1       	ldd	r24, Y+33	; 0x21
    1c06:	9a a1       	ldd	r25, Y+34	; 0x22
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	69 f7       	brne	.-38     	; 0x1be6 <Auth+0x1a8>
    1c0c:	14 c0       	rjmp	.+40     	; 0x1c36 <Auth+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c10:	7c a1       	ldd	r23, Y+36	; 0x24
    1c12:	8d a1       	ldd	r24, Y+37	; 0x25
    1c14:	9e a1       	ldd	r25, Y+38	; 0x26
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9a a3       	std	Y+34, r25	; 0x22
    1c20:	89 a3       	std	Y+33, r24	; 0x21
    1c22:	89 a1       	ldd	r24, Y+33	; 0x21
    1c24:	9a a1       	ldd	r25, Y+34	; 0x22
    1c26:	9e 8f       	std	Y+30, r25	; 0x1e
    1c28:	8d 8f       	std	Y+29, r24	; 0x1d
    1c2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <Auth+0x1f0>
    1c32:	9e 8f       	std	Y+30, r25	; 0x1e
    1c34:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(150);
			char buff[2];
			itoa(Pass_char,buff,10);
    1c36:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c38:	88 2f       	mov	r24, r24
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9e 01       	movw	r18, r28
    1c3e:	23 5c       	subi	r18, 0xC3	; 195
    1c40:	3f 4f       	sbci	r19, 0xFF	; 255
    1c42:	b9 01       	movw	r22, r18
    1c44:	4a e0       	ldi	r20, 0x0A	; 10
    1c46:	50 e0       	ldi	r21, 0x00	; 0
    1c48:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <itoa>
			check_pass[chars] = buff[0];
    1c4c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c4e:	88 2f       	mov	r24, r24
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	2d ad       	ldd	r18, Y+61	; 0x3d
    1c54:	fc 01       	movw	r30, r24
    1c56:	ea 52       	subi	r30, 0x2A	; 42
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	20 83       	st	Z, r18
			LCD_moveCursor(1,chars);
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c60:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <LCD_moveCursor>
			LCD_displayCharacter('*');
    1c64:	8a e2       	ldi	r24, 0x2A	; 42
    1c66:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <LCD_displayCharacter>
			chars++;
    1c6a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c6c:	8f 5f       	subi	r24, 0xFF	; 255
    1c6e:	8c af       	std	Y+60, r24	; 0x3c
char Auth(void){
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Plz Enter Pass");
		char chars = 0;
		_delay_ms(100);
		while(chars<5){
    1c70:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c72:	85 30       	cpi	r24, 0x05	; 5
    1c74:	08 f4       	brcc	.+2      	; 0x1c78 <Auth+0x23a>
    1c76:	6a cf       	rjmp	.-300    	; 0x1b4c <Auth+0x10e>
			check_pass[chars] = buff[0];
			LCD_moveCursor(1,chars);
			LCD_displayCharacter('*');
			chars++;
		}
		check_pass[chars]='\0';
    1c78:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	fc 01       	movw	r30, r24
    1c80:	ea 52       	subi	r30, 0x2A	; 42
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	10 82       	st	Z, r1
	   /* LCD_displayStringRowColumn(1,6,pass1);*/
			while(1){
					char end=KEYPAD_getPressedKey() == '=';
    1c86:	0e 94 a5 13 	call	0x274a	; 0x274a <KEYPAD_getPressedKey>
    1c8a:	19 ae       	std	Y+57, r1	; 0x39
    1c8c:	8d 33       	cpi	r24, 0x3D	; 61
    1c8e:	11 f4       	brne	.+4      	; 0x1c94 <Auth+0x256>
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	89 af       	std	Y+57, r24	; 0x39
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a6 e1       	ldi	r26, 0x16	; 22
    1c9a:	b3 e4       	ldi	r27, 0x43	; 67
    1c9c:	89 8f       	std	Y+25, r24	; 0x19
    1c9e:	9a 8f       	std	Y+26, r25	; 0x1a
    1ca0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ca2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	4a ef       	ldi	r20, 0xFA	; 250
    1cb2:	54 e4       	ldi	r21, 0x44	; 68
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	8d 8b       	std	Y+21, r24	; 0x15
    1cbe:	9e 8b       	std	Y+22, r25	; 0x16
    1cc0:	af 8b       	std	Y+23, r26	; 0x17
    1cc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	2c f4       	brge	.+10     	; 0x1ce6 <Auth+0x2a8>
		__ticks = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9c 8b       	std	Y+20, r25	; 0x14
    1ce2:	8b 8b       	std	Y+19, r24	; 0x13
    1ce4:	3f c0       	rjmp	.+126    	; 0x1d64 <Auth+0x326>
	else if (__tmp > 65535)
    1ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cea:	8f 89       	ldd	r24, Y+23	; 0x17
    1cec:	98 8d       	ldd	r25, Y+24	; 0x18
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	57 e4       	ldi	r21, 0x47	; 71
    1cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfa:	18 16       	cp	r1, r24
    1cfc:	4c f5       	brge	.+82     	; 0x1d50 <Auth+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	69 8d       	ldd	r22, Y+25	; 0x19
    1d00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9c 8b       	std	Y+20, r25	; 0x14
    1d24:	8b 8b       	std	Y+19, r24	; 0x13
    1d26:	0f c0       	rjmp	.+30     	; 0x1d46 <Auth+0x308>
    1d28:	88 ec       	ldi	r24, 0xC8	; 200
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9a 8b       	std	Y+18, r25	; 0x12
    1d2e:	89 8b       	std	Y+17, r24	; 0x11
    1d30:	89 89       	ldd	r24, Y+17	; 0x11
    1d32:	9a 89       	ldd	r25, Y+18	; 0x12
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <Auth+0x2f6>
    1d38:	9a 8b       	std	Y+18, r25	; 0x12
    1d3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	9c 8b       	std	Y+20, r25	; 0x14
    1d44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d46:	8b 89       	ldd	r24, Y+19	; 0x13
    1d48:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <Auth+0x2ea>
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <Auth+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	6d 89       	ldd	r22, Y+21	; 0x15
    1d52:	7e 89       	ldd	r23, Y+22	; 0x16
    1d54:	8f 89       	ldd	r24, Y+23	; 0x17
    1d56:	98 8d       	ldd	r25, Y+24	; 0x18
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9c 8b       	std	Y+20, r25	; 0x14
    1d62:	8b 8b       	std	Y+19, r24	; 0x13
    1d64:	8b 89       	ldd	r24, Y+19	; 0x13
    1d66:	9c 89       	ldd	r25, Y+20	; 0x14
    1d68:	98 8b       	std	Y+16, r25	; 0x10
    1d6a:	8f 87       	std	Y+15, r24	; 0x0f
    1d6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6e:	98 89       	ldd	r25, Y+16	; 0x10
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <Auth+0x332>
    1d74:	98 8b       	std	Y+16, r25	; 0x10
    1d76:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(150);
					if(end)
    1d78:	89 ad       	ldd	r24, Y+57	; 0x39
    1d7a:	88 23       	and	r24, r24
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <Auth+0x342>
    1d7e:	83 cf       	rjmp	.-250    	; 0x1c86 <Auth+0x248>
						break;
				}
			//send to auth pass
			UART_sendByte(AUTH);
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <UART_sendByte>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	aa e7       	ldi	r26, 0x7A	; 122
    1d8c:	b3 e4       	ldi	r27, 0x43	; 67
    1d8e:	8b 87       	std	Y+11, r24	; 0x0b
    1d90:	9c 87       	std	Y+12, r25	; 0x0c
    1d92:	ad 87       	std	Y+13, r26	; 0x0d
    1d94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	4a ef       	ldi	r20, 0xFA	; 250
    1da4:	54 e4       	ldi	r21, 0x44	; 68
    1da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	8f 83       	std	Y+7, r24	; 0x07
    1db0:	98 87       	std	Y+8, r25	; 0x08
    1db2:	a9 87       	std	Y+9, r26	; 0x09
    1db4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db6:	6f 81       	ldd	r22, Y+7	; 0x07
    1db8:	78 85       	ldd	r23, Y+8	; 0x08
    1dba:	89 85       	ldd	r24, Y+9	; 0x09
    1dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e8       	ldi	r20, 0x80	; 128
    1dc4:	5f e3       	ldi	r21, 0x3F	; 63
    1dc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dca:	88 23       	and	r24, r24
    1dcc:	2c f4       	brge	.+10     	; 0x1dd8 <Auth+0x39a>
		__ticks = 1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
    1dd6:	3f c0       	rjmp	.+126    	; 0x1e56 <Auth+0x418>
	else if (__tmp > 65535)
    1dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dda:	78 85       	ldd	r23, Y+8	; 0x08
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	3f ef       	ldi	r19, 0xFF	; 255
    1de4:	4f e7       	ldi	r20, 0x7F	; 127
    1de6:	57 e4       	ldi	r21, 0x47	; 71
    1de8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dec:	18 16       	cp	r1, r24
    1dee:	4c f5       	brge	.+82     	; 0x1e42 <Auth+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e2       	ldi	r20, 0x20	; 32
    1dfe:	51 e4       	ldi	r21, 0x41	; 65
    1e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	9e 83       	std	Y+6, r25	; 0x06
    1e16:	8d 83       	std	Y+5, r24	; 0x05
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <Auth+0x3fa>
    1e1a:	88 ec       	ldi	r24, 0xC8	; 200
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9c 83       	std	Y+4, r25	; 0x04
    1e20:	8b 83       	std	Y+3, r24	; 0x03
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	9c 81       	ldd	r25, Y+4	; 0x04
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <Auth+0x3e8>
    1e2a:	9c 83       	std	Y+4, r25	; 0x04
    1e2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	69 f7       	brne	.-38     	; 0x1e1a <Auth+0x3dc>
    1e40:	14 c0       	rjmp	.+40     	; 0x1e6a <Auth+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e42:	6f 81       	ldd	r22, Y+7	; 0x07
    1e44:	78 85       	ldd	r23, Y+8	; 0x08
    1e46:	89 85       	ldd	r24, Y+9	; 0x09
    1e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	9a 81       	ldd	r25, Y+2	; 0x02
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <Auth+0x424>
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			UART_sendString(check_pass);
    1e6a:	86 ed       	ldi	r24, 0xD6	; 214
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0e 94 1f 1c 	call	0x383e	; 0x383e <UART_sendString>
			char matched = UART_recieveByte();
    1e72:	0e 94 10 1c 	call	0x3820	; 0x3820 <UART_recieveByte>
    1e76:	8b af       	std	Y+59, r24	; 0x3b
			return matched;
    1e78:	8b ad       	ldd	r24, Y+59	; 0x3b

}
    1e7a:	ee 96       	adiw	r28, 0x3e	; 62
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <timer_increment>:

void timer_increment(void){
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
	seconds++;
    1e94:	80 91 bb 00 	lds	r24, 0x00BB
    1e98:	8f 5f       	subi	r24, 0xFF	; 255
    1e9a:	80 93 bb 00 	sts	0x00BB, r24
}
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <strcmpp>:





char strcmpp(const unsigned  char *pass1 , const unsigned char *pass2){
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <strcmpp+0x6>
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <strcmpp+0x8>
    1eac:	0f 92       	push	r0
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	7c 83       	std	Y+4, r23	; 0x04
    1eb8:	6b 83       	std	Y+3, r22	; 0x03
    1eba:	14 c0       	rjmp	.+40     	; 0x1ee4 <strcmpp+0x40>

	while(*pass1 != '\0'){
		if (*pass1 != *pass2){
    1ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec0:	90 81       	ld	r25, Z
    1ec2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec6:	80 81       	ld	r24, Z
    1ec8:	98 17       	cp	r25, r24
    1eca:	11 f0       	breq	.+4      	; 0x1ed0 <strcmpp+0x2c>
			return 0;
    1ecc:	1d 82       	std	Y+5, r1	; 0x05
    1ece:	11 c0       	rjmp	.+34     	; 0x1ef2 <strcmpp+0x4e>
		}
		pass1++;
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
		pass2++;
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03



char strcmpp(const unsigned  char *pass1 , const unsigned char *pass2){

	while(*pass1 != '\0'){
    1ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee8:	80 81       	ld	r24, Z
    1eea:	88 23       	and	r24, r24
    1eec:	39 f7       	brne	.-50     	; 0x1ebc <strcmpp+0x18>
			return 0;
		}
		pass1++;
		pass2++;
	}
	return 1;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	8d 83       	std	Y+5, r24	; 0x05
    1ef2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <itoa>:

char* itoa(int num, char* str, int base) {
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	66 97       	sbiw	r28, 0x16	; 22
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	9d 87       	std	Y+13, r25	; 0x0d
    1f1a:	8c 87       	std	Y+12, r24	; 0x0c
    1f1c:	7f 87       	std	Y+15, r23	; 0x0f
    1f1e:	6e 87       	std	Y+14, r22	; 0x0e
    1f20:	59 8b       	std	Y+17, r21	; 0x11
    1f22:	48 8b       	std	Y+16, r20	; 0x10
    int i = 0;
    1f24:	1b 86       	std	Y+11, r1	; 0x0b
    1f26:	1a 86       	std	Y+10, r1	; 0x0a
    int isNegative = 0;
    1f28:	19 86       	std	Y+9, r1	; 0x09
    1f2a:	18 86       	std	Y+8, r1	; 0x08


    if (num == 0) {
    1f2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f2e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	d9 f4       	brne	.+54     	; 0x1f6a <itoa+0x66>
        str[i++] = '0';
    1f34:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f36:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f38:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	e2 0f       	add	r30, r18
    1f40:	f3 1f       	adc	r31, r19
    1f42:	80 e3       	ldi	r24, 0x30	; 48
    1f44:	80 83       	st	Z, r24
    1f46:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f48:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f4a:	01 96       	adiw	r24, 0x01	; 1
    1f4c:	9b 87       	std	Y+11, r25	; 0x0b
    1f4e:	8a 87       	std	Y+10, r24	; 0x0a
        str[i] = '\0';
    1f50:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f52:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f54:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f56:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f58:	fc 01       	movw	r30, r24
    1f5a:	e2 0f       	add	r30, r18
    1f5c:	f3 1f       	adc	r31, r19
    1f5e:	10 82       	st	Z, r1
        return str;
    1f60:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f62:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f64:	5e 8b       	std	Y+22, r21	; 0x16
    1f66:	4d 8b       	std	Y+21, r20	; 0x15
    1f68:	a7 c0       	rjmp	.+334    	; 0x20b8 <itoa+0x1b4>
    }


    if (num < 0 && base == 10) {
    1f6a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f6c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f6e:	99 23       	and	r25, r25
    1f70:	0c f0       	brlt	.+2      	; 0x1f74 <itoa+0x70>
    1f72:	45 c0       	rjmp	.+138    	; 0x1ffe <itoa+0xfa>
    1f74:	88 89       	ldd	r24, Y+16	; 0x10
    1f76:	99 89       	ldd	r25, Y+17	; 0x11
    1f78:	8a 30       	cpi	r24, 0x0A	; 10
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <itoa+0x7c>
    1f7e:	3f c0       	rjmp	.+126    	; 0x1ffe <itoa+0xfa>
        isNegative = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	99 87       	std	Y+9, r25	; 0x09
    1f86:	88 87       	std	Y+8, r24	; 0x08
        num = -num;
    1f88:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f8a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f8c:	90 95       	com	r25
    1f8e:	81 95       	neg	r24
    1f90:	9f 4f       	sbci	r25, 0xFF	; 255
    1f92:	9d 87       	std	Y+13, r25	; 0x0d
    1f94:	8c 87       	std	Y+12, r24	; 0x0c
    1f96:	33 c0       	rjmp	.+102    	; 0x1ffe <itoa+0xfa>
    }


    while (num != 0) {
        int rem = num % base;
    1f98:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f9c:	28 89       	ldd	r18, Y+16	; 0x10
    1f9e:	39 89       	ldd	r19, Y+17	; 0x11
    1fa0:	b9 01       	movw	r22, r18
    1fa2:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__divmodhi4>
    1fa6:	9b 83       	std	Y+3, r25	; 0x03
    1fa8:	8a 83       	std	Y+2, r24	; 0x02
        str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
    1faa:	2a 85       	ldd	r18, Y+10	; 0x0a
    1fac:	3b 85       	ldd	r19, Y+11	; 0x0b
    1fae:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fb0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	e2 0f       	add	r30, r18
    1fb6:	f3 1f       	adc	r31, r19
    1fb8:	fc 8b       	std	Y+20, r31	; 0x14
    1fba:	eb 8b       	std	Y+19, r30	; 0x13
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc0:	8a 30       	cpi	r24, 0x0A	; 10
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	2c f0       	brlt	.+10     	; 0x1fd0 <itoa+0xcc>
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	f8 2f       	mov	r31, r24
    1fca:	f9 5a       	subi	r31, 0xA9	; 169
    1fcc:	fa 8b       	std	Y+18, r31	; 0x12
    1fce:	04 c0       	rjmp	.+8      	; 0x1fd8 <itoa+0xd4>
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	48 2f       	mov	r20, r24
    1fd4:	40 5d       	subi	r20, 0xD0	; 208
    1fd6:	4a 8b       	std	Y+18, r20	; 0x12
    1fd8:	4a 89       	ldd	r20, Y+18	; 0x12
    1fda:	eb 89       	ldd	r30, Y+19	; 0x13
    1fdc:	fc 89       	ldd	r31, Y+20	; 0x14
    1fde:	40 83       	st	Z, r20
    1fe0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fe2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fe4:	01 96       	adiw	r24, 0x01	; 1
    1fe6:	9b 87       	std	Y+11, r25	; 0x0b
    1fe8:	8a 87       	std	Y+10, r24	; 0x0a
        num = num / base;
    1fea:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fec:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fee:	28 89       	ldd	r18, Y+16	; 0x10
    1ff0:	39 89       	ldd	r19, Y+17	; 0x11
    1ff2:	b9 01       	movw	r22, r18
    1ff4:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__divmodhi4>
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9d 87       	std	Y+13, r25	; 0x0d
    1ffc:	8c 87       	std	Y+12, r24	; 0x0c
        isNegative = 1;
        num = -num;
    }


    while (num != 0) {
    1ffe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2000:	9d 85       	ldd	r25, Y+13	; 0x0d
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	49 f6       	brne	.-110    	; 0x1f98 <itoa+0x94>
        int rem = num % base;
        str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
        num = num / base;
    }
    if (isNegative) {
    2006:	88 85       	ldd	r24, Y+8	; 0x08
    2008:	99 85       	ldd	r25, Y+9	; 0x09
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	71 f0       	breq	.+28     	; 0x202a <itoa+0x126>
        str[i++] = '-';
    200e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2010:	3b 85       	ldd	r19, Y+11	; 0x0b
    2012:	8e 85       	ldd	r24, Y+14	; 0x0e
    2014:	9f 85       	ldd	r25, Y+15	; 0x0f
    2016:	fc 01       	movw	r30, r24
    2018:	e2 0f       	add	r30, r18
    201a:	f3 1f       	adc	r31, r19
    201c:	8d e2       	ldi	r24, 0x2D	; 45
    201e:	80 83       	st	Z, r24
    2020:	8a 85       	ldd	r24, Y+10	; 0x0a
    2022:	9b 85       	ldd	r25, Y+11	; 0x0b
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	9b 87       	std	Y+11, r25	; 0x0b
    2028:	8a 87       	std	Y+10, r24	; 0x0a
    }

    str[i] = '\0';
    202a:	2a 85       	ldd	r18, Y+10	; 0x0a
    202c:	3b 85       	ldd	r19, Y+11	; 0x0b
    202e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2030:	9f 85       	ldd	r25, Y+15	; 0x0f
    2032:	fc 01       	movw	r30, r24
    2034:	e2 0f       	add	r30, r18
    2036:	f3 1f       	adc	r31, r19
    2038:	10 82       	st	Z, r1


    int start = 0;
    203a:	1f 82       	std	Y+7, r1	; 0x07
    203c:	1e 82       	std	Y+6, r1	; 0x06
    int end = i - 1;
    203e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2040:	9b 85       	ldd	r25, Y+11	; 0x0b
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	9d 83       	std	Y+5, r25	; 0x05
    2046:	8c 83       	std	Y+4, r24	; 0x04
    2048:	2c c0       	rjmp	.+88     	; 0x20a2 <itoa+0x19e>
    while (start < end) {
        char temp = str[start];
    204a:	2e 81       	ldd	r18, Y+6	; 0x06
    204c:	3f 81       	ldd	r19, Y+7	; 0x07
    204e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2050:	9f 85       	ldd	r25, Y+15	; 0x0f
    2052:	fc 01       	movw	r30, r24
    2054:	e2 0f       	add	r30, r18
    2056:	f3 1f       	adc	r31, r19
    2058:	80 81       	ld	r24, Z
    205a:	89 83       	std	Y+1, r24	; 0x01
        str[start] = str[end];
    205c:	2e 81       	ldd	r18, Y+6	; 0x06
    205e:	3f 81       	ldd	r19, Y+7	; 0x07
    2060:	8e 85       	ldd	r24, Y+14	; 0x0e
    2062:	9f 85       	ldd	r25, Y+15	; 0x0f
    2064:	dc 01       	movw	r26, r24
    2066:	a2 0f       	add	r26, r18
    2068:	b3 1f       	adc	r27, r19
    206a:	2c 81       	ldd	r18, Y+4	; 0x04
    206c:	3d 81       	ldd	r19, Y+5	; 0x05
    206e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2070:	9f 85       	ldd	r25, Y+15	; 0x0f
    2072:	fc 01       	movw	r30, r24
    2074:	e2 0f       	add	r30, r18
    2076:	f3 1f       	adc	r31, r19
    2078:	80 81       	ld	r24, Z
    207a:	8c 93       	st	X, r24
        str[end] = temp;
    207c:	2c 81       	ldd	r18, Y+4	; 0x04
    207e:	3d 81       	ldd	r19, Y+5	; 0x05
    2080:	8e 85       	ldd	r24, Y+14	; 0x0e
    2082:	9f 85       	ldd	r25, Y+15	; 0x0f
    2084:	fc 01       	movw	r30, r24
    2086:	e2 0f       	add	r30, r18
    2088:	f3 1f       	adc	r31, r19
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	80 83       	st	Z, r24
        start++;
    208e:	8e 81       	ldd	r24, Y+6	; 0x06
    2090:	9f 81       	ldd	r25, Y+7	; 0x07
    2092:	01 96       	adiw	r24, 0x01	; 1
    2094:	9f 83       	std	Y+7, r25	; 0x07
    2096:	8e 83       	std	Y+6, r24	; 0x06
        end--;
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	9d 81       	ldd	r25, Y+5	; 0x05
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	9d 83       	std	Y+5, r25	; 0x05
    20a0:	8c 83       	std	Y+4, r24	; 0x04
    str[i] = '\0';


    int start = 0;
    int end = i - 1;
    while (start < end) {
    20a2:	2e 81       	ldd	r18, Y+6	; 0x06
    20a4:	3f 81       	ldd	r19, Y+7	; 0x07
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	9d 81       	ldd	r25, Y+5	; 0x05
    20aa:	28 17       	cp	r18, r24
    20ac:	39 07       	cpc	r19, r25
    20ae:	6c f2       	brlt	.-102    	; 0x204a <itoa+0x146>
        str[end] = temp;
        start++;
        end--;
    }

    return str;
    20b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    20b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    20b4:	9e 8b       	std	Y+22, r25	; 0x16
    20b6:	8d 8b       	std	Y+21, r24	; 0x15
    20b8:	8d 89       	ldd	r24, Y+21	; 0x15
    20ba:	9e 89       	ldd	r25, Y+22	; 0x16
}
    20bc:	66 96       	adiw	r28, 0x16	; 22
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <GPIO_setupPinDirection+0x6>
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <GPIO_setupPinDirection+0x8>
    20d6:	0f 92       	push	r0
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	6a 83       	std	Y+2, r22	; 0x02
    20e0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	88 30       	cpi	r24, 0x08	; 8
    20e6:	08 f0       	brcs	.+2      	; 0x20ea <GPIO_setupPinDirection+0x1c>
    20e8:	d5 c0       	rjmp	.+426    	; 0x2294 <GPIO_setupPinDirection+0x1c6>
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	84 30       	cpi	r24, 0x04	; 4
    20ee:	08 f0       	brcs	.+2      	; 0x20f2 <GPIO_setupPinDirection+0x24>
    20f0:	d1 c0       	rjmp	.+418    	; 0x2294 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	3d 83       	std	Y+5, r19	; 0x05
    20fa:	2c 83       	std	Y+4, r18	; 0x04
    20fc:	8c 81       	ldd	r24, Y+4	; 0x04
    20fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2100:	81 30       	cpi	r24, 0x01	; 1
    2102:	91 05       	cpc	r25, r1
    2104:	09 f4       	brne	.+2      	; 0x2108 <GPIO_setupPinDirection+0x3a>
    2106:	43 c0       	rjmp	.+134    	; 0x218e <GPIO_setupPinDirection+0xc0>
    2108:	2c 81       	ldd	r18, Y+4	; 0x04
    210a:	3d 81       	ldd	r19, Y+5	; 0x05
    210c:	22 30       	cpi	r18, 0x02	; 2
    210e:	31 05       	cpc	r19, r1
    2110:	2c f4       	brge	.+10     	; 0x211c <GPIO_setupPinDirection+0x4e>
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	9d 81       	ldd	r25, Y+5	; 0x05
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	71 f0       	breq	.+28     	; 0x2136 <GPIO_setupPinDirection+0x68>
    211a:	bc c0       	rjmp	.+376    	; 0x2294 <GPIO_setupPinDirection+0x1c6>
    211c:	2c 81       	ldd	r18, Y+4	; 0x04
    211e:	3d 81       	ldd	r19, Y+5	; 0x05
    2120:	22 30       	cpi	r18, 0x02	; 2
    2122:	31 05       	cpc	r19, r1
    2124:	09 f4       	brne	.+2      	; 0x2128 <GPIO_setupPinDirection+0x5a>
    2126:	5f c0       	rjmp	.+190    	; 0x21e6 <GPIO_setupPinDirection+0x118>
    2128:	8c 81       	ldd	r24, Y+4	; 0x04
    212a:	9d 81       	ldd	r25, Y+5	; 0x05
    212c:	83 30       	cpi	r24, 0x03	; 3
    212e:	91 05       	cpc	r25, r1
    2130:	09 f4       	brne	.+2      	; 0x2134 <GPIO_setupPinDirection+0x66>
    2132:	85 c0       	rjmp	.+266    	; 0x223e <GPIO_setupPinDirection+0x170>
    2134:	af c0       	rjmp	.+350    	; 0x2294 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	81 30       	cpi	r24, 0x01	; 1
    213a:	a1 f4       	brne	.+40     	; 0x2164 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    213c:	aa e3       	ldi	r26, 0x3A	; 58
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	ea e3       	ldi	r30, 0x3A	; 58
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	48 2f       	mov	r20, r24
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	02 2e       	mov	r0, r18
    2154:	02 c0       	rjmp	.+4      	; 0x215a <GPIO_setupPinDirection+0x8c>
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	0a 94       	dec	r0
    215c:	e2 f7       	brpl	.-8      	; 0x2156 <GPIO_setupPinDirection+0x88>
    215e:	84 2b       	or	r24, r20
    2160:	8c 93       	st	X, r24
    2162:	98 c0       	rjmp	.+304    	; 0x2294 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2164:	aa e3       	ldi	r26, 0x3A	; 58
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	ea e3       	ldi	r30, 0x3A	; 58
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	48 2f       	mov	r20, r24
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	02 2e       	mov	r0, r18
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <GPIO_setupPinDirection+0xb4>
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	0a 94       	dec	r0
    2184:	e2 f7       	brpl	.-8      	; 0x217e <GPIO_setupPinDirection+0xb0>
    2186:	80 95       	com	r24
    2188:	84 23       	and	r24, r20
    218a:	8c 93       	st	X, r24
    218c:	83 c0       	rjmp	.+262    	; 0x2294 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	81 30       	cpi	r24, 0x01	; 1
    2192:	a1 f4       	brne	.+40     	; 0x21bc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2194:	a7 e3       	ldi	r26, 0x37	; 55
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e7 e3       	ldi	r30, 0x37	; 55
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	48 2f       	mov	r20, r24
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	02 2e       	mov	r0, r18
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <GPIO_setupPinDirection+0xe4>
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	0a 94       	dec	r0
    21b4:	e2 f7       	brpl	.-8      	; 0x21ae <GPIO_setupPinDirection+0xe0>
    21b6:	84 2b       	or	r24, r20
    21b8:	8c 93       	st	X, r24
    21ba:	6c c0       	rjmp	.+216    	; 0x2294 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    21bc:	a7 e3       	ldi	r26, 0x37	; 55
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	e7 e3       	ldi	r30, 0x37	; 55
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	48 2f       	mov	r20, r24
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	02 2e       	mov	r0, r18
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <GPIO_setupPinDirection+0x10c>
    21d6:	88 0f       	add	r24, r24
    21d8:	99 1f       	adc	r25, r25
    21da:	0a 94       	dec	r0
    21dc:	e2 f7       	brpl	.-8      	; 0x21d6 <GPIO_setupPinDirection+0x108>
    21de:	80 95       	com	r24
    21e0:	84 23       	and	r24, r20
    21e2:	8c 93       	st	X, r24
    21e4:	57 c0       	rjmp	.+174    	; 0x2294 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	81 30       	cpi	r24, 0x01	; 1
    21ea:	a1 f4       	brne	.+40     	; 0x2214 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    21ec:	a4 e3       	ldi	r26, 0x34	; 52
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e4 e3       	ldi	r30, 0x34	; 52
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	48 2f       	mov	r20, r24
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	02 2e       	mov	r0, r18
    2204:	02 c0       	rjmp	.+4      	; 0x220a <GPIO_setupPinDirection+0x13c>
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	0a 94       	dec	r0
    220c:	e2 f7       	brpl	.-8      	; 0x2206 <GPIO_setupPinDirection+0x138>
    220e:	84 2b       	or	r24, r20
    2210:	8c 93       	st	X, r24
    2212:	40 c0       	rjmp	.+128    	; 0x2294 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2214:	a4 e3       	ldi	r26, 0x34	; 52
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e4 e3       	ldi	r30, 0x34	; 52
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	48 2f       	mov	r20, r24
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	02 2e       	mov	r0, r18
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <GPIO_setupPinDirection+0x164>
    222e:	88 0f       	add	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	0a 94       	dec	r0
    2234:	e2 f7       	brpl	.-8      	; 0x222e <GPIO_setupPinDirection+0x160>
    2236:	80 95       	com	r24
    2238:	84 23       	and	r24, r20
    223a:	8c 93       	st	X, r24
    223c:	2b c0       	rjmp	.+86     	; 0x2294 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	81 30       	cpi	r24, 0x01	; 1
    2242:	a1 f4       	brne	.+40     	; 0x226c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2244:	a1 e3       	ldi	r26, 0x31	; 49
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e1 e3       	ldi	r30, 0x31	; 49
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	48 2f       	mov	r20, r24
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	02 2e       	mov	r0, r18
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <GPIO_setupPinDirection+0x194>
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	0a 94       	dec	r0
    2264:	e2 f7       	brpl	.-8      	; 0x225e <GPIO_setupPinDirection+0x190>
    2266:	84 2b       	or	r24, r20
    2268:	8c 93       	st	X, r24
    226a:	14 c0       	rjmp	.+40     	; 0x2294 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    226c:	a1 e3       	ldi	r26, 0x31	; 49
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	e1 e3       	ldi	r30, 0x31	; 49
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	48 2f       	mov	r20, r24
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	02 2e       	mov	r0, r18
    2284:	02 c0       	rjmp	.+4      	; 0x228a <GPIO_setupPinDirection+0x1bc>
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	0a 94       	dec	r0
    228c:	e2 f7       	brpl	.-8      	; 0x2286 <GPIO_setupPinDirection+0x1b8>
    228e:	80 95       	com	r24
    2290:	84 23       	and	r24, r20
    2292:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <GPIO_writePin+0x6>
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <GPIO_writePin+0x8>
    22ac:	0f 92       	push	r0
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	6a 83       	std	Y+2, r22	; 0x02
    22b6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	88 30       	cpi	r24, 0x08	; 8
    22bc:	08 f0       	brcs	.+2      	; 0x22c0 <GPIO_writePin+0x1c>
    22be:	d5 c0       	rjmp	.+426    	; 0x246a <GPIO_writePin+0x1c6>
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	84 30       	cpi	r24, 0x04	; 4
    22c4:	08 f0       	brcs	.+2      	; 0x22c8 <GPIO_writePin+0x24>
    22c6:	d1 c0       	rjmp	.+418    	; 0x246a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	3d 83       	std	Y+5, r19	; 0x05
    22d0:	2c 83       	std	Y+4, r18	; 0x04
    22d2:	8c 81       	ldd	r24, Y+4	; 0x04
    22d4:	9d 81       	ldd	r25, Y+5	; 0x05
    22d6:	81 30       	cpi	r24, 0x01	; 1
    22d8:	91 05       	cpc	r25, r1
    22da:	09 f4       	brne	.+2      	; 0x22de <GPIO_writePin+0x3a>
    22dc:	43 c0       	rjmp	.+134    	; 0x2364 <GPIO_writePin+0xc0>
    22de:	2c 81       	ldd	r18, Y+4	; 0x04
    22e0:	3d 81       	ldd	r19, Y+5	; 0x05
    22e2:	22 30       	cpi	r18, 0x02	; 2
    22e4:	31 05       	cpc	r19, r1
    22e6:	2c f4       	brge	.+10     	; 0x22f2 <GPIO_writePin+0x4e>
    22e8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ea:	9d 81       	ldd	r25, Y+5	; 0x05
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	71 f0       	breq	.+28     	; 0x230c <GPIO_writePin+0x68>
    22f0:	bc c0       	rjmp	.+376    	; 0x246a <GPIO_writePin+0x1c6>
    22f2:	2c 81       	ldd	r18, Y+4	; 0x04
    22f4:	3d 81       	ldd	r19, Y+5	; 0x05
    22f6:	22 30       	cpi	r18, 0x02	; 2
    22f8:	31 05       	cpc	r19, r1
    22fa:	09 f4       	brne	.+2      	; 0x22fe <GPIO_writePin+0x5a>
    22fc:	5f c0       	rjmp	.+190    	; 0x23bc <GPIO_writePin+0x118>
    22fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2300:	9d 81       	ldd	r25, Y+5	; 0x05
    2302:	83 30       	cpi	r24, 0x03	; 3
    2304:	91 05       	cpc	r25, r1
    2306:	09 f4       	brne	.+2      	; 0x230a <GPIO_writePin+0x66>
    2308:	85 c0       	rjmp	.+266    	; 0x2414 <GPIO_writePin+0x170>
    230a:	af c0       	rjmp	.+350    	; 0x246a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	81 30       	cpi	r24, 0x01	; 1
    2310:	a1 f4       	brne	.+40     	; 0x233a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2312:	ab e3       	ldi	r26, 0x3B	; 59
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	eb e3       	ldi	r30, 0x3B	; 59
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	48 2f       	mov	r20, r24
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	02 2e       	mov	r0, r18
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <GPIO_writePin+0x8c>
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	0a 94       	dec	r0
    2332:	e2 f7       	brpl	.-8      	; 0x232c <GPIO_writePin+0x88>
    2334:	84 2b       	or	r24, r20
    2336:	8c 93       	st	X, r24
    2338:	98 c0       	rjmp	.+304    	; 0x246a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    233a:	ab e3       	ldi	r26, 0x3B	; 59
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	eb e3       	ldi	r30, 0x3B	; 59
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	48 2f       	mov	r20, r24
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	02 2e       	mov	r0, r18
    2352:	02 c0       	rjmp	.+4      	; 0x2358 <GPIO_writePin+0xb4>
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	0a 94       	dec	r0
    235a:	e2 f7       	brpl	.-8      	; 0x2354 <GPIO_writePin+0xb0>
    235c:	80 95       	com	r24
    235e:	84 23       	and	r24, r20
    2360:	8c 93       	st	X, r24
    2362:	83 c0       	rjmp	.+262    	; 0x246a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	81 30       	cpi	r24, 0x01	; 1
    2368:	a1 f4       	brne	.+40     	; 0x2392 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    236a:	a8 e3       	ldi	r26, 0x38	; 56
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e8 e3       	ldi	r30, 0x38	; 56
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	48 2f       	mov	r20, r24
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	02 2e       	mov	r0, r18
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <GPIO_writePin+0xe4>
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	0a 94       	dec	r0
    238a:	e2 f7       	brpl	.-8      	; 0x2384 <GPIO_writePin+0xe0>
    238c:	84 2b       	or	r24, r20
    238e:	8c 93       	st	X, r24
    2390:	6c c0       	rjmp	.+216    	; 0x246a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2392:	a8 e3       	ldi	r26, 0x38	; 56
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	e8 e3       	ldi	r30, 0x38	; 56
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	48 2f       	mov	r20, r24
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	02 2e       	mov	r0, r18
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <GPIO_writePin+0x10c>
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	0a 94       	dec	r0
    23b2:	e2 f7       	brpl	.-8      	; 0x23ac <GPIO_writePin+0x108>
    23b4:	80 95       	com	r24
    23b6:	84 23       	and	r24, r20
    23b8:	8c 93       	st	X, r24
    23ba:	57 c0       	rjmp	.+174    	; 0x246a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	81 30       	cpi	r24, 0x01	; 1
    23c0:	a1 f4       	brne	.+40     	; 0x23ea <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    23c2:	a5 e3       	ldi	r26, 0x35	; 53
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e5 e3       	ldi	r30, 0x35	; 53
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	48 2f       	mov	r20, r24
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	02 2e       	mov	r0, r18
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <GPIO_writePin+0x13c>
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	0a 94       	dec	r0
    23e2:	e2 f7       	brpl	.-8      	; 0x23dc <GPIO_writePin+0x138>
    23e4:	84 2b       	or	r24, r20
    23e6:	8c 93       	st	X, r24
    23e8:	40 c0       	rjmp	.+128    	; 0x246a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    23ea:	a5 e3       	ldi	r26, 0x35	; 53
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e5 e3       	ldi	r30, 0x35	; 53
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	48 2f       	mov	r20, r24
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	02 2e       	mov	r0, r18
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <GPIO_writePin+0x164>
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	0a 94       	dec	r0
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <GPIO_writePin+0x160>
    240c:	80 95       	com	r24
    240e:	84 23       	and	r24, r20
    2410:	8c 93       	st	X, r24
    2412:	2b c0       	rjmp	.+86     	; 0x246a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	81 30       	cpi	r24, 0x01	; 1
    2418:	a1 f4       	brne	.+40     	; 0x2442 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    241a:	a2 e3       	ldi	r26, 0x32	; 50
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e2 e3       	ldi	r30, 0x32	; 50
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	48 2f       	mov	r20, r24
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	02 2e       	mov	r0, r18
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <GPIO_writePin+0x194>
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	0a 94       	dec	r0
    243a:	e2 f7       	brpl	.-8      	; 0x2434 <GPIO_writePin+0x190>
    243c:	84 2b       	or	r24, r20
    243e:	8c 93       	st	X, r24
    2440:	14 c0       	rjmp	.+40     	; 0x246a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2442:	a2 e3       	ldi	r26, 0x32	; 50
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e2 e3       	ldi	r30, 0x32	; 50
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	48 2f       	mov	r20, r24
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	02 2e       	mov	r0, r18
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <GPIO_writePin+0x1bc>
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	0a 94       	dec	r0
    2462:	e2 f7       	brpl	.-8      	; 0x245c <GPIO_writePin+0x1b8>
    2464:	80 95       	com	r24
    2466:	84 23       	and	r24, r20
    2468:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	00 d0       	rcall	.+0      	; 0x2480 <GPIO_readPin+0x6>
    2480:	00 d0       	rcall	.+0      	; 0x2482 <GPIO_readPin+0x8>
    2482:	0f 92       	push	r0
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	8a 83       	std	Y+2, r24	; 0x02
    248a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    248c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	88 30       	cpi	r24, 0x08	; 8
    2492:	08 f0       	brcs	.+2      	; 0x2496 <GPIO_readPin+0x1c>
    2494:	84 c0       	rjmp	.+264    	; 0x259e <GPIO_readPin+0x124>
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	84 30       	cpi	r24, 0x04	; 4
    249a:	08 f0       	brcs	.+2      	; 0x249e <GPIO_readPin+0x24>
    249c:	80 c0       	rjmp	.+256    	; 0x259e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	28 2f       	mov	r18, r24
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	3d 83       	std	Y+5, r19	; 0x05
    24a6:	2c 83       	std	Y+4, r18	; 0x04
    24a8:	4c 81       	ldd	r20, Y+4	; 0x04
    24aa:	5d 81       	ldd	r21, Y+5	; 0x05
    24ac:	41 30       	cpi	r20, 0x01	; 1
    24ae:	51 05       	cpc	r21, r1
    24b0:	79 f1       	breq	.+94     	; 0x2510 <GPIO_readPin+0x96>
    24b2:	8c 81       	ldd	r24, Y+4	; 0x04
    24b4:	9d 81       	ldd	r25, Y+5	; 0x05
    24b6:	82 30       	cpi	r24, 0x02	; 2
    24b8:	91 05       	cpc	r25, r1
    24ba:	34 f4       	brge	.+12     	; 0x24c8 <GPIO_readPin+0x4e>
    24bc:	2c 81       	ldd	r18, Y+4	; 0x04
    24be:	3d 81       	ldd	r19, Y+5	; 0x05
    24c0:	21 15       	cp	r18, r1
    24c2:	31 05       	cpc	r19, r1
    24c4:	69 f0       	breq	.+26     	; 0x24e0 <GPIO_readPin+0x66>
    24c6:	6b c0       	rjmp	.+214    	; 0x259e <GPIO_readPin+0x124>
    24c8:	4c 81       	ldd	r20, Y+4	; 0x04
    24ca:	5d 81       	ldd	r21, Y+5	; 0x05
    24cc:	42 30       	cpi	r20, 0x02	; 2
    24ce:	51 05       	cpc	r21, r1
    24d0:	b9 f1       	breq	.+110    	; 0x2540 <GPIO_readPin+0xc6>
    24d2:	8c 81       	ldd	r24, Y+4	; 0x04
    24d4:	9d 81       	ldd	r25, Y+5	; 0x05
    24d6:	83 30       	cpi	r24, 0x03	; 3
    24d8:	91 05       	cpc	r25, r1
    24da:	09 f4       	brne	.+2      	; 0x24de <GPIO_readPin+0x64>
    24dc:	49 c0       	rjmp	.+146    	; 0x2570 <GPIO_readPin+0xf6>
    24de:	5f c0       	rjmp	.+190    	; 0x259e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    24e0:	e9 e3       	ldi	r30, 0x39	; 57
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	88 2f       	mov	r24, r24
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	a9 01       	movw	r20, r18
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <GPIO_readPin+0x7e>
    24f4:	55 95       	asr	r21
    24f6:	47 95       	ror	r20
    24f8:	8a 95       	dec	r24
    24fa:	e2 f7       	brpl	.-8      	; 0x24f4 <GPIO_readPin+0x7a>
    24fc:	ca 01       	movw	r24, r20
    24fe:	81 70       	andi	r24, 0x01	; 1
    2500:	90 70       	andi	r25, 0x00	; 0
    2502:	88 23       	and	r24, r24
    2504:	19 f0       	breq	.+6      	; 0x250c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	89 83       	std	Y+1, r24	; 0x01
    250a:	49 c0       	rjmp	.+146    	; 0x259e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    250c:	19 82       	std	Y+1, r1	; 0x01
    250e:	47 c0       	rjmp	.+142    	; 0x259e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2510:	e6 e3       	ldi	r30, 0x36	; 54
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	88 2f       	mov	r24, r24
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a9 01       	movw	r20, r18
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <GPIO_readPin+0xae>
    2524:	55 95       	asr	r21
    2526:	47 95       	ror	r20
    2528:	8a 95       	dec	r24
    252a:	e2 f7       	brpl	.-8      	; 0x2524 <GPIO_readPin+0xaa>
    252c:	ca 01       	movw	r24, r20
    252e:	81 70       	andi	r24, 0x01	; 1
    2530:	90 70       	andi	r25, 0x00	; 0
    2532:	88 23       	and	r24, r24
    2534:	19 f0       	breq	.+6      	; 0x253c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	31 c0       	rjmp	.+98     	; 0x259e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    253c:	19 82       	std	Y+1, r1	; 0x01
    253e:	2f c0       	rjmp	.+94     	; 0x259e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2540:	e3 e3       	ldi	r30, 0x33	; 51
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	88 2f       	mov	r24, r24
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a9 01       	movw	r20, r18
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <GPIO_readPin+0xde>
    2554:	55 95       	asr	r21
    2556:	47 95       	ror	r20
    2558:	8a 95       	dec	r24
    255a:	e2 f7       	brpl	.-8      	; 0x2554 <GPIO_readPin+0xda>
    255c:	ca 01       	movw	r24, r20
    255e:	81 70       	andi	r24, 0x01	; 1
    2560:	90 70       	andi	r25, 0x00	; 0
    2562:	88 23       	and	r24, r24
    2564:	19 f0       	breq	.+6      	; 0x256c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	19 c0       	rjmp	.+50     	; 0x259e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    256c:	19 82       	std	Y+1, r1	; 0x01
    256e:	17 c0       	rjmp	.+46     	; 0x259e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2570:	e0 e3       	ldi	r30, 0x30	; 48
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	88 2f       	mov	r24, r24
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	a9 01       	movw	r20, r18
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <GPIO_readPin+0x10e>
    2584:	55 95       	asr	r21
    2586:	47 95       	ror	r20
    2588:	8a 95       	dec	r24
    258a:	e2 f7       	brpl	.-8      	; 0x2584 <GPIO_readPin+0x10a>
    258c:	ca 01       	movw	r24, r20
    258e:	81 70       	andi	r24, 0x01	; 1
    2590:	90 70       	andi	r25, 0x00	; 0
    2592:	88 23       	and	r24, r24
    2594:	19 f0       	breq	.+6      	; 0x259c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	89 83       	std	Y+1, r24	; 0x01
    259a:	01 c0       	rjmp	.+2      	; 0x259e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    259c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    259e:	89 81       	ldd	r24, Y+1	; 0x01
}
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <GPIO_setupPortDirection+0x6>
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <GPIO_setupPortDirection+0x8>
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	84 30       	cpi	r24, 0x04	; 4
    25c4:	90 f5       	brcc	.+100    	; 0x262a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	3c 83       	std	Y+4, r19	; 0x04
    25ce:	2b 83       	std	Y+3, r18	; 0x03
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	9c 81       	ldd	r25, Y+4	; 0x04
    25d4:	81 30       	cpi	r24, 0x01	; 1
    25d6:	91 05       	cpc	r25, r1
    25d8:	d1 f0       	breq	.+52     	; 0x260e <GPIO_setupPortDirection+0x5e>
    25da:	2b 81       	ldd	r18, Y+3	; 0x03
    25dc:	3c 81       	ldd	r19, Y+4	; 0x04
    25de:	22 30       	cpi	r18, 0x02	; 2
    25e0:	31 05       	cpc	r19, r1
    25e2:	2c f4       	brge	.+10     	; 0x25ee <GPIO_setupPortDirection+0x3e>
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	9c 81       	ldd	r25, Y+4	; 0x04
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	61 f0       	breq	.+24     	; 0x2604 <GPIO_setupPortDirection+0x54>
    25ec:	1e c0       	rjmp	.+60     	; 0x262a <GPIO_setupPortDirection+0x7a>
    25ee:	2b 81       	ldd	r18, Y+3	; 0x03
    25f0:	3c 81       	ldd	r19, Y+4	; 0x04
    25f2:	22 30       	cpi	r18, 0x02	; 2
    25f4:	31 05       	cpc	r19, r1
    25f6:	81 f0       	breq	.+32     	; 0x2618 <GPIO_setupPortDirection+0x68>
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	9c 81       	ldd	r25, Y+4	; 0x04
    25fc:	83 30       	cpi	r24, 0x03	; 3
    25fe:	91 05       	cpc	r25, r1
    2600:	81 f0       	breq	.+32     	; 0x2622 <GPIO_setupPortDirection+0x72>
    2602:	13 c0       	rjmp	.+38     	; 0x262a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2604:	ea e3       	ldi	r30, 0x3A	; 58
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	80 83       	st	Z, r24
    260c:	0e c0       	rjmp	.+28     	; 0x262a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    260e:	e7 e3       	ldi	r30, 0x37	; 55
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	80 83       	st	Z, r24
    2616:	09 c0       	rjmp	.+18     	; 0x262a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2618:	e4 e3       	ldi	r30, 0x34	; 52
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	80 83       	st	Z, r24
    2620:	04 c0       	rjmp	.+8      	; 0x262a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2622:	e1 e3       	ldi	r30, 0x31	; 49
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	80 83       	st	Z, r24
			break;
		}
	}
}
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	08 95       	ret

00002638 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	00 d0       	rcall	.+0      	; 0x263e <GPIO_writePort+0x6>
    263e:	00 d0       	rcall	.+0      	; 0x2640 <GPIO_writePort+0x8>
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	84 30       	cpi	r24, 0x04	; 4
    264c:	90 f5       	brcc	.+100    	; 0x26b2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	3c 83       	std	Y+4, r19	; 0x04
    2656:	2b 83       	std	Y+3, r18	; 0x03
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	9c 81       	ldd	r25, Y+4	; 0x04
    265c:	81 30       	cpi	r24, 0x01	; 1
    265e:	91 05       	cpc	r25, r1
    2660:	d1 f0       	breq	.+52     	; 0x2696 <GPIO_writePort+0x5e>
    2662:	2b 81       	ldd	r18, Y+3	; 0x03
    2664:	3c 81       	ldd	r19, Y+4	; 0x04
    2666:	22 30       	cpi	r18, 0x02	; 2
    2668:	31 05       	cpc	r19, r1
    266a:	2c f4       	brge	.+10     	; 0x2676 <GPIO_writePort+0x3e>
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	61 f0       	breq	.+24     	; 0x268c <GPIO_writePort+0x54>
    2674:	1e c0       	rjmp	.+60     	; 0x26b2 <GPIO_writePort+0x7a>
    2676:	2b 81       	ldd	r18, Y+3	; 0x03
    2678:	3c 81       	ldd	r19, Y+4	; 0x04
    267a:	22 30       	cpi	r18, 0x02	; 2
    267c:	31 05       	cpc	r19, r1
    267e:	81 f0       	breq	.+32     	; 0x26a0 <GPIO_writePort+0x68>
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	9c 81       	ldd	r25, Y+4	; 0x04
    2684:	83 30       	cpi	r24, 0x03	; 3
    2686:	91 05       	cpc	r25, r1
    2688:	81 f0       	breq	.+32     	; 0x26aa <GPIO_writePort+0x72>
    268a:	13 c0       	rjmp	.+38     	; 0x26b2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    268c:	eb e3       	ldi	r30, 0x3B	; 59
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	80 83       	st	Z, r24
    2694:	0e c0       	rjmp	.+28     	; 0x26b2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2696:	e8 e3       	ldi	r30, 0x38	; 56
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	80 83       	st	Z, r24
    269e:	09 c0       	rjmp	.+18     	; 0x26b2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    26a0:	e5 e3       	ldi	r30, 0x35	; 53
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	80 83       	st	Z, r24
    26a8:	04 c0       	rjmp	.+8      	; 0x26b2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    26aa:	e2 e3       	ldi	r30, 0x32	; 50
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	80 83       	st	Z, r24
			break;
		}
	}
}
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <GPIO_readPort+0x6>
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <GPIO_readPort+0x8>
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    26ce:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	84 30       	cpi	r24, 0x04	; 4
    26d4:	90 f5       	brcc	.+100    	; 0x273a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    26d6:	8a 81       	ldd	r24, Y+2	; 0x02
    26d8:	28 2f       	mov	r18, r24
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	3c 83       	std	Y+4, r19	; 0x04
    26de:	2b 83       	std	Y+3, r18	; 0x03
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	9c 81       	ldd	r25, Y+4	; 0x04
    26e4:	81 30       	cpi	r24, 0x01	; 1
    26e6:	91 05       	cpc	r25, r1
    26e8:	d1 f0       	breq	.+52     	; 0x271e <GPIO_readPort+0x5e>
    26ea:	2b 81       	ldd	r18, Y+3	; 0x03
    26ec:	3c 81       	ldd	r19, Y+4	; 0x04
    26ee:	22 30       	cpi	r18, 0x02	; 2
    26f0:	31 05       	cpc	r19, r1
    26f2:	2c f4       	brge	.+10     	; 0x26fe <GPIO_readPort+0x3e>
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	9c 81       	ldd	r25, Y+4	; 0x04
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	61 f0       	breq	.+24     	; 0x2714 <GPIO_readPort+0x54>
    26fc:	1e c0       	rjmp	.+60     	; 0x273a <GPIO_readPort+0x7a>
    26fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2700:	3c 81       	ldd	r19, Y+4	; 0x04
    2702:	22 30       	cpi	r18, 0x02	; 2
    2704:	31 05       	cpc	r19, r1
    2706:	81 f0       	breq	.+32     	; 0x2728 <GPIO_readPort+0x68>
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	83 30       	cpi	r24, 0x03	; 3
    270e:	91 05       	cpc	r25, r1
    2710:	81 f0       	breq	.+32     	; 0x2732 <GPIO_readPort+0x72>
    2712:	13 c0       	rjmp	.+38     	; 0x273a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2714:	e9 e3       	ldi	r30, 0x39	; 57
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	0e c0       	rjmp	.+28     	; 0x273a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    271e:	e6 e3       	ldi	r30, 0x36	; 54
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	09 c0       	rjmp	.+18     	; 0x273a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2728:	e3 e3       	ldi	r30, 0x33	; 51
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	04 c0       	rjmp	.+8      	; 0x273a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2732:	e0 e3       	ldi	r30, 0x30	; 48
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    273a:	89 81       	ldd	r24, Y+1	; 0x01
}
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
    2752:	60 97       	sbiw	r28, 0x10	; 16
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	64 e0       	ldi	r22, 0x04	; 4
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	0e 94 67 10 	call	0x20ce	; 0x20ce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	65 e0       	ldi	r22, 0x05	; 5
    276c:	40 e0       	ldi	r20, 0x00	; 0
    276e:	0e 94 67 10 	call	0x20ce	; 0x20ce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	66 e0       	ldi	r22, 0x06	; 6
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	0e 94 67 10 	call	0x20ce	; 0x20ce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	67 e0       	ldi	r22, 0x07	; 7
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	0e 94 67 10 	call	0x20ce	; 0x20ce <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2786:	83 e0       	ldi	r24, 0x03	; 3
    2788:	62 e0       	ldi	r22, 0x02	; 2
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	0e 94 67 10 	call	0x20ce	; 0x20ce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2790:	83 e0       	ldi	r24, 0x03	; 3
    2792:	63 e0       	ldi	r22, 0x03	; 3
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	0e 94 67 10 	call	0x20ce	; 0x20ce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    279a:	83 e0       	ldi	r24, 0x03	; 3
    279c:	64 e0       	ldi	r22, 0x04	; 4
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	0e 94 67 10 	call	0x20ce	; 0x20ce <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    27a4:	83 e0       	ldi	r24, 0x03	; 3
    27a6:	65 e0       	ldi	r22, 0x05	; 5
    27a8:	40 e0       	ldi	r20, 0x00	; 0
    27aa:	0e 94 67 10 	call	0x20ce	; 0x20ce <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    27ae:	1f 86       	std	Y+15, r1	; 0x0f
    27b0:	b4 c0       	rjmp	.+360    	; 0x291a <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    27b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b4:	98 2f       	mov	r25, r24
    27b6:	9c 5f       	subi	r25, 0xFC	; 252
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	69 2f       	mov	r22, r25
    27bc:	41 e0       	ldi	r20, 0x01	; 1
    27be:	0e 94 67 10 	call	0x20ce	; 0x20ce <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    27c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c4:	98 2f       	mov	r25, r24
    27c6:	9c 5f       	subi	r25, 0xFC	; 252
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	69 2f       	mov	r22, r25
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	0e 94 52 11 	call	0x22a4	; 0x22a4 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    27d2:	18 8a       	std	Y+16, r1	; 0x10
    27d4:	22 c0       	rjmp	.+68     	; 0x281a <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    27d6:	88 89       	ldd	r24, Y+16	; 0x10
    27d8:	98 2f       	mov	r25, r24
    27da:	9e 5f       	subi	r25, 0xFE	; 254
    27dc:	83 e0       	ldi	r24, 0x03	; 3
    27de:	69 2f       	mov	r22, r25
    27e0:	0e 94 3d 12 	call	0x247a	; 0x247a <GPIO_readPin>
    27e4:	88 23       	and	r24, r24
    27e6:	b1 f4       	brne	.+44     	; 0x2814 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    27e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ea:	88 2f       	mov	r24, r24
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	88 0f       	add	r24, r24
    27f0:	99 1f       	adc	r25, r25
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	98 2f       	mov	r25, r24
    27f8:	88 89       	ldd	r24, Y+16	; 0x10
    27fa:	89 0f       	add	r24, r25
    27fc:	8f 5f       	subi	r24, 0xFF	; 255
    27fe:	0e 94 92 14 	call	0x2924	; 0x2924 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2802:	60 96       	adiw	r28, 0x10	; 16
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2814:	88 89       	ldd	r24, Y+16	; 0x10
    2816:	8f 5f       	subi	r24, 0xFF	; 255
    2818:	88 8b       	std	Y+16, r24	; 0x10
    281a:	88 89       	ldd	r24, Y+16	; 0x10
    281c:	84 30       	cpi	r24, 0x04	; 4
    281e:	d8 f2       	brcs	.-74     	; 0x27d6 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2820:	8f 85       	ldd	r24, Y+15	; 0x0f
    2822:	98 2f       	mov	r25, r24
    2824:	9c 5f       	subi	r25, 0xFC	; 252
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	69 2f       	mov	r22, r25
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	0e 94 67 10 	call	0x20ce	; 0x20ce <GPIO_setupPinDirection>
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	a0 e2       	ldi	r26, 0x20	; 32
    2836:	b1 e4       	ldi	r27, 0x41	; 65
    2838:	8b 87       	std	Y+11, r24	; 0x0b
    283a:	9c 87       	std	Y+12, r25	; 0x0c
    283c:	ad 87       	std	Y+13, r26	; 0x0d
    283e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2840:	6b 85       	ldd	r22, Y+11	; 0x0b
    2842:	7c 85       	ldd	r23, Y+12	; 0x0c
    2844:	8d 85       	ldd	r24, Y+13	; 0x0d
    2846:	9e 85       	ldd	r25, Y+14	; 0x0e
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	4a ef       	ldi	r20, 0xFA	; 250
    284e:	54 e4       	ldi	r21, 0x44	; 68
    2850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	8f 83       	std	Y+7, r24	; 0x07
    285a:	98 87       	std	Y+8, r25	; 0x08
    285c:	a9 87       	std	Y+9, r26	; 0x09
    285e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2860:	6f 81       	ldd	r22, Y+7	; 0x07
    2862:	78 85       	ldd	r23, Y+8	; 0x08
    2864:	89 85       	ldd	r24, Y+9	; 0x09
    2866:	9a 85       	ldd	r25, Y+10	; 0x0a
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	40 e8       	ldi	r20, 0x80	; 128
    286e:	5f e3       	ldi	r21, 0x3F	; 63
    2870:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2874:	88 23       	and	r24, r24
    2876:	2c f4       	brge	.+10     	; 0x2882 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	9e 83       	std	Y+6, r25	; 0x06
    287e:	8d 83       	std	Y+5, r24	; 0x05
    2880:	3f c0       	rjmp	.+126    	; 0x2900 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    2882:	6f 81       	ldd	r22, Y+7	; 0x07
    2884:	78 85       	ldd	r23, Y+8	; 0x08
    2886:	89 85       	ldd	r24, Y+9	; 0x09
    2888:	9a 85       	ldd	r25, Y+10	; 0x0a
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	3f ef       	ldi	r19, 0xFF	; 255
    288e:	4f e7       	ldi	r20, 0x7F	; 127
    2890:	57 e4       	ldi	r21, 0x47	; 71
    2892:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2896:	18 16       	cp	r1, r24
    2898:	4c f5       	brge	.+82     	; 0x28ec <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289a:	6b 85       	ldd	r22, Y+11	; 0x0b
    289c:	7c 85       	ldd	r23, Y+12	; 0x0c
    289e:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e2       	ldi	r20, 0x20	; 32
    28a8:	51 e4       	ldi	r21, 0x41	; 65
    28aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9e 83       	std	Y+6, r25	; 0x06
    28c0:	8d 83       	std	Y+5, r24	; 0x05
    28c2:	0f c0       	rjmp	.+30     	; 0x28e2 <KEYPAD_getPressedKey+0x198>
    28c4:	88 ec       	ldi	r24, 0xC8	; 200
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9c 83       	std	Y+4, r25	; 0x04
    28ca:	8b 83       	std	Y+3, r24	; 0x03
    28cc:	8b 81       	ldd	r24, Y+3	; 0x03
    28ce:	9c 81       	ldd	r25, Y+4	; 0x04
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <KEYPAD_getPressedKey+0x186>
    28d4:	9c 83       	std	Y+4, r25	; 0x04
    28d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d8:	8d 81       	ldd	r24, Y+5	; 0x05
    28da:	9e 81       	ldd	r25, Y+6	; 0x06
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	9e 83       	std	Y+6, r25	; 0x06
    28e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e2:	8d 81       	ldd	r24, Y+5	; 0x05
    28e4:	9e 81       	ldd	r25, Y+6	; 0x06
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	69 f7       	brne	.-38     	; 0x28c4 <KEYPAD_getPressedKey+0x17a>
    28ea:	14 c0       	rjmp	.+40     	; 0x2914 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ec:	6f 81       	ldd	r22, Y+7	; 0x07
    28ee:	78 85       	ldd	r23, Y+8	; 0x08
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	9e 83       	std	Y+6, r25	; 0x06
    28fe:	8d 83       	std	Y+5, r24	; 0x05
    2900:	8d 81       	ldd	r24, Y+5	; 0x05
    2902:	9e 81       	ldd	r25, Y+6	; 0x06
    2904:	9a 83       	std	Y+2, r25	; 0x02
    2906:	89 83       	std	Y+1, r24	; 0x01
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	9a 81       	ldd	r25, Y+2	; 0x02
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <KEYPAD_getPressedKey+0x1c2>
    2910:	9a 83       	std	Y+2, r25	; 0x02
    2912:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2914:	8f 85       	ldd	r24, Y+15	; 0x0f
    2916:	8f 5f       	subi	r24, 0xFF	; 255
    2918:	8f 87       	std	Y+15, r24	; 0x0f
    291a:	8f 85       	ldd	r24, Y+15	; 0x0f
    291c:	84 30       	cpi	r24, 0x04	; 4
    291e:	08 f4       	brcc	.+2      	; 0x2922 <KEYPAD_getPressedKey+0x1d8>
    2920:	48 cf       	rjmp	.-368    	; 0x27b2 <KEYPAD_getPressedKey+0x68>
    2922:	45 cf       	rjmp	.-374    	; 0x27ae <KEYPAD_getPressedKey+0x64>

00002924 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	00 d0       	rcall	.+0      	; 0x292a <KEYPAD_4x4_adjustKeyNumber+0x6>
    292a:	00 d0       	rcall	.+0      	; 0x292c <KEYPAD_4x4_adjustKeyNumber+0x8>
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
    2930:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2932:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2934:	8a 81       	ldd	r24, Y+2	; 0x02
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	3c 83       	std	Y+4, r19	; 0x04
    293c:	2b 83       	std	Y+3, r18	; 0x03
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	9c 81       	ldd	r25, Y+4	; 0x04
    2942:	88 30       	cpi	r24, 0x08	; 8
    2944:	91 05       	cpc	r25, r1
    2946:	09 f4       	brne	.+2      	; 0x294a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2948:	70 c0       	rjmp	.+224    	; 0x2a2a <KEYPAD_4x4_adjustKeyNumber+0x106>
    294a:	2b 81       	ldd	r18, Y+3	; 0x03
    294c:	3c 81       	ldd	r19, Y+4	; 0x04
    294e:	29 30       	cpi	r18, 0x09	; 9
    2950:	31 05       	cpc	r19, r1
    2952:	5c f5       	brge	.+86     	; 0x29aa <KEYPAD_4x4_adjustKeyNumber+0x86>
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	9c 81       	ldd	r25, Y+4	; 0x04
    2958:	84 30       	cpi	r24, 0x04	; 4
    295a:	91 05       	cpc	r25, r1
    295c:	09 f4       	brne	.+2      	; 0x2960 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    295e:	59 c0       	rjmp	.+178    	; 0x2a12 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2960:	2b 81       	ldd	r18, Y+3	; 0x03
    2962:	3c 81       	ldd	r19, Y+4	; 0x04
    2964:	25 30       	cpi	r18, 0x05	; 5
    2966:	31 05       	cpc	r19, r1
    2968:	9c f4       	brge	.+38     	; 0x2990 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	9c 81       	ldd	r25, Y+4	; 0x04
    296e:	82 30       	cpi	r24, 0x02	; 2
    2970:	91 05       	cpc	r25, r1
    2972:	09 f4       	brne	.+2      	; 0x2976 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2974:	48 c0       	rjmp	.+144    	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2976:	2b 81       	ldd	r18, Y+3	; 0x03
    2978:	3c 81       	ldd	r19, Y+4	; 0x04
    297a:	23 30       	cpi	r18, 0x03	; 3
    297c:	31 05       	cpc	r19, r1
    297e:	0c f0       	brlt	.+2      	; 0x2982 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2980:	45 c0       	rjmp	.+138    	; 0x2a0c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	9c 81       	ldd	r25, Y+4	; 0x04
    2986:	81 30       	cpi	r24, 0x01	; 1
    2988:	91 05       	cpc	r25, r1
    298a:	09 f4       	brne	.+2      	; 0x298e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    298c:	39 c0       	rjmp	.+114    	; 0x2a00 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    298e:	67 c0       	rjmp	.+206    	; 0x2a5e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2990:	2b 81       	ldd	r18, Y+3	; 0x03
    2992:	3c 81       	ldd	r19, Y+4	; 0x04
    2994:	26 30       	cpi	r18, 0x06	; 6
    2996:	31 05       	cpc	r19, r1
    2998:	09 f4       	brne	.+2      	; 0x299c <KEYPAD_4x4_adjustKeyNumber+0x78>
    299a:	41 c0       	rjmp	.+130    	; 0x2a1e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    299c:	8b 81       	ldd	r24, Y+3	; 0x03
    299e:	9c 81       	ldd	r25, Y+4	; 0x04
    29a0:	87 30       	cpi	r24, 0x07	; 7
    29a2:	91 05       	cpc	r25, r1
    29a4:	0c f0       	brlt	.+2      	; 0x29a8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    29a6:	3e c0       	rjmp	.+124    	; 0x2a24 <KEYPAD_4x4_adjustKeyNumber+0x100>
    29a8:	37 c0       	rjmp	.+110    	; 0x2a18 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    29aa:	2b 81       	ldd	r18, Y+3	; 0x03
    29ac:	3c 81       	ldd	r19, Y+4	; 0x04
    29ae:	2c 30       	cpi	r18, 0x0C	; 12
    29b0:	31 05       	cpc	r19, r1
    29b2:	09 f4       	brne	.+2      	; 0x29b6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    29b4:	46 c0       	rjmp	.+140    	; 0x2a42 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ba:	8d 30       	cpi	r24, 0x0D	; 13
    29bc:	91 05       	cpc	r25, r1
    29be:	5c f4       	brge	.+22     	; 0x29d6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    29c0:	2b 81       	ldd	r18, Y+3	; 0x03
    29c2:	3c 81       	ldd	r19, Y+4	; 0x04
    29c4:	2a 30       	cpi	r18, 0x0A	; 10
    29c6:	31 05       	cpc	r19, r1
    29c8:	b1 f1       	breq	.+108    	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x112>
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	9c 81       	ldd	r25, Y+4	; 0x04
    29ce:	8b 30       	cpi	r24, 0x0B	; 11
    29d0:	91 05       	cpc	r25, r1
    29d2:	a4 f5       	brge	.+104    	; 0x2a3c <KEYPAD_4x4_adjustKeyNumber+0x118>
    29d4:	2d c0       	rjmp	.+90     	; 0x2a30 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    29d6:	2b 81       	ldd	r18, Y+3	; 0x03
    29d8:	3c 81       	ldd	r19, Y+4	; 0x04
    29da:	2e 30       	cpi	r18, 0x0E	; 14
    29dc:	31 05       	cpc	r19, r1
    29de:	b9 f1       	breq	.+110    	; 0x2a4e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	9c 81       	ldd	r25, Y+4	; 0x04
    29e4:	8e 30       	cpi	r24, 0x0E	; 14
    29e6:	91 05       	cpc	r25, r1
    29e8:	7c f1       	brlt	.+94     	; 0x2a48 <KEYPAD_4x4_adjustKeyNumber+0x124>
    29ea:	2b 81       	ldd	r18, Y+3	; 0x03
    29ec:	3c 81       	ldd	r19, Y+4	; 0x04
    29ee:	2f 30       	cpi	r18, 0x0F	; 15
    29f0:	31 05       	cpc	r19, r1
    29f2:	79 f1       	breq	.+94     	; 0x2a52 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    29f4:	8b 81       	ldd	r24, Y+3	; 0x03
    29f6:	9c 81       	ldd	r25, Y+4	; 0x04
    29f8:	80 31       	cpi	r24, 0x10	; 16
    29fa:	91 05       	cpc	r25, r1
    29fc:	69 f1       	breq	.+90     	; 0x2a58 <KEYPAD_4x4_adjustKeyNumber+0x134>
    29fe:	2f c0       	rjmp	.+94     	; 0x2a5e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2a00:	87 e0       	ldi	r24, 0x07	; 7
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	2e c0       	rjmp	.+92     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2a06:	88 e0       	ldi	r24, 0x08	; 8
    2a08:	89 83       	std	Y+1, r24	; 0x01
    2a0a:	2b c0       	rjmp	.+86     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2a0c:	89 e0       	ldi	r24, 0x09	; 9
    2a0e:	89 83       	std	Y+1, r24	; 0x01
    2a10:	28 c0       	rjmp	.+80     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2a12:	85 e2       	ldi	r24, 0x25	; 37
    2a14:	89 83       	std	Y+1, r24	; 0x01
    2a16:	25 c0       	rjmp	.+74     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2a18:	84 e0       	ldi	r24, 0x04	; 4
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	22 c0       	rjmp	.+68     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2a1e:	85 e0       	ldi	r24, 0x05	; 5
    2a20:	89 83       	std	Y+1, r24	; 0x01
    2a22:	1f c0       	rjmp	.+62     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2a24:	86 e0       	ldi	r24, 0x06	; 6
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	1c c0       	rjmp	.+56     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2a2a:	8a e2       	ldi	r24, 0x2A	; 42
    2a2c:	89 83       	std	Y+1, r24	; 0x01
    2a2e:	19 c0       	rjmp	.+50     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	89 83       	std	Y+1, r24	; 0x01
    2a34:	16 c0       	rjmp	.+44     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2a36:	82 e0       	ldi	r24, 0x02	; 2
    2a38:	89 83       	std	Y+1, r24	; 0x01
    2a3a:	13 c0       	rjmp	.+38     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2a3c:	83 e0       	ldi	r24, 0x03	; 3
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	10 c0       	rjmp	.+32     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2a42:	8d e2       	ldi	r24, 0x2D	; 45
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	0d c0       	rjmp	.+26     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2a48:	8d e0       	ldi	r24, 0x0D	; 13
    2a4a:	89 83       	std	Y+1, r24	; 0x01
    2a4c:	0a c0       	rjmp	.+20     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2a4e:	19 82       	std	Y+1, r1	; 0x01
    2a50:	08 c0       	rjmp	.+16     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2a52:	8d e3       	ldi	r24, 0x3D	; 61
    2a54:	89 83       	std	Y+1, r24	; 0x01
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2a58:	8b e2       	ldi	r24, 0x2B	; 43
    2a5a:	89 83       	std	Y+1, r24	; 0x01
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	2e 97       	sbiw	r28, 0x0e	; 14
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	60 e0       	ldi	r22, 0x00	; 0
    2a8a:	41 e0       	ldi	r20, 0x01	; 1
    2a8c:	0e 94 67 10 	call	0x20ce	; 0x20ce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	61 e0       	ldi	r22, 0x01	; 1
    2a94:	41 e0       	ldi	r20, 0x01	; 1
    2a96:	0e 94 67 10 	call	0x20ce	; 0x20ce <GPIO_setupPinDirection>
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a0 ea       	ldi	r26, 0xA0	; 160
    2aa0:	b1 e4       	ldi	r27, 0x41	; 65
    2aa2:	8b 87       	std	Y+11, r24	; 0x0b
    2aa4:	9c 87       	std	Y+12, r25	; 0x0c
    2aa6:	ad 87       	std	Y+13, r26	; 0x0d
    2aa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	4a ef       	ldi	r20, 0xFA	; 250
    2ab8:	54 e4       	ldi	r21, 0x44	; 68
    2aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	8f 83       	std	Y+7, r24	; 0x07
    2ac4:	98 87       	std	Y+8, r25	; 0x08
    2ac6:	a9 87       	std	Y+9, r26	; 0x09
    2ac8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aca:	6f 81       	ldd	r22, Y+7	; 0x07
    2acc:	78 85       	ldd	r23, Y+8	; 0x08
    2ace:	89 85       	ldd	r24, Y+9	; 0x09
    2ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e8       	ldi	r20, 0x80	; 128
    2ad8:	5f e3       	ldi	r21, 0x3F	; 63
    2ada:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ade:	88 23       	and	r24, r24
    2ae0:	2c f4       	brge	.+10     	; 0x2aec <LCD_init+0x7a>
		__ticks = 1;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	9e 83       	std	Y+6, r25	; 0x06
    2ae8:	8d 83       	std	Y+5, r24	; 0x05
    2aea:	3f c0       	rjmp	.+126    	; 0x2b6a <LCD_init+0xf8>
	else if (__tmp > 65535)
    2aec:	6f 81       	ldd	r22, Y+7	; 0x07
    2aee:	78 85       	ldd	r23, Y+8	; 0x08
    2af0:	89 85       	ldd	r24, Y+9	; 0x09
    2af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	3f ef       	ldi	r19, 0xFF	; 255
    2af8:	4f e7       	ldi	r20, 0x7F	; 127
    2afa:	57 e4       	ldi	r21, 0x47	; 71
    2afc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b00:	18 16       	cp	r1, r24
    2b02:	4c f5       	brge	.+82     	; 0x2b56 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e2       	ldi	r20, 0x20	; 32
    2b12:	51 e4       	ldi	r21, 0x41	; 65
    2b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	bc 01       	movw	r22, r24
    2b1e:	cd 01       	movw	r24, r26
    2b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	9e 83       	std	Y+6, r25	; 0x06
    2b2a:	8d 83       	std	Y+5, r24	; 0x05
    2b2c:	0f c0       	rjmp	.+30     	; 0x2b4c <LCD_init+0xda>
    2b2e:	88 ec       	ldi	r24, 0xC8	; 200
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	9c 83       	std	Y+4, r25	; 0x04
    2b34:	8b 83       	std	Y+3, r24	; 0x03
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <LCD_init+0xc8>
    2b3e:	9c 83       	std	Y+4, r25	; 0x04
    2b40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b42:	8d 81       	ldd	r24, Y+5	; 0x05
    2b44:	9e 81       	ldd	r25, Y+6	; 0x06
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	9e 83       	std	Y+6, r25	; 0x06
    2b4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b50:	00 97       	sbiw	r24, 0x00	; 0
    2b52:	69 f7       	brne	.-38     	; 0x2b2e <LCD_init+0xbc>
    2b54:	14 c0       	rjmp	.+40     	; 0x2b7e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b56:	6f 81       	ldd	r22, Y+7	; 0x07
    2b58:	78 85       	ldd	r23, Y+8	; 0x08
    2b5a:	89 85       	ldd	r24, Y+9	; 0x09
    2b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	9e 83       	std	Y+6, r25	; 0x06
    2b68:	8d 83       	std	Y+5, r24	; 0x05
    2b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6e:	9a 83       	std	Y+2, r25	; 0x02
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	9a 81       	ldd	r25, Y+2	; 0x02
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <LCD_init+0x104>
    2b7a:	9a 83       	std	Y+2, r25	; 0x02
    2b7c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	6f ef       	ldi	r22, 0xFF	; 255
    2b82:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2b86:	88 e3       	ldi	r24, 0x38	; 56
    2b88:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2b8c:	8c e0       	ldi	r24, 0x0C	; 12
    2b8e:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_sendCommand>
}
    2b98:	2e 96       	adiw	r28, 0x0e	; 14
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    2bb2:	e9 97       	sbiw	r28, 0x39	; 57
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	f8 94       	cli
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	cd bf       	out	0x3d, r28	; 61
    2bbe:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	60 e0       	ldi	r22, 0x00	; 0
    2bc4:	40 e0       	ldi	r20, 0x00	; 0
    2bc6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <GPIO_writePin>
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	a0 e8       	ldi	r26, 0x80	; 128
    2bd0:	bf e3       	ldi	r27, 0x3F	; 63
    2bd2:	8d ab       	std	Y+53, r24	; 0x35
    2bd4:	9e ab       	std	Y+54, r25	; 0x36
    2bd6:	af ab       	std	Y+55, r26	; 0x37
    2bd8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bda:	6d a9       	ldd	r22, Y+53	; 0x35
    2bdc:	7e a9       	ldd	r23, Y+54	; 0x36
    2bde:	8f a9       	ldd	r24, Y+55	; 0x37
    2be0:	98 ad       	ldd	r25, Y+56	; 0x38
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	4a ef       	ldi	r20, 0xFA	; 250
    2be8:	54 e4       	ldi	r21, 0x44	; 68
    2bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	89 ab       	std	Y+49, r24	; 0x31
    2bf4:	9a ab       	std	Y+50, r25	; 0x32
    2bf6:	ab ab       	std	Y+51, r26	; 0x33
    2bf8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bfa:	69 a9       	ldd	r22, Y+49	; 0x31
    2bfc:	7a a9       	ldd	r23, Y+50	; 0x32
    2bfe:	8b a9       	ldd	r24, Y+51	; 0x33
    2c00:	9c a9       	ldd	r25, Y+52	; 0x34
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	40 e8       	ldi	r20, 0x80	; 128
    2c08:	5f e3       	ldi	r21, 0x3F	; 63
    2c0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c0e:	88 23       	and	r24, r24
    2c10:	2c f4       	brge	.+10     	; 0x2c1c <LCD_sendCommand+0x72>
		__ticks = 1;
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	98 ab       	std	Y+48, r25	; 0x30
    2c18:	8f a7       	std	Y+47, r24	; 0x2f
    2c1a:	3f c0       	rjmp	.+126    	; 0x2c9a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2c1c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c1e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c20:	8b a9       	ldd	r24, Y+51	; 0x33
    2c22:	9c a9       	ldd	r25, Y+52	; 0x34
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	3f ef       	ldi	r19, 0xFF	; 255
    2c28:	4f e7       	ldi	r20, 0x7F	; 127
    2c2a:	57 e4       	ldi	r21, 0x47	; 71
    2c2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c30:	18 16       	cp	r1, r24
    2c32:	4c f5       	brge	.+82     	; 0x2c86 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c34:	6d a9       	ldd	r22, Y+53	; 0x35
    2c36:	7e a9       	ldd	r23, Y+54	; 0x36
    2c38:	8f a9       	ldd	r24, Y+55	; 0x37
    2c3a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e2       	ldi	r20, 0x20	; 32
    2c42:	51 e4       	ldi	r21, 0x41	; 65
    2c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	bc 01       	movw	r22, r24
    2c4e:	cd 01       	movw	r24, r26
    2c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	98 ab       	std	Y+48, r25	; 0x30
    2c5a:	8f a7       	std	Y+47, r24	; 0x2f
    2c5c:	0f c0       	rjmp	.+30     	; 0x2c7c <LCD_sendCommand+0xd2>
    2c5e:	88 ec       	ldi	r24, 0xC8	; 200
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	9e a7       	std	Y+46, r25	; 0x2e
    2c64:	8d a7       	std	Y+45, r24	; 0x2d
    2c66:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c68:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	f1 f7       	brne	.-4      	; 0x2c6a <LCD_sendCommand+0xc0>
    2c6e:	9e a7       	std	Y+46, r25	; 0x2e
    2c70:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c72:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c74:	98 a9       	ldd	r25, Y+48	; 0x30
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	98 ab       	std	Y+48, r25	; 0x30
    2c7a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c7e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c80:	00 97       	sbiw	r24, 0x00	; 0
    2c82:	69 f7       	brne	.-38     	; 0x2c5e <LCD_sendCommand+0xb4>
    2c84:	14 c0       	rjmp	.+40     	; 0x2cae <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c86:	69 a9       	ldd	r22, Y+49	; 0x31
    2c88:	7a a9       	ldd	r23, Y+50	; 0x32
    2c8a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c8c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	98 ab       	std	Y+48, r25	; 0x30
    2c98:	8f a7       	std	Y+47, r24	; 0x2f
    2c9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c9c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c9e:	9c a7       	std	Y+44, r25	; 0x2c
    2ca0:	8b a7       	std	Y+43, r24	; 0x2b
    2ca2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ca4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	f1 f7       	brne	.-4      	; 0x2ca6 <LCD_sendCommand+0xfc>
    2caa:	9c a7       	std	Y+44, r25	; 0x2c
    2cac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	61 e0       	ldi	r22, 0x01	; 1
    2cb2:	41 e0       	ldi	r20, 0x01	; 1
    2cb4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <GPIO_writePin>
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	a0 e8       	ldi	r26, 0x80	; 128
    2cbe:	bf e3       	ldi	r27, 0x3F	; 63
    2cc0:	8f a3       	std	Y+39, r24	; 0x27
    2cc2:	98 a7       	std	Y+40, r25	; 0x28
    2cc4:	a9 a7       	std	Y+41, r26	; 0x29
    2cc6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc8:	6f a1       	ldd	r22, Y+39	; 0x27
    2cca:	78 a5       	ldd	r23, Y+40	; 0x28
    2ccc:	89 a5       	ldd	r24, Y+41	; 0x29
    2cce:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	4a ef       	ldi	r20, 0xFA	; 250
    2cd6:	54 e4       	ldi	r21, 0x44	; 68
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	8b a3       	std	Y+35, r24	; 0x23
    2ce2:	9c a3       	std	Y+36, r25	; 0x24
    2ce4:	ad a3       	std	Y+37, r26	; 0x25
    2ce6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ce8:	6b a1       	ldd	r22, Y+35	; 0x23
    2cea:	7c a1       	ldd	r23, Y+36	; 0x24
    2cec:	8d a1       	ldd	r24, Y+37	; 0x25
    2cee:	9e a1       	ldd	r25, Y+38	; 0x26
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e8       	ldi	r20, 0x80	; 128
    2cf6:	5f e3       	ldi	r21, 0x3F	; 63
    2cf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cfc:	88 23       	and	r24, r24
    2cfe:	2c f4       	brge	.+10     	; 0x2d0a <LCD_sendCommand+0x160>
		__ticks = 1;
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	9a a3       	std	Y+34, r25	; 0x22
    2d06:	89 a3       	std	Y+33, r24	; 0x21
    2d08:	3f c0       	rjmp	.+126    	; 0x2d88 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2d0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d10:	9e a1       	ldd	r25, Y+38	; 0x26
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	3f ef       	ldi	r19, 0xFF	; 255
    2d16:	4f e7       	ldi	r20, 0x7F	; 127
    2d18:	57 e4       	ldi	r21, 0x47	; 71
    2d1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d1e:	18 16       	cp	r1, r24
    2d20:	4c f5       	brge	.+82     	; 0x2d74 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d22:	6f a1       	ldd	r22, Y+39	; 0x27
    2d24:	78 a5       	ldd	r23, Y+40	; 0x28
    2d26:	89 a5       	ldd	r24, Y+41	; 0x29
    2d28:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	40 e2       	ldi	r20, 0x20	; 32
    2d30:	51 e4       	ldi	r21, 0x41	; 65
    2d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	bc 01       	movw	r22, r24
    2d3c:	cd 01       	movw	r24, r26
    2d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	9a a3       	std	Y+34, r25	; 0x22
    2d48:	89 a3       	std	Y+33, r24	; 0x21
    2d4a:	0f c0       	rjmp	.+30     	; 0x2d6a <LCD_sendCommand+0x1c0>
    2d4c:	88 ec       	ldi	r24, 0xC8	; 200
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	98 a3       	std	Y+32, r25	; 0x20
    2d52:	8f 8f       	std	Y+31, r24	; 0x1f
    2d54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d56:	98 a1       	ldd	r25, Y+32	; 0x20
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <LCD_sendCommand+0x1ae>
    2d5c:	98 a3       	std	Y+32, r25	; 0x20
    2d5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d60:	89 a1       	ldd	r24, Y+33	; 0x21
    2d62:	9a a1       	ldd	r25, Y+34	; 0x22
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	9a a3       	std	Y+34, r25	; 0x22
    2d68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d6e:	00 97       	sbiw	r24, 0x00	; 0
    2d70:	69 f7       	brne	.-38     	; 0x2d4c <LCD_sendCommand+0x1a2>
    2d72:	14 c0       	rjmp	.+40     	; 0x2d9c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d74:	6b a1       	ldd	r22, Y+35	; 0x23
    2d76:	7c a1       	ldd	r23, Y+36	; 0x24
    2d78:	8d a1       	ldd	r24, Y+37	; 0x25
    2d7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	9a a3       	std	Y+34, r25	; 0x22
    2d86:	89 a3       	std	Y+33, r24	; 0x21
    2d88:	89 a1       	ldd	r24, Y+33	; 0x21
    2d8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d8c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d8e:	8d 8f       	std	Y+29, r24	; 0x1d
    2d90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	f1 f7       	brne	.-4      	; 0x2d94 <LCD_sendCommand+0x1ea>
    2d98:	9e 8f       	std	Y+30, r25	; 0x1e
    2d9a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	69 ad       	ldd	r22, Y+57	; 0x39
    2da0:	0e 94 1c 13 	call	0x2638	; 0x2638 <GPIO_writePort>
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	a0 e8       	ldi	r26, 0x80	; 128
    2daa:	bf e3       	ldi	r27, 0x3F	; 63
    2dac:	89 8f       	std	Y+25, r24	; 0x19
    2dae:	9a 8f       	std	Y+26, r25	; 0x1a
    2db0:	ab 8f       	std	Y+27, r26	; 0x1b
    2db2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db4:	69 8d       	ldd	r22, Y+25	; 0x19
    2db6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2db8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	4a ef       	ldi	r20, 0xFA	; 250
    2dc2:	54 e4       	ldi	r21, 0x44	; 68
    2dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	8d 8b       	std	Y+21, r24	; 0x15
    2dce:	9e 8b       	std	Y+22, r25	; 0x16
    2dd0:	af 8b       	std	Y+23, r26	; 0x17
    2dd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dda:	98 8d       	ldd	r25, Y+24	; 0x18
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e8       	ldi	r20, 0x80	; 128
    2de2:	5f e3       	ldi	r21, 0x3F	; 63
    2de4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2de8:	88 23       	and	r24, r24
    2dea:	2c f4       	brge	.+10     	; 0x2df6 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	9c 8b       	std	Y+20, r25	; 0x14
    2df2:	8b 8b       	std	Y+19, r24	; 0x13
    2df4:	3f c0       	rjmp	.+126    	; 0x2e74 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2df6:	6d 89       	ldd	r22, Y+21	; 0x15
    2df8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2dfc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	3f ef       	ldi	r19, 0xFF	; 255
    2e02:	4f e7       	ldi	r20, 0x7F	; 127
    2e04:	57 e4       	ldi	r21, 0x47	; 71
    2e06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e0a:	18 16       	cp	r1, r24
    2e0c:	4c f5       	brge	.+82     	; 0x2e60 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e0e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	40 e2       	ldi	r20, 0x20	; 32
    2e1c:	51 e4       	ldi	r21, 0x41	; 65
    2e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	bc 01       	movw	r22, r24
    2e28:	cd 01       	movw	r24, r26
    2e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	9c 8b       	std	Y+20, r25	; 0x14
    2e34:	8b 8b       	std	Y+19, r24	; 0x13
    2e36:	0f c0       	rjmp	.+30     	; 0x2e56 <LCD_sendCommand+0x2ac>
    2e38:	88 ec       	ldi	r24, 0xC8	; 200
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	9a 8b       	std	Y+18, r25	; 0x12
    2e3e:	89 8b       	std	Y+17, r24	; 0x11
    2e40:	89 89       	ldd	r24, Y+17	; 0x11
    2e42:	9a 89       	ldd	r25, Y+18	; 0x12
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <LCD_sendCommand+0x29a>
    2e48:	9a 8b       	std	Y+18, r25	; 0x12
    2e4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e50:	01 97       	sbiw	r24, 0x01	; 1
    2e52:	9c 8b       	std	Y+20, r25	; 0x14
    2e54:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e56:	8b 89       	ldd	r24, Y+19	; 0x13
    2e58:	9c 89       	ldd	r25, Y+20	; 0x14
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	69 f7       	brne	.-38     	; 0x2e38 <LCD_sendCommand+0x28e>
    2e5e:	14 c0       	rjmp	.+40     	; 0x2e88 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e60:	6d 89       	ldd	r22, Y+21	; 0x15
    2e62:	7e 89       	ldd	r23, Y+22	; 0x16
    2e64:	8f 89       	ldd	r24, Y+23	; 0x17
    2e66:	98 8d       	ldd	r25, Y+24	; 0x18
    2e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	9c 8b       	std	Y+20, r25	; 0x14
    2e72:	8b 8b       	std	Y+19, r24	; 0x13
    2e74:	8b 89       	ldd	r24, Y+19	; 0x13
    2e76:	9c 89       	ldd	r25, Y+20	; 0x14
    2e78:	98 8b       	std	Y+16, r25	; 0x10
    2e7a:	8f 87       	std	Y+15, r24	; 0x0f
    2e7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e7e:	98 89       	ldd	r25, Y+16	; 0x10
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	f1 f7       	brne	.-4      	; 0x2e80 <LCD_sendCommand+0x2d6>
    2e84:	98 8b       	std	Y+16, r25	; 0x10
    2e86:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	61 e0       	ldi	r22, 0x01	; 1
    2e8c:	40 e0       	ldi	r20, 0x00	; 0
    2e8e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <GPIO_writePin>
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	a0 e8       	ldi	r26, 0x80	; 128
    2e98:	bf e3       	ldi	r27, 0x3F	; 63
    2e9a:	8b 87       	std	Y+11, r24	; 0x0b
    2e9c:	9c 87       	std	Y+12, r25	; 0x0c
    2e9e:	ad 87       	std	Y+13, r26	; 0x0d
    2ea0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	4a ef       	ldi	r20, 0xFA	; 250
    2eb0:	54 e4       	ldi	r21, 0x44	; 68
    2eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	8f 83       	std	Y+7, r24	; 0x07
    2ebc:	98 87       	std	Y+8, r25	; 0x08
    2ebe:	a9 87       	std	Y+9, r26	; 0x09
    2ec0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec4:	78 85       	ldd	r23, Y+8	; 0x08
    2ec6:	89 85       	ldd	r24, Y+9	; 0x09
    2ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e8       	ldi	r20, 0x80	; 128
    2ed0:	5f e3       	ldi	r21, 0x3F	; 63
    2ed2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ed6:	88 23       	and	r24, r24
    2ed8:	2c f4       	brge	.+10     	; 0x2ee4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	9e 83       	std	Y+6, r25	; 0x06
    2ee0:	8d 83       	std	Y+5, r24	; 0x05
    2ee2:	3f c0       	rjmp	.+126    	; 0x2f62 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee6:	78 85       	ldd	r23, Y+8	; 0x08
    2ee8:	89 85       	ldd	r24, Y+9	; 0x09
    2eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	3f ef       	ldi	r19, 0xFF	; 255
    2ef0:	4f e7       	ldi	r20, 0x7F	; 127
    2ef2:	57 e4       	ldi	r21, 0x47	; 71
    2ef4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ef8:	18 16       	cp	r1, r24
    2efa:	4c f5       	brge	.+82     	; 0x2f4e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2efe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e2       	ldi	r20, 0x20	; 32
    2f0a:	51 e4       	ldi	r21, 0x41	; 65
    2f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	bc 01       	movw	r22, r24
    2f16:	cd 01       	movw	r24, r26
    2f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	9e 83       	std	Y+6, r25	; 0x06
    2f22:	8d 83       	std	Y+5, r24	; 0x05
    2f24:	0f c0       	rjmp	.+30     	; 0x2f44 <LCD_sendCommand+0x39a>
    2f26:	88 ec       	ldi	r24, 0xC8	; 200
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	9c 83       	std	Y+4, r25	; 0x04
    2f2c:	8b 83       	std	Y+3, r24	; 0x03
    2f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f30:	9c 81       	ldd	r25, Y+4	; 0x04
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	f1 f7       	brne	.-4      	; 0x2f32 <LCD_sendCommand+0x388>
    2f36:	9c 83       	std	Y+4, r25	; 0x04
    2f38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	9e 83       	std	Y+6, r25	; 0x06
    2f42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f44:	8d 81       	ldd	r24, Y+5	; 0x05
    2f46:	9e 81       	ldd	r25, Y+6	; 0x06
    2f48:	00 97       	sbiw	r24, 0x00	; 0
    2f4a:	69 f7       	brne	.-38     	; 0x2f26 <LCD_sendCommand+0x37c>
    2f4c:	14 c0       	rjmp	.+40     	; 0x2f76 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f50:	78 85       	ldd	r23, Y+8	; 0x08
    2f52:	89 85       	ldd	r24, Y+9	; 0x09
    2f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	9e 83       	std	Y+6, r25	; 0x06
    2f60:	8d 83       	std	Y+5, r24	; 0x05
    2f62:	8d 81       	ldd	r24, Y+5	; 0x05
    2f64:	9e 81       	ldd	r25, Y+6	; 0x06
    2f66:	9a 83       	std	Y+2, r25	; 0x02
    2f68:	89 83       	std	Y+1, r24	; 0x01
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	f1 f7       	brne	.-4      	; 0x2f6e <LCD_sendCommand+0x3c4>
    2f72:	9a 83       	std	Y+2, r25	; 0x02
    2f74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2f76:	e9 96       	adiw	r28, 0x39	; 57
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	08 95       	ret

00002f88 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
    2f90:	e9 97       	sbiw	r28, 0x39	; 57
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	60 e0       	ldi	r22, 0x00	; 0
    2fa2:	41 e0       	ldi	r20, 0x01	; 1
    2fa4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <GPIO_writePin>
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	a0 e8       	ldi	r26, 0x80	; 128
    2fae:	bf e3       	ldi	r27, 0x3F	; 63
    2fb0:	8d ab       	std	Y+53, r24	; 0x35
    2fb2:	9e ab       	std	Y+54, r25	; 0x36
    2fb4:	af ab       	std	Y+55, r26	; 0x37
    2fb6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb8:	6d a9       	ldd	r22, Y+53	; 0x35
    2fba:	7e a9       	ldd	r23, Y+54	; 0x36
    2fbc:	8f a9       	ldd	r24, Y+55	; 0x37
    2fbe:	98 ad       	ldd	r25, Y+56	; 0x38
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	4a ef       	ldi	r20, 0xFA	; 250
    2fc6:	54 e4       	ldi	r21, 0x44	; 68
    2fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	89 ab       	std	Y+49, r24	; 0x31
    2fd2:	9a ab       	std	Y+50, r25	; 0x32
    2fd4:	ab ab       	std	Y+51, r26	; 0x33
    2fd6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fd8:	69 a9       	ldd	r22, Y+49	; 0x31
    2fda:	7a a9       	ldd	r23, Y+50	; 0x32
    2fdc:	8b a9       	ldd	r24, Y+51	; 0x33
    2fde:	9c a9       	ldd	r25, Y+52	; 0x34
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	40 e8       	ldi	r20, 0x80	; 128
    2fe6:	5f e3       	ldi	r21, 0x3F	; 63
    2fe8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fec:	88 23       	and	r24, r24
    2fee:	2c f4       	brge	.+10     	; 0x2ffa <LCD_displayCharacter+0x72>
		__ticks = 1;
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	98 ab       	std	Y+48, r25	; 0x30
    2ff6:	8f a7       	std	Y+47, r24	; 0x2f
    2ff8:	3f c0       	rjmp	.+126    	; 0x3078 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2ffa:	69 a9       	ldd	r22, Y+49	; 0x31
    2ffc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ffe:	8b a9       	ldd	r24, Y+51	; 0x33
    3000:	9c a9       	ldd	r25, Y+52	; 0x34
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	3f ef       	ldi	r19, 0xFF	; 255
    3006:	4f e7       	ldi	r20, 0x7F	; 127
    3008:	57 e4       	ldi	r21, 0x47	; 71
    300a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    300e:	18 16       	cp	r1, r24
    3010:	4c f5       	brge	.+82     	; 0x3064 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3012:	6d a9       	ldd	r22, Y+53	; 0x35
    3014:	7e a9       	ldd	r23, Y+54	; 0x36
    3016:	8f a9       	ldd	r24, Y+55	; 0x37
    3018:	98 ad       	ldd	r25, Y+56	; 0x38
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	40 e2       	ldi	r20, 0x20	; 32
    3020:	51 e4       	ldi	r21, 0x41	; 65
    3022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	bc 01       	movw	r22, r24
    302c:	cd 01       	movw	r24, r26
    302e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	98 ab       	std	Y+48, r25	; 0x30
    3038:	8f a7       	std	Y+47, r24	; 0x2f
    303a:	0f c0       	rjmp	.+30     	; 0x305a <LCD_displayCharacter+0xd2>
    303c:	88 ec       	ldi	r24, 0xC8	; 200
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	9e a7       	std	Y+46, r25	; 0x2e
    3042:	8d a7       	std	Y+45, r24	; 0x2d
    3044:	8d a5       	ldd	r24, Y+45	; 0x2d
    3046:	9e a5       	ldd	r25, Y+46	; 0x2e
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	f1 f7       	brne	.-4      	; 0x3048 <LCD_displayCharacter+0xc0>
    304c:	9e a7       	std	Y+46, r25	; 0x2e
    304e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3050:	8f a5       	ldd	r24, Y+47	; 0x2f
    3052:	98 a9       	ldd	r25, Y+48	; 0x30
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	98 ab       	std	Y+48, r25	; 0x30
    3058:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305a:	8f a5       	ldd	r24, Y+47	; 0x2f
    305c:	98 a9       	ldd	r25, Y+48	; 0x30
    305e:	00 97       	sbiw	r24, 0x00	; 0
    3060:	69 f7       	brne	.-38     	; 0x303c <LCD_displayCharacter+0xb4>
    3062:	14 c0       	rjmp	.+40     	; 0x308c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3064:	69 a9       	ldd	r22, Y+49	; 0x31
    3066:	7a a9       	ldd	r23, Y+50	; 0x32
    3068:	8b a9       	ldd	r24, Y+51	; 0x33
    306a:	9c a9       	ldd	r25, Y+52	; 0x34
    306c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	98 ab       	std	Y+48, r25	; 0x30
    3076:	8f a7       	std	Y+47, r24	; 0x2f
    3078:	8f a5       	ldd	r24, Y+47	; 0x2f
    307a:	98 a9       	ldd	r25, Y+48	; 0x30
    307c:	9c a7       	std	Y+44, r25	; 0x2c
    307e:	8b a7       	std	Y+43, r24	; 0x2b
    3080:	8b a5       	ldd	r24, Y+43	; 0x2b
    3082:	9c a5       	ldd	r25, Y+44	; 0x2c
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	f1 f7       	brne	.-4      	; 0x3084 <LCD_displayCharacter+0xfc>
    3088:	9c a7       	std	Y+44, r25	; 0x2c
    308a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	61 e0       	ldi	r22, 0x01	; 1
    3090:	41 e0       	ldi	r20, 0x01	; 1
    3092:	0e 94 52 11 	call	0x22a4	; 0x22a4 <GPIO_writePin>
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	a0 e8       	ldi	r26, 0x80	; 128
    309c:	bf e3       	ldi	r27, 0x3F	; 63
    309e:	8f a3       	std	Y+39, r24	; 0x27
    30a0:	98 a7       	std	Y+40, r25	; 0x28
    30a2:	a9 a7       	std	Y+41, r26	; 0x29
    30a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a6:	6f a1       	ldd	r22, Y+39	; 0x27
    30a8:	78 a5       	ldd	r23, Y+40	; 0x28
    30aa:	89 a5       	ldd	r24, Y+41	; 0x29
    30ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	4a ef       	ldi	r20, 0xFA	; 250
    30b4:	54 e4       	ldi	r21, 0x44	; 68
    30b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	8b a3       	std	Y+35, r24	; 0x23
    30c0:	9c a3       	std	Y+36, r25	; 0x24
    30c2:	ad a3       	std	Y+37, r26	; 0x25
    30c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30c6:	6b a1       	ldd	r22, Y+35	; 0x23
    30c8:	7c a1       	ldd	r23, Y+36	; 0x24
    30ca:	8d a1       	ldd	r24, Y+37	; 0x25
    30cc:	9e a1       	ldd	r25, Y+38	; 0x26
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	40 e8       	ldi	r20, 0x80	; 128
    30d4:	5f e3       	ldi	r21, 0x3F	; 63
    30d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30da:	88 23       	and	r24, r24
    30dc:	2c f4       	brge	.+10     	; 0x30e8 <LCD_displayCharacter+0x160>
		__ticks = 1;
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	9a a3       	std	Y+34, r25	; 0x22
    30e4:	89 a3       	std	Y+33, r24	; 0x21
    30e6:	3f c0       	rjmp	.+126    	; 0x3166 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    30e8:	6b a1       	ldd	r22, Y+35	; 0x23
    30ea:	7c a1       	ldd	r23, Y+36	; 0x24
    30ec:	8d a1       	ldd	r24, Y+37	; 0x25
    30ee:	9e a1       	ldd	r25, Y+38	; 0x26
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	3f ef       	ldi	r19, 0xFF	; 255
    30f4:	4f e7       	ldi	r20, 0x7F	; 127
    30f6:	57 e4       	ldi	r21, 0x47	; 71
    30f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30fc:	18 16       	cp	r1, r24
    30fe:	4c f5       	brge	.+82     	; 0x3152 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3100:	6f a1       	ldd	r22, Y+39	; 0x27
    3102:	78 a5       	ldd	r23, Y+40	; 0x28
    3104:	89 a5       	ldd	r24, Y+41	; 0x29
    3106:	9a a5       	ldd	r25, Y+42	; 0x2a
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e2       	ldi	r20, 0x20	; 32
    310e:	51 e4       	ldi	r21, 0x41	; 65
    3110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	bc 01       	movw	r22, r24
    311a:	cd 01       	movw	r24, r26
    311c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	9a a3       	std	Y+34, r25	; 0x22
    3126:	89 a3       	std	Y+33, r24	; 0x21
    3128:	0f c0       	rjmp	.+30     	; 0x3148 <LCD_displayCharacter+0x1c0>
    312a:	88 ec       	ldi	r24, 0xC8	; 200
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	98 a3       	std	Y+32, r25	; 0x20
    3130:	8f 8f       	std	Y+31, r24	; 0x1f
    3132:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3134:	98 a1       	ldd	r25, Y+32	; 0x20
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	f1 f7       	brne	.-4      	; 0x3136 <LCD_displayCharacter+0x1ae>
    313a:	98 a3       	std	Y+32, r25	; 0x20
    313c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313e:	89 a1       	ldd	r24, Y+33	; 0x21
    3140:	9a a1       	ldd	r25, Y+34	; 0x22
    3142:	01 97       	sbiw	r24, 0x01	; 1
    3144:	9a a3       	std	Y+34, r25	; 0x22
    3146:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3148:	89 a1       	ldd	r24, Y+33	; 0x21
    314a:	9a a1       	ldd	r25, Y+34	; 0x22
    314c:	00 97       	sbiw	r24, 0x00	; 0
    314e:	69 f7       	brne	.-38     	; 0x312a <LCD_displayCharacter+0x1a2>
    3150:	14 c0       	rjmp	.+40     	; 0x317a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3152:	6b a1       	ldd	r22, Y+35	; 0x23
    3154:	7c a1       	ldd	r23, Y+36	; 0x24
    3156:	8d a1       	ldd	r24, Y+37	; 0x25
    3158:	9e a1       	ldd	r25, Y+38	; 0x26
    315a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	9a a3       	std	Y+34, r25	; 0x22
    3164:	89 a3       	std	Y+33, r24	; 0x21
    3166:	89 a1       	ldd	r24, Y+33	; 0x21
    3168:	9a a1       	ldd	r25, Y+34	; 0x22
    316a:	9e 8f       	std	Y+30, r25	; 0x1e
    316c:	8d 8f       	std	Y+29, r24	; 0x1d
    316e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3170:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	f1 f7       	brne	.-4      	; 0x3172 <LCD_displayCharacter+0x1ea>
    3176:	9e 8f       	std	Y+30, r25	; 0x1e
    3178:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	69 ad       	ldd	r22, Y+57	; 0x39
    317e:	0e 94 1c 13 	call	0x2638	; 0x2638 <GPIO_writePort>
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	a0 e8       	ldi	r26, 0x80	; 128
    3188:	bf e3       	ldi	r27, 0x3F	; 63
    318a:	89 8f       	std	Y+25, r24	; 0x19
    318c:	9a 8f       	std	Y+26, r25	; 0x1a
    318e:	ab 8f       	std	Y+27, r26	; 0x1b
    3190:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3192:	69 8d       	ldd	r22, Y+25	; 0x19
    3194:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3196:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3198:	9c 8d       	ldd	r25, Y+28	; 0x1c
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	4a ef       	ldi	r20, 0xFA	; 250
    31a0:	54 e4       	ldi	r21, 0x44	; 68
    31a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	8d 8b       	std	Y+21, r24	; 0x15
    31ac:	9e 8b       	std	Y+22, r25	; 0x16
    31ae:	af 8b       	std	Y+23, r26	; 0x17
    31b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31b2:	6d 89       	ldd	r22, Y+21	; 0x15
    31b4:	7e 89       	ldd	r23, Y+22	; 0x16
    31b6:	8f 89       	ldd	r24, Y+23	; 0x17
    31b8:	98 8d       	ldd	r25, Y+24	; 0x18
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	40 e8       	ldi	r20, 0x80	; 128
    31c0:	5f e3       	ldi	r21, 0x3F	; 63
    31c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31c6:	88 23       	and	r24, r24
    31c8:	2c f4       	brge	.+10     	; 0x31d4 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	9c 8b       	std	Y+20, r25	; 0x14
    31d0:	8b 8b       	std	Y+19, r24	; 0x13
    31d2:	3f c0       	rjmp	.+126    	; 0x3252 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    31d4:	6d 89       	ldd	r22, Y+21	; 0x15
    31d6:	7e 89       	ldd	r23, Y+22	; 0x16
    31d8:	8f 89       	ldd	r24, Y+23	; 0x17
    31da:	98 8d       	ldd	r25, Y+24	; 0x18
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	3f ef       	ldi	r19, 0xFF	; 255
    31e0:	4f e7       	ldi	r20, 0x7F	; 127
    31e2:	57 e4       	ldi	r21, 0x47	; 71
    31e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31e8:	18 16       	cp	r1, r24
    31ea:	4c f5       	brge	.+82     	; 0x323e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ec:	69 8d       	ldd	r22, Y+25	; 0x19
    31ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e2       	ldi	r20, 0x20	; 32
    31fa:	51 e4       	ldi	r21, 0x41	; 65
    31fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	bc 01       	movw	r22, r24
    3206:	cd 01       	movw	r24, r26
    3208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	9c 8b       	std	Y+20, r25	; 0x14
    3212:	8b 8b       	std	Y+19, r24	; 0x13
    3214:	0f c0       	rjmp	.+30     	; 0x3234 <LCD_displayCharacter+0x2ac>
    3216:	88 ec       	ldi	r24, 0xC8	; 200
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	9a 8b       	std	Y+18, r25	; 0x12
    321c:	89 8b       	std	Y+17, r24	; 0x11
    321e:	89 89       	ldd	r24, Y+17	; 0x11
    3220:	9a 89       	ldd	r25, Y+18	; 0x12
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <LCD_displayCharacter+0x29a>
    3226:	9a 8b       	std	Y+18, r25	; 0x12
    3228:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322a:	8b 89       	ldd	r24, Y+19	; 0x13
    322c:	9c 89       	ldd	r25, Y+20	; 0x14
    322e:	01 97       	sbiw	r24, 0x01	; 1
    3230:	9c 8b       	std	Y+20, r25	; 0x14
    3232:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3234:	8b 89       	ldd	r24, Y+19	; 0x13
    3236:	9c 89       	ldd	r25, Y+20	; 0x14
    3238:	00 97       	sbiw	r24, 0x00	; 0
    323a:	69 f7       	brne	.-38     	; 0x3216 <LCD_displayCharacter+0x28e>
    323c:	14 c0       	rjmp	.+40     	; 0x3266 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    323e:	6d 89       	ldd	r22, Y+21	; 0x15
    3240:	7e 89       	ldd	r23, Y+22	; 0x16
    3242:	8f 89       	ldd	r24, Y+23	; 0x17
    3244:	98 8d       	ldd	r25, Y+24	; 0x18
    3246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	9c 8b       	std	Y+20, r25	; 0x14
    3250:	8b 8b       	std	Y+19, r24	; 0x13
    3252:	8b 89       	ldd	r24, Y+19	; 0x13
    3254:	9c 89       	ldd	r25, Y+20	; 0x14
    3256:	98 8b       	std	Y+16, r25	; 0x10
    3258:	8f 87       	std	Y+15, r24	; 0x0f
    325a:	8f 85       	ldd	r24, Y+15	; 0x0f
    325c:	98 89       	ldd	r25, Y+16	; 0x10
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	f1 f7       	brne	.-4      	; 0x325e <LCD_displayCharacter+0x2d6>
    3262:	98 8b       	std	Y+16, r25	; 0x10
    3264:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	61 e0       	ldi	r22, 0x01	; 1
    326a:	40 e0       	ldi	r20, 0x00	; 0
    326c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <GPIO_writePin>
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	a0 e8       	ldi	r26, 0x80	; 128
    3276:	bf e3       	ldi	r27, 0x3F	; 63
    3278:	8b 87       	std	Y+11, r24	; 0x0b
    327a:	9c 87       	std	Y+12, r25	; 0x0c
    327c:	ad 87       	std	Y+13, r26	; 0x0d
    327e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3280:	6b 85       	ldd	r22, Y+11	; 0x0b
    3282:	7c 85       	ldd	r23, Y+12	; 0x0c
    3284:	8d 85       	ldd	r24, Y+13	; 0x0d
    3286:	9e 85       	ldd	r25, Y+14	; 0x0e
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	4a ef       	ldi	r20, 0xFA	; 250
    328e:	54 e4       	ldi	r21, 0x44	; 68
    3290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	8f 83       	std	Y+7, r24	; 0x07
    329a:	98 87       	std	Y+8, r25	; 0x08
    329c:	a9 87       	std	Y+9, r26	; 0x09
    329e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32a0:	6f 81       	ldd	r22, Y+7	; 0x07
    32a2:	78 85       	ldd	r23, Y+8	; 0x08
    32a4:	89 85       	ldd	r24, Y+9	; 0x09
    32a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e8       	ldi	r20, 0x80	; 128
    32ae:	5f e3       	ldi	r21, 0x3F	; 63
    32b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32b4:	88 23       	and	r24, r24
    32b6:	2c f4       	brge	.+10     	; 0x32c2 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	9e 83       	std	Y+6, r25	; 0x06
    32be:	8d 83       	std	Y+5, r24	; 0x05
    32c0:	3f c0       	rjmp	.+126    	; 0x3340 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    32c2:	6f 81       	ldd	r22, Y+7	; 0x07
    32c4:	78 85       	ldd	r23, Y+8	; 0x08
    32c6:	89 85       	ldd	r24, Y+9	; 0x09
    32c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	3f ef       	ldi	r19, 0xFF	; 255
    32ce:	4f e7       	ldi	r20, 0x7F	; 127
    32d0:	57 e4       	ldi	r21, 0x47	; 71
    32d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32d6:	18 16       	cp	r1, r24
    32d8:	4c f5       	brge	.+82     	; 0x332c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32da:	6b 85       	ldd	r22, Y+11	; 0x0b
    32dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32de:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	40 e2       	ldi	r20, 0x20	; 32
    32e8:	51 e4       	ldi	r21, 0x41	; 65
    32ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	bc 01       	movw	r22, r24
    32f4:	cd 01       	movw	r24, r26
    32f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	9e 83       	std	Y+6, r25	; 0x06
    3300:	8d 83       	std	Y+5, r24	; 0x05
    3302:	0f c0       	rjmp	.+30     	; 0x3322 <LCD_displayCharacter+0x39a>
    3304:	88 ec       	ldi	r24, 0xC8	; 200
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	9c 83       	std	Y+4, r25	; 0x04
    330a:	8b 83       	std	Y+3, r24	; 0x03
    330c:	8b 81       	ldd	r24, Y+3	; 0x03
    330e:	9c 81       	ldd	r25, Y+4	; 0x04
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	f1 f7       	brne	.-4      	; 0x3310 <LCD_displayCharacter+0x388>
    3314:	9c 83       	std	Y+4, r25	; 0x04
    3316:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3318:	8d 81       	ldd	r24, Y+5	; 0x05
    331a:	9e 81       	ldd	r25, Y+6	; 0x06
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	9e 83       	std	Y+6, r25	; 0x06
    3320:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3322:	8d 81       	ldd	r24, Y+5	; 0x05
    3324:	9e 81       	ldd	r25, Y+6	; 0x06
    3326:	00 97       	sbiw	r24, 0x00	; 0
    3328:	69 f7       	brne	.-38     	; 0x3304 <LCD_displayCharacter+0x37c>
    332a:	14 c0       	rjmp	.+40     	; 0x3354 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    332c:	6f 81       	ldd	r22, Y+7	; 0x07
    332e:	78 85       	ldd	r23, Y+8	; 0x08
    3330:	89 85       	ldd	r24, Y+9	; 0x09
    3332:	9a 85       	ldd	r25, Y+10	; 0x0a
    3334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	9e 83       	std	Y+6, r25	; 0x06
    333e:	8d 83       	std	Y+5, r24	; 0x05
    3340:	8d 81       	ldd	r24, Y+5	; 0x05
    3342:	9e 81       	ldd	r25, Y+6	; 0x06
    3344:	9a 83       	std	Y+2, r25	; 0x02
    3346:	89 83       	std	Y+1, r24	; 0x01
    3348:	89 81       	ldd	r24, Y+1	; 0x01
    334a:	9a 81       	ldd	r25, Y+2	; 0x02
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	f1 f7       	brne	.-4      	; 0x334c <LCD_displayCharacter+0x3c4>
    3350:	9a 83       	std	Y+2, r25	; 0x02
    3352:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3354:	e9 96       	adiw	r28, 0x39	; 57
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	de bf       	out	0x3e, r29	; 62
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	cd bf       	out	0x3d, r28	; 61
    3360:	cf 91       	pop	r28
    3362:	df 91       	pop	r29
    3364:	08 95       	ret

00003366 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	00 d0       	rcall	.+0      	; 0x336c <LCD_displayString+0x6>
    336c:	0f 92       	push	r0
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	9b 83       	std	Y+3, r25	; 0x03
    3374:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3376:	19 82       	std	Y+1, r1	; 0x01
    3378:	0e c0       	rjmp	.+28     	; 0x3396 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	28 2f       	mov	r18, r24
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	8a 81       	ldd	r24, Y+2	; 0x02
    3382:	9b 81       	ldd	r25, Y+3	; 0x03
    3384:	fc 01       	movw	r30, r24
    3386:	e2 0f       	add	r30, r18
    3388:	f3 1f       	adc	r31, r19
    338a:	80 81       	ld	r24, Z
    338c:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <LCD_displayCharacter>
		i++;
    3390:	89 81       	ldd	r24, Y+1	; 0x01
    3392:	8f 5f       	subi	r24, 0xFF	; 255
    3394:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	28 2f       	mov	r18, r24
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	8a 81       	ldd	r24, Y+2	; 0x02
    339e:	9b 81       	ldd	r25, Y+3	; 0x03
    33a0:	fc 01       	movw	r30, r24
    33a2:	e2 0f       	add	r30, r18
    33a4:	f3 1f       	adc	r31, r19
    33a6:	80 81       	ld	r24, Z
    33a8:	88 23       	and	r24, r24
    33aa:	39 f7       	brne	.-50     	; 0x337a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	cf 91       	pop	r28
    33b4:	df 91       	pop	r29
    33b6:	08 95       	ret

000033b8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    33b8:	df 93       	push	r29
    33ba:	cf 93       	push	r28
    33bc:	00 d0       	rcall	.+0      	; 0x33be <LCD_moveCursor+0x6>
    33be:	00 d0       	rcall	.+0      	; 0x33c0 <LCD_moveCursor+0x8>
    33c0:	0f 92       	push	r0
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	8a 83       	std	Y+2, r24	; 0x02
    33c8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    33ca:	8a 81       	ldd	r24, Y+2	; 0x02
    33cc:	28 2f       	mov	r18, r24
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	3d 83       	std	Y+5, r19	; 0x05
    33d2:	2c 83       	std	Y+4, r18	; 0x04
    33d4:	8c 81       	ldd	r24, Y+4	; 0x04
    33d6:	9d 81       	ldd	r25, Y+5	; 0x05
    33d8:	81 30       	cpi	r24, 0x01	; 1
    33da:	91 05       	cpc	r25, r1
    33dc:	c1 f0       	breq	.+48     	; 0x340e <LCD_moveCursor+0x56>
    33de:	2c 81       	ldd	r18, Y+4	; 0x04
    33e0:	3d 81       	ldd	r19, Y+5	; 0x05
    33e2:	22 30       	cpi	r18, 0x02	; 2
    33e4:	31 05       	cpc	r19, r1
    33e6:	2c f4       	brge	.+10     	; 0x33f2 <LCD_moveCursor+0x3a>
    33e8:	8c 81       	ldd	r24, Y+4	; 0x04
    33ea:	9d 81       	ldd	r25, Y+5	; 0x05
    33ec:	00 97       	sbiw	r24, 0x00	; 0
    33ee:	61 f0       	breq	.+24     	; 0x3408 <LCD_moveCursor+0x50>
    33f0:	19 c0       	rjmp	.+50     	; 0x3424 <LCD_moveCursor+0x6c>
    33f2:	2c 81       	ldd	r18, Y+4	; 0x04
    33f4:	3d 81       	ldd	r19, Y+5	; 0x05
    33f6:	22 30       	cpi	r18, 0x02	; 2
    33f8:	31 05       	cpc	r19, r1
    33fa:	69 f0       	breq	.+26     	; 0x3416 <LCD_moveCursor+0x5e>
    33fc:	8c 81       	ldd	r24, Y+4	; 0x04
    33fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3400:	83 30       	cpi	r24, 0x03	; 3
    3402:	91 05       	cpc	r25, r1
    3404:	61 f0       	breq	.+24     	; 0x341e <LCD_moveCursor+0x66>
    3406:	0e c0       	rjmp	.+28     	; 0x3424 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	89 83       	std	Y+1, r24	; 0x01
    340c:	0b c0       	rjmp	.+22     	; 0x3424 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	80 5c       	subi	r24, 0xC0	; 192
    3412:	89 83       	std	Y+1, r24	; 0x01
    3414:	07 c0       	rjmp	.+14     	; 0x3424 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3416:	8b 81       	ldd	r24, Y+3	; 0x03
    3418:	80 5f       	subi	r24, 0xF0	; 240
    341a:	89 83       	std	Y+1, r24	; 0x01
    341c:	03 c0       	rjmp	.+6      	; 0x3424 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    341e:	8b 81       	ldd	r24, Y+3	; 0x03
    3420:	80 5b       	subi	r24, 0xB0	; 176
    3422:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	80 68       	ori	r24, 0x80	; 128
    3428:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_sendCommand>
}
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	08 95       	ret

0000343c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    343c:	df 93       	push	r29
    343e:	cf 93       	push	r28
    3440:	00 d0       	rcall	.+0      	; 0x3442 <LCD_displayStringRowColumn+0x6>
    3442:	00 d0       	rcall	.+0      	; 0x3444 <LCD_displayStringRowColumn+0x8>
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    3448:	89 83       	std	Y+1, r24	; 0x01
    344a:	6a 83       	std	Y+2, r22	; 0x02
    344c:	5c 83       	std	Y+4, r21	; 0x04
    344e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3450:	89 81       	ldd	r24, Y+1	; 0x01
    3452:	6a 81       	ldd	r22, Y+2	; 0x02
    3454:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3458:	8b 81       	ldd	r24, Y+3	; 0x03
    345a:	9c 81       	ldd	r25, Y+4	; 0x04
    345c:	0e 94 b3 19 	call	0x3366	; 0x3366 <LCD_displayString>
}
    3460:	0f 90       	pop	r0
    3462:	0f 90       	pop	r0
    3464:	0f 90       	pop	r0
    3466:	0f 90       	pop	r0
    3468:	cf 91       	pop	r28
    346a:	df 91       	pop	r29
    346c:	08 95       	ret

0000346e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    346e:	df 93       	push	r29
    3470:	cf 93       	push	r28
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62
    3476:	62 97       	sbiw	r28, 0x12	; 18
    3478:	0f b6       	in	r0, 0x3f	; 63
    347a:	f8 94       	cli
    347c:	de bf       	out	0x3e, r29	; 62
    347e:	0f be       	out	0x3f, r0	; 63
    3480:	cd bf       	out	0x3d, r28	; 61
    3482:	9a 8b       	std	Y+18, r25	; 0x12
    3484:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3486:	89 89       	ldd	r24, Y+17	; 0x11
    3488:	9a 89       	ldd	r25, Y+18	; 0x12
    348a:	9e 01       	movw	r18, r28
    348c:	2f 5f       	subi	r18, 0xFF	; 255
    348e:	3f 4f       	sbci	r19, 0xFF	; 255
    3490:	b9 01       	movw	r22, r18
    3492:	4a e0       	ldi	r20, 0x0A	; 10
    3494:	50 e0       	ldi	r21, 0x00	; 0
    3496:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <itoa>
   LCD_displayString(buff); /* Display the string */
    349a:	ce 01       	movw	r24, r28
    349c:	01 96       	adiw	r24, 0x01	; 1
    349e:	0e 94 b3 19 	call	0x3366	; 0x3366 <LCD_displayString>
}
    34a2:	62 96       	adiw	r28, 0x12	; 18
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	cf 91       	pop	r28
    34b0:	df 91       	pop	r29
    34b2:	08 95       	ret

000034b4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    34b4:	df 93       	push	r29
    34b6:	cf 93       	push	r28
    34b8:	cd b7       	in	r28, 0x3d	; 61
    34ba:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_sendCommand>
}
    34c2:	cf 91       	pop	r28
    34c4:	df 91       	pop	r29
    34c6:	08 95       	ret

000034c8 <__vector_7>:
#include "Headers/common_macros.h"
#include "Headers/std_types.h"
#include "avr/io.h"
#include <avr/interrupt.h>
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
ISR(TIMER1_COMPA_vect) {
    34c8:	1f 92       	push	r1
    34ca:	0f 92       	push	r0
    34cc:	0f b6       	in	r0, 0x3f	; 63
    34ce:	0f 92       	push	r0
    34d0:	11 24       	eor	r1, r1
    34d2:	2f 93       	push	r18
    34d4:	3f 93       	push	r19
    34d6:	4f 93       	push	r20
    34d8:	5f 93       	push	r21
    34da:	6f 93       	push	r22
    34dc:	7f 93       	push	r23
    34de:	8f 93       	push	r24
    34e0:	9f 93       	push	r25
    34e2:	af 93       	push	r26
    34e4:	bf 93       	push	r27
    34e6:	ef 93       	push	r30
    34e8:	ff 93       	push	r31
    34ea:	df 93       	push	r29
    34ec:	cf 93       	push	r28
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr !=  NULL_PTR){
    34f2:	80 91 bc 00 	lds	r24, 0x00BC
    34f6:	90 91 bd 00 	lds	r25, 0x00BD
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	29 f0       	breq	.+10     	; 0x3508 <__vector_7+0x40>
		(*g_callBackPtr)();
    34fe:	e0 91 bc 00 	lds	r30, 0x00BC
    3502:	f0 91 bd 00 	lds	r31, 0x00BD
    3506:	09 95       	icall
	}
}
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	ff 91       	pop	r31
    350e:	ef 91       	pop	r30
    3510:	bf 91       	pop	r27
    3512:	af 91       	pop	r26
    3514:	9f 91       	pop	r25
    3516:	8f 91       	pop	r24
    3518:	7f 91       	pop	r23
    351a:	6f 91       	pop	r22
    351c:	5f 91       	pop	r21
    351e:	4f 91       	pop	r20
    3520:	3f 91       	pop	r19
    3522:	2f 91       	pop	r18
    3524:	0f 90       	pop	r0
    3526:	0f be       	out	0x3f, r0	; 63
    3528:	0f 90       	pop	r0
    352a:	1f 90       	pop	r1
    352c:	18 95       	reti

0000352e <__vector_9>:
ISR(TIMER1_OVF_vect) {
    352e:	1f 92       	push	r1
    3530:	0f 92       	push	r0
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	0f 92       	push	r0
    3536:	11 24       	eor	r1, r1
    3538:	2f 93       	push	r18
    353a:	3f 93       	push	r19
    353c:	4f 93       	push	r20
    353e:	5f 93       	push	r21
    3540:	6f 93       	push	r22
    3542:	7f 93       	push	r23
    3544:	8f 93       	push	r24
    3546:	9f 93       	push	r25
    3548:	af 93       	push	r26
    354a:	bf 93       	push	r27
    354c:	ef 93       	push	r30
    354e:	ff 93       	push	r31
    3550:	df 93       	push	r29
    3552:	cf 93       	push	r28
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr !=  NULL_PTR){
    3558:	80 91 bc 00 	lds	r24, 0x00BC
    355c:	90 91 bd 00 	lds	r25, 0x00BD
    3560:	00 97       	sbiw	r24, 0x00	; 0
    3562:	29 f0       	breq	.+10     	; 0x356e <__vector_9+0x40>
			(*g_callBackPtr)();
    3564:	e0 91 bc 00 	lds	r30, 0x00BC
    3568:	f0 91 bd 00 	lds	r31, 0x00BD
    356c:	09 95       	icall
		}
}
    356e:	cf 91       	pop	r28
    3570:	df 91       	pop	r29
    3572:	ff 91       	pop	r31
    3574:	ef 91       	pop	r30
    3576:	bf 91       	pop	r27
    3578:	af 91       	pop	r26
    357a:	9f 91       	pop	r25
    357c:	8f 91       	pop	r24
    357e:	7f 91       	pop	r23
    3580:	6f 91       	pop	r22
    3582:	5f 91       	pop	r21
    3584:	4f 91       	pop	r20
    3586:	3f 91       	pop	r19
    3588:	2f 91       	pop	r18
    358a:	0f 90       	pop	r0
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	0f 90       	pop	r0
    3590:	1f 90       	pop	r1
    3592:	18 95       	reti

00003594 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	00 d0       	rcall	.+0      	; 0x359a <Timer1_init+0x6>
    359a:	cd b7       	in	r28, 0x3d	; 61
    359c:	de b7       	in	r29, 0x3e	; 62
    359e:	9a 83       	std	Y+2, r25	; 0x02
    35a0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TCCR1A,FOC1A);
    35a2:	af e4       	ldi	r26, 0x4F	; 79
    35a4:	b0 e0       	ldi	r27, 0x00	; 0
    35a6:	ef e4       	ldi	r30, 0x4F	; 79
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
    35aa:	80 81       	ld	r24, Z
    35ac:	88 60       	ori	r24, 0x08	; 8
    35ae:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1A);
    35b0:	af e4       	ldi	r26, 0x4F	; 79
    35b2:	b0 e0       	ldi	r27, 0x00	; 0
    35b4:	ef e4       	ldi	r30, 0x4F	; 79
    35b6:	f0 e0       	ldi	r31, 0x00	; 0
    35b8:	80 81       	ld	r24, Z
    35ba:	88 60       	ori	r24, 0x08	; 8
    35bc:	8c 93       	st	X, r24


	TCNT1 = Config_Ptr -> initial_value;
    35be:	ac e4       	ldi	r26, 0x4C	; 76
    35c0:	b0 e0       	ldi	r27, 0x00	; 0
    35c2:	e9 81       	ldd	r30, Y+1	; 0x01
    35c4:	fa 81       	ldd	r31, Y+2	; 0x02
    35c6:	80 81       	ld	r24, Z
    35c8:	91 81       	ldd	r25, Z+1	; 0x01
    35ca:	11 96       	adiw	r26, 0x01	; 1
    35cc:	9c 93       	st	X, r25
    35ce:	8e 93       	st	-X, r24
	if(Config_Ptr->mode == NORMAL){
    35d0:	e9 81       	ldd	r30, Y+1	; 0x01
    35d2:	fa 81       	ldd	r31, Y+2	; 0x02
    35d4:	85 81       	ldd	r24, Z+5	; 0x05
    35d6:	88 23       	and	r24, r24
    35d8:	81 f5       	brne	.+96     	; 0x363a <Timer1_init+0xa6>
		CLEAR_BIT(TCCR1A,WGM10);
    35da:	af e4       	ldi	r26, 0x4F	; 79
    35dc:	b0 e0       	ldi	r27, 0x00	; 0
    35de:	ef e4       	ldi	r30, 0x4F	; 79
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	80 81       	ld	r24, Z
    35e4:	8e 7f       	andi	r24, 0xFE	; 254
    35e6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    35e8:	af e4       	ldi	r26, 0x4F	; 79
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	ef e4       	ldi	r30, 0x4F	; 79
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	80 81       	ld	r24, Z
    35f2:	8d 7f       	andi	r24, 0xFD	; 253
    35f4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    35f6:	ae e4       	ldi	r26, 0x4E	; 78
    35f8:	b0 e0       	ldi	r27, 0x00	; 0
    35fa:	ee e4       	ldi	r30, 0x4E	; 78
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	80 81       	ld	r24, Z
    3600:	87 7f       	andi	r24, 0xF7	; 247
    3602:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    3604:	ae e4       	ldi	r26, 0x4E	; 78
    3606:	b0 e0       	ldi	r27, 0x00	; 0
    3608:	ee e4       	ldi	r30, 0x4E	; 78
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	80 81       	ld	r24, Z
    360e:	8f 7e       	andi	r24, 0xEF	; 239
    3610:	8c 93       	st	X, r24
		TCCR1B =  TCCR1B | (Config_Ptr->prescaler & 0x7 );
    3612:	ae e4       	ldi	r26, 0x4E	; 78
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	ee e4       	ldi	r30, 0x4E	; 78
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	98 2f       	mov	r25, r24
    361e:	e9 81       	ldd	r30, Y+1	; 0x01
    3620:	fa 81       	ldd	r31, Y+2	; 0x02
    3622:	84 81       	ldd	r24, Z+4	; 0x04
    3624:	87 70       	andi	r24, 0x07	; 7
    3626:	89 2b       	or	r24, r25
    3628:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TOIE1);/*interrupt enable*/
    362a:	a9 e5       	ldi	r26, 0x59	; 89
    362c:	b0 e0       	ldi	r27, 0x00	; 0
    362e:	e9 e5       	ldi	r30, 0x59	; 89
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	84 60       	ori	r24, 0x04	; 4
    3636:	8c 93       	st	X, r24
    3638:	40 c0       	rjmp	.+128    	; 0x36ba <Timer1_init+0x126>
	}
	else if(Config_Ptr->mode == COMPARE){
    363a:	e9 81       	ldd	r30, Y+1	; 0x01
    363c:	fa 81       	ldd	r31, Y+2	; 0x02
    363e:	85 81       	ldd	r24, Z+5	; 0x05
    3640:	81 30       	cpi	r24, 0x01	; 1
    3642:	d9 f5       	brne	.+118    	; 0x36ba <Timer1_init+0x126>
		CLEAR_BIT(TCCR1A,WGM10);
    3644:	af e4       	ldi	r26, 0x4F	; 79
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	ef e4       	ldi	r30, 0x4F	; 79
    364a:	f0 e0       	ldi	r31, 0x00	; 0
    364c:	80 81       	ld	r24, Z
    364e:	8e 7f       	andi	r24, 0xFE	; 254
    3650:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    3652:	af e4       	ldi	r26, 0x4F	; 79
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	ef e4       	ldi	r30, 0x4F	; 79
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
    365c:	8d 7f       	andi	r24, 0xFD	; 253
    365e:	8c 93       	st	X, r24
		TCCR1A = 0;
    3660:	ef e4       	ldi	r30, 0x4F	; 79
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	10 82       	st	Z, r1
		SET_BIT(TCCR1B,WGM12);
    3666:	ae e4       	ldi	r26, 0x4E	; 78
    3668:	b0 e0       	ldi	r27, 0x00	; 0
    366a:	ee e4       	ldi	r30, 0x4E	; 78
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	80 81       	ld	r24, Z
    3670:	88 60       	ori	r24, 0x08	; 8
    3672:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    3674:	ae e4       	ldi	r26, 0x4E	; 78
    3676:	b0 e0       	ldi	r27, 0x00	; 0
    3678:	ee e4       	ldi	r30, 0x4E	; 78
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	80 81       	ld	r24, Z
    367e:	8f 7e       	andi	r24, 0xEF	; 239
    3680:	8c 93       	st	X, r24
		TCCR1B =  TCCR1B | (Config_Ptr->prescaler & 0x7 );
    3682:	ae e4       	ldi	r26, 0x4E	; 78
    3684:	b0 e0       	ldi	r27, 0x00	; 0
    3686:	ee e4       	ldi	r30, 0x4E	; 78
    3688:	f0 e0       	ldi	r31, 0x00	; 0
    368a:	80 81       	ld	r24, Z
    368c:	98 2f       	mov	r25, r24
    368e:	e9 81       	ldd	r30, Y+1	; 0x01
    3690:	fa 81       	ldd	r31, Y+2	; 0x02
    3692:	84 81       	ldd	r24, Z+4	; 0x04
    3694:	87 70       	andi	r24, 0x07	; 7
    3696:	89 2b       	or	r24, r25
    3698:	8c 93       	st	X, r24
		OCR1A =Config_Ptr -> compare_value;
    369a:	aa e4       	ldi	r26, 0x4A	; 74
    369c:	b0 e0       	ldi	r27, 0x00	; 0
    369e:	e9 81       	ldd	r30, Y+1	; 0x01
    36a0:	fa 81       	ldd	r31, Y+2	; 0x02
    36a2:	82 81       	ldd	r24, Z+2	; 0x02
    36a4:	93 81       	ldd	r25, Z+3	; 0x03
    36a6:	11 96       	adiw	r26, 0x01	; 1
    36a8:	9c 93       	st	X, r25
    36aa:	8e 93       	st	-X, r24
		SET_BIT(TIMSK,OCIE1A);/*interrupt enable*/
    36ac:	a9 e5       	ldi	r26, 0x59	; 89
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	e9 e5       	ldi	r30, 0x59	; 89
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	80 81       	ld	r24, Z
    36b6:	80 61       	ori	r24, 0x10	; 16
    36b8:	8c 93       	st	X, r24
	}

	SREG |= (1 << 7);
    36ba:	af e5       	ldi	r26, 0x5F	; 95
    36bc:	b0 e0       	ldi	r27, 0x00	; 0
    36be:	ef e5       	ldi	r30, 0x5F	; 95
    36c0:	f0 e0       	ldi	r31, 0x00	; 0
    36c2:	80 81       	ld	r24, Z
    36c4:	80 68       	ori	r24, 0x80	; 128
    36c6:	8c 93       	st	X, r24


}
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	cf 91       	pop	r28
    36ce:	df 91       	pop	r29
    36d0:	08 95       	ret

000036d2 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    36d2:	df 93       	push	r29
    36d4:	cf 93       	push	r28
    36d6:	00 d0       	rcall	.+0      	; 0x36d8 <Timer1_setCallBack+0x6>
    36d8:	cd b7       	in	r28, 0x3d	; 61
    36da:	de b7       	in	r29, 0x3e	; 62
    36dc:	9a 83       	std	Y+2, r25	; 0x02
    36de:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	9a 81       	ldd	r25, Y+2	; 0x02
    36e4:	90 93 bd 00 	sts	0x00BD, r25
    36e8:	80 93 bc 00 	sts	0x00BC, r24
}
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	cf 91       	pop	r28
    36f2:	df 91       	pop	r29
    36f4:	08 95       	ret

000036f6 <Timer1_deInit>:

void Timer1_deInit(void){
    36f6:	df 93       	push	r29
    36f8:	cf 93       	push	r28
    36fa:	cd b7       	in	r28, 0x3d	; 61
    36fc:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    36fe:	ec e4       	ldi	r30, 0x4C	; 76
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	11 82       	std	Z+1, r1	; 0x01
    3704:	10 82       	st	Z, r1
	OCR1A = 0;
    3706:	ea e4       	ldi	r30, 0x4A	; 74
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	11 82       	std	Z+1, r1	; 0x01
    370c:	10 82       	st	Z, r1
	TCCR1B = TCCR1B & 0x20;
    370e:	ae e4       	ldi	r26, 0x4E	; 78
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	ee e4       	ldi	r30, 0x4E	; 78
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	80 81       	ld	r24, Z
    3718:	80 72       	andi	r24, 0x20	; 32
    371a:	8c 93       	st	X, r24
	TCCR1A = 0;
    371c:	ef e4       	ldi	r30, 0x4F	; 79
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	10 82       	st	Z, r1
	g_callBackPtr = NULL_PTR;
    3722:	10 92 bd 00 	sts	0x00BD, r1
    3726:	10 92 bc 00 	sts	0x00BC, r1
	CLEAR_BIT(TIMSK,TOIE1);
    372a:	a9 e5       	ldi	r26, 0x59	; 89
    372c:	b0 e0       	ldi	r27, 0x00	; 0
    372e:	e9 e5       	ldi	r30, 0x59	; 89
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	80 81       	ld	r24, Z
    3734:	8b 7f       	andi	r24, 0xFB	; 251
    3736:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE1A);
    3738:	a9 e5       	ldi	r26, 0x59	; 89
    373a:	b0 e0       	ldi	r27, 0x00	; 0
    373c:	e9 e5       	ldi	r30, 0x59	; 89
    373e:	f0 e0       	ldi	r31, 0x00	; 0
    3740:	80 81       	ld	r24, Z
    3742:	8f 7e       	andi	r24, 0xEF	; 239
    3744:	8c 93       	st	X, r24
	SREG &= ~(1 << 7);
    3746:	af e5       	ldi	r26, 0x5F	; 95
    3748:	b0 e0       	ldi	r27, 0x00	; 0
    374a:	ef e5       	ldi	r30, 0x5F	; 95
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	80 81       	ld	r24, Z
    3750:	8f 77       	andi	r24, 0x7F	; 127
    3752:	8c 93       	st	X, r24

}
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	00 d0       	rcall	.+0      	; 0x3760 <UART_init+0x6>
    3760:	00 d0       	rcall	.+0      	; 0x3762 <UART_init+0x8>
    3762:	00 d0       	rcall	.+0      	; 0x3764 <UART_init+0xa>
    3764:	cd b7       	in	r28, 0x3d	; 61
    3766:	de b7       	in	r29, 0x3e	; 62
    3768:	6b 83       	std	Y+3, r22	; 0x03
    376a:	7c 83       	std	Y+4, r23	; 0x04
    376c:	8d 83       	std	Y+5, r24	; 0x05
    376e:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    3770:	1a 82       	std	Y+2, r1	; 0x02
    3772:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3774:	eb e2       	ldi	r30, 0x2B	; 43
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	82 e0       	ldi	r24, 0x02	; 2
    377a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    377c:	ea e2       	ldi	r30, 0x2A	; 42
    377e:	f0 e0       	ldi	r31, 0x00	; 0
    3780:	88 e1       	ldi	r24, 0x18	; 24
    3782:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    3784:	e0 e4       	ldi	r30, 0x40	; 64
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	86 e8       	ldi	r24, 0x86	; 134
    378a:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    378c:	8b 81       	ldd	r24, Y+3	; 0x03
    378e:	9c 81       	ldd	r25, Y+4	; 0x04
    3790:	ad 81       	ldd	r26, Y+5	; 0x05
    3792:	be 81       	ldd	r27, Y+6	; 0x06
    3794:	88 0f       	add	r24, r24
    3796:	99 1f       	adc	r25, r25
    3798:	aa 1f       	adc	r26, r26
    379a:	bb 1f       	adc	r27, r27
    379c:	88 0f       	add	r24, r24
    379e:	99 1f       	adc	r25, r25
    37a0:	aa 1f       	adc	r26, r26
    37a2:	bb 1f       	adc	r27, r27
    37a4:	88 0f       	add	r24, r24
    37a6:	99 1f       	adc	r25, r25
    37a8:	aa 1f       	adc	r26, r26
    37aa:	bb 1f       	adc	r27, r27
    37ac:	9c 01       	movw	r18, r24
    37ae:	ad 01       	movw	r20, r26
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	92 e1       	ldi	r25, 0x12	; 18
    37b4:	aa e7       	ldi	r26, 0x7A	; 122
    37b6:	b0 e0       	ldi	r27, 0x00	; 0
    37b8:	bc 01       	movw	r22, r24
    37ba:	cd 01       	movw	r24, r26
    37bc:	0e 94 9d 1c 	call	0x393a	; 0x393a <__udivmodsi4>
    37c0:	da 01       	movw	r26, r20
    37c2:	c9 01       	movw	r24, r18
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	9a 83       	std	Y+2, r25	; 0x02
    37c8:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    37ca:	e0 e4       	ldi	r30, 0x40	; 64
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
    37d0:	9a 81       	ldd	r25, Y+2	; 0x02
    37d2:	89 2f       	mov	r24, r25
    37d4:	99 27       	eor	r25, r25
    37d6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    37d8:	e9 e2       	ldi	r30, 0x29	; 41
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	80 83       	st	Z, r24
}
    37e0:	26 96       	adiw	r28, 0x06	; 6
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	f8 94       	cli
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	cd bf       	out	0x3d, r28	; 61
    37ec:	cf 91       	pop	r28
    37ee:	df 91       	pop	r29
    37f0:	08 95       	ret

000037f2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    37f2:	df 93       	push	r29
    37f4:	cf 93       	push	r28
    37f6:	0f 92       	push	r0
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
    37fc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    37fe:	eb e2       	ldi	r30, 0x2B	; 43
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	88 2f       	mov	r24, r24
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	80 72       	andi	r24, 0x20	; 32
    380a:	90 70       	andi	r25, 0x00	; 0
    380c:	00 97       	sbiw	r24, 0x00	; 0
    380e:	b9 f3       	breq	.-18     	; 0x37fe <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3810:	ec e2       	ldi	r30, 0x2C	; 44
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	89 81       	ldd	r24, Y+1	; 0x01
    3816:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3818:	0f 90       	pop	r0
    381a:	cf 91       	pop	r28
    381c:	df 91       	pop	r29
    381e:	08 95       	ret

00003820 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3820:	df 93       	push	r29
    3822:	cf 93       	push	r28
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3828:	eb e2       	ldi	r30, 0x2B	; 43
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	80 81       	ld	r24, Z
    382e:	88 23       	and	r24, r24
    3830:	dc f7       	brge	.-10     	; 0x3828 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3832:	ec e2       	ldi	r30, 0x2C	; 44
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	80 81       	ld	r24, Z
}
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	00 d0       	rcall	.+0      	; 0x3844 <UART_sendString+0x6>
    3844:	0f 92       	push	r0
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	9b 83       	std	Y+3, r25	; 0x03
    384c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    384e:	19 82       	std	Y+1, r1	; 0x01

	/* Send the whole string */
	while(1)
		{
			UART_sendByte(Str[i]);
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	28 2f       	mov	r18, r24
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	8a 81       	ldd	r24, Y+2	; 0x02
    3858:	9b 81       	ldd	r25, Y+3	; 0x03
    385a:	fc 01       	movw	r30, r24
    385c:	e2 0f       	add	r30, r18
    385e:	f3 1f       	adc	r31, r19
    3860:	80 81       	ld	r24, Z
    3862:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <UART_sendByte>
			if (Str[i] == '\0'){
    3866:	89 81       	ldd	r24, Y+1	; 0x01
    3868:	28 2f       	mov	r18, r24
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	8a 81       	ldd	r24, Y+2	; 0x02
    386e:	9b 81       	ldd	r25, Y+3	; 0x03
    3870:	fc 01       	movw	r30, r24
    3872:	e2 0f       	add	r30, r18
    3874:	f3 1f       	adc	r31, r19
    3876:	80 81       	ld	r24, Z
    3878:	88 23       	and	r24, r24
    387a:	21 f0       	breq	.+8      	; 0x3884 <UART_sendString+0x46>
				break;
			}
			i++;
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	8f 5f       	subi	r24, 0xFF	; 255
    3880:	89 83       	std	Y+1, r24	; 0x01
    3882:	e6 cf       	rjmp	.-52     	; 0x3850 <UART_sendString+0x12>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3884:	0f 90       	pop	r0
    3886:	0f 90       	pop	r0
    3888:	0f 90       	pop	r0
    388a:	cf 91       	pop	r28
    388c:	df 91       	pop	r29
    388e:	08 95       	ret

00003890 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3890:	0f 93       	push	r16
    3892:	1f 93       	push	r17
    3894:	df 93       	push	r29
    3896:	cf 93       	push	r28
    3898:	00 d0       	rcall	.+0      	; 0x389a <UART_receiveString+0xa>
    389a:	0f 92       	push	r0
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
    38a0:	9b 83       	std	Y+3, r25	; 0x03
    38a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    38a4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	28 2f       	mov	r18, r24
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	8a 81       	ldd	r24, Y+2	; 0x02
    38ae:	9b 81       	ldd	r25, Y+3	; 0x03
    38b0:	8c 01       	movw	r16, r24
    38b2:	02 0f       	add	r16, r18
    38b4:	13 1f       	adc	r17, r19
    38b6:	0e 94 10 1c 	call	0x3820	; 0x3820 <UART_recieveByte>
    38ba:	f8 01       	movw	r30, r16
    38bc:	80 83       	st	Z, r24

	/* Receive the whole string until the '#' */
	while(1)
	{
		i++;
    38be:	89 81       	ldd	r24, Y+1	; 0x01
    38c0:	8f 5f       	subi	r24, 0xFF	; 255
    38c2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    38c4:	89 81       	ldd	r24, Y+1	; 0x01
    38c6:	28 2f       	mov	r18, r24
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	8a 81       	ldd	r24, Y+2	; 0x02
    38cc:	9b 81       	ldd	r25, Y+3	; 0x03
    38ce:	8c 01       	movw	r16, r24
    38d0:	02 0f       	add	r16, r18
    38d2:	13 1f       	adc	r17, r19
    38d4:	0e 94 10 1c 	call	0x3820	; 0x3820 <UART_recieveByte>
    38d8:	f8 01       	movw	r30, r16
    38da:	80 83       	st	Z, r24
		if (Str[i] == '\0'){
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	28 2f       	mov	r18, r24
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	8a 81       	ldd	r24, Y+2	; 0x02
    38e4:	9b 81       	ldd	r25, Y+3	; 0x03
    38e6:	fc 01       	movw	r30, r24
    38e8:	e2 0f       	add	r30, r18
    38ea:	f3 1f       	adc	r31, r19
    38ec:	80 81       	ld	r24, Z
    38ee:	88 23       	and	r24, r24
    38f0:	31 f7       	brne	.-52     	; 0x38be <UART_receiveString+0x2e>
			break;
		}
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	28 2f       	mov	r18, r24
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	8a 81       	ldd	r24, Y+2	; 0x02
    38fa:	9b 81       	ldd	r25, Y+3	; 0x03
    38fc:	fc 01       	movw	r30, r24
    38fe:	e2 0f       	add	r30, r18
    3900:	f3 1f       	adc	r31, r19
    3902:	10 82       	st	Z, r1
}
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	0f 90       	pop	r0
    390a:	cf 91       	pop	r28
    390c:	df 91       	pop	r29
    390e:	1f 91       	pop	r17
    3910:	0f 91       	pop	r16
    3912:	08 95       	ret

00003914 <__divmodhi4>:
    3914:	97 fb       	bst	r25, 7
    3916:	09 2e       	mov	r0, r25
    3918:	07 26       	eor	r0, r23
    391a:	0a d0       	rcall	.+20     	; 0x3930 <__divmodhi4_neg1>
    391c:	77 fd       	sbrc	r23, 7
    391e:	04 d0       	rcall	.+8      	; 0x3928 <__divmodhi4_neg2>
    3920:	2e d0       	rcall	.+92     	; 0x397e <__udivmodhi4>
    3922:	06 d0       	rcall	.+12     	; 0x3930 <__divmodhi4_neg1>
    3924:	00 20       	and	r0, r0
    3926:	1a f4       	brpl	.+6      	; 0x392e <__divmodhi4_exit>

00003928 <__divmodhi4_neg2>:
    3928:	70 95       	com	r23
    392a:	61 95       	neg	r22
    392c:	7f 4f       	sbci	r23, 0xFF	; 255

0000392e <__divmodhi4_exit>:
    392e:	08 95       	ret

00003930 <__divmodhi4_neg1>:
    3930:	f6 f7       	brtc	.-4      	; 0x392e <__divmodhi4_exit>
    3932:	90 95       	com	r25
    3934:	81 95       	neg	r24
    3936:	9f 4f       	sbci	r25, 0xFF	; 255
    3938:	08 95       	ret

0000393a <__udivmodsi4>:
    393a:	a1 e2       	ldi	r26, 0x21	; 33
    393c:	1a 2e       	mov	r1, r26
    393e:	aa 1b       	sub	r26, r26
    3940:	bb 1b       	sub	r27, r27
    3942:	fd 01       	movw	r30, r26
    3944:	0d c0       	rjmp	.+26     	; 0x3960 <__udivmodsi4_ep>

00003946 <__udivmodsi4_loop>:
    3946:	aa 1f       	adc	r26, r26
    3948:	bb 1f       	adc	r27, r27
    394a:	ee 1f       	adc	r30, r30
    394c:	ff 1f       	adc	r31, r31
    394e:	a2 17       	cp	r26, r18
    3950:	b3 07       	cpc	r27, r19
    3952:	e4 07       	cpc	r30, r20
    3954:	f5 07       	cpc	r31, r21
    3956:	20 f0       	brcs	.+8      	; 0x3960 <__udivmodsi4_ep>
    3958:	a2 1b       	sub	r26, r18
    395a:	b3 0b       	sbc	r27, r19
    395c:	e4 0b       	sbc	r30, r20
    395e:	f5 0b       	sbc	r31, r21

00003960 <__udivmodsi4_ep>:
    3960:	66 1f       	adc	r22, r22
    3962:	77 1f       	adc	r23, r23
    3964:	88 1f       	adc	r24, r24
    3966:	99 1f       	adc	r25, r25
    3968:	1a 94       	dec	r1
    396a:	69 f7       	brne	.-38     	; 0x3946 <__udivmodsi4_loop>
    396c:	60 95       	com	r22
    396e:	70 95       	com	r23
    3970:	80 95       	com	r24
    3972:	90 95       	com	r25
    3974:	9b 01       	movw	r18, r22
    3976:	ac 01       	movw	r20, r24
    3978:	bd 01       	movw	r22, r26
    397a:	cf 01       	movw	r24, r30
    397c:	08 95       	ret

0000397e <__udivmodhi4>:
    397e:	aa 1b       	sub	r26, r26
    3980:	bb 1b       	sub	r27, r27
    3982:	51 e1       	ldi	r21, 0x11	; 17
    3984:	07 c0       	rjmp	.+14     	; 0x3994 <__udivmodhi4_ep>

00003986 <__udivmodhi4_loop>:
    3986:	aa 1f       	adc	r26, r26
    3988:	bb 1f       	adc	r27, r27
    398a:	a6 17       	cp	r26, r22
    398c:	b7 07       	cpc	r27, r23
    398e:	10 f0       	brcs	.+4      	; 0x3994 <__udivmodhi4_ep>
    3990:	a6 1b       	sub	r26, r22
    3992:	b7 0b       	sbc	r27, r23

00003994 <__udivmodhi4_ep>:
    3994:	88 1f       	adc	r24, r24
    3996:	99 1f       	adc	r25, r25
    3998:	5a 95       	dec	r21
    399a:	a9 f7       	brne	.-22     	; 0x3986 <__udivmodhi4_loop>
    399c:	80 95       	com	r24
    399e:	90 95       	com	r25
    39a0:	bc 01       	movw	r22, r24
    39a2:	cd 01       	movw	r24, r26
    39a4:	08 95       	ret

000039a6 <__prologue_saves__>:
    39a6:	2f 92       	push	r2
    39a8:	3f 92       	push	r3
    39aa:	4f 92       	push	r4
    39ac:	5f 92       	push	r5
    39ae:	6f 92       	push	r6
    39b0:	7f 92       	push	r7
    39b2:	8f 92       	push	r8
    39b4:	9f 92       	push	r9
    39b6:	af 92       	push	r10
    39b8:	bf 92       	push	r11
    39ba:	cf 92       	push	r12
    39bc:	df 92       	push	r13
    39be:	ef 92       	push	r14
    39c0:	ff 92       	push	r15
    39c2:	0f 93       	push	r16
    39c4:	1f 93       	push	r17
    39c6:	cf 93       	push	r28
    39c8:	df 93       	push	r29
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
    39ce:	ca 1b       	sub	r28, r26
    39d0:	db 0b       	sbc	r29, r27
    39d2:	0f b6       	in	r0, 0x3f	; 63
    39d4:	f8 94       	cli
    39d6:	de bf       	out	0x3e, r29	; 62
    39d8:	0f be       	out	0x3f, r0	; 63
    39da:	cd bf       	out	0x3d, r28	; 61
    39dc:	09 94       	ijmp

000039de <__epilogue_restores__>:
    39de:	2a 88       	ldd	r2, Y+18	; 0x12
    39e0:	39 88       	ldd	r3, Y+17	; 0x11
    39e2:	48 88       	ldd	r4, Y+16	; 0x10
    39e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    39e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    39e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    39ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    39ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    39ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    39f0:	b9 84       	ldd	r11, Y+9	; 0x09
    39f2:	c8 84       	ldd	r12, Y+8	; 0x08
    39f4:	df 80       	ldd	r13, Y+7	; 0x07
    39f6:	ee 80       	ldd	r14, Y+6	; 0x06
    39f8:	fd 80       	ldd	r15, Y+5	; 0x05
    39fa:	0c 81       	ldd	r16, Y+4	; 0x04
    39fc:	1b 81       	ldd	r17, Y+3	; 0x03
    39fe:	aa 81       	ldd	r26, Y+2	; 0x02
    3a00:	b9 81       	ldd	r27, Y+1	; 0x01
    3a02:	ce 0f       	add	r28, r30
    3a04:	d1 1d       	adc	r29, r1
    3a06:	0f b6       	in	r0, 0x3f	; 63
    3a08:	f8 94       	cli
    3a0a:	de bf       	out	0x3e, r29	; 62
    3a0c:	0f be       	out	0x3f, r0	; 63
    3a0e:	cd bf       	out	0x3d, r28	; 61
    3a10:	ed 01       	movw	r28, r26
    3a12:	08 95       	ret

00003a14 <_exit>:
    3a14:	f8 94       	cli

00003a16 <__stop_program>:
    3a16:	ff cf       	rjmp	.-2      	; 0x3a16 <__stop_program>
